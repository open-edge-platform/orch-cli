---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Component Tests
on:
  pull_request:
    types: [labeled]
  schedule:
    - cron: "0 0 * * *" # Run every day at midnight
  workflow_dispatch:  # Run on manual trigger
    inputs:
      run-component-tests:
        description: 'Run component tests'
        required: true
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  component-tests:
    name: Deploy Kind Orchestrator and Run Component Tests
    if: |
      ${{ inputs.run-component-tests || github.event_name == 'schedule' || github.event.label.name == 'run-component-tests' }}
    runs-on: ubuntu-24.04-16core-64GB # ubuntu-24.04-4core-16GB ubuntu-22.04-32core-128GB & ubuntu-24.04-16core-64GB
    timeout-minutes: 60
    env:
      ORCH_DEFAULT_PASSWORD: ${{ secrets.ORCH_DEFAULT_PASSWORD }}
      CODER_DIR: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.1
        with:
          repository: open-edge-platform/edge-manageability-framework
          token: ${{ secrets.SYS_ORCH_GITHUB }}
          ref: main

      - name: Fetch all branches
        run: git fetch --all

      - name: Set up git credentials
        shell: bash
        run: |
          echo "GOPRIVATE=github.com/open-edge-platform" >> $GITHUB_ENV
          git config --global url."https://${{ secrets.SYS_ORCH_GITHUB }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Setup asdf and install dependencies
        uses: open-edge-platform/orch-utils/.github/actions/setup-asdf@main

      - name: Checkout app-orch-catalog repository
        uses: actions/checkout@v4
        with:
          repository: open-edge-platform/app-orch-catalog
          path: app-orch-catalog
          token: ${{ secrets.SYS_ORCH_GITHUB }}

      - name: Get current git hash of the app-orch-catalog PR
        id: get-git-hash-catalog
        working-directory: app-orch-catalog
        run: echo "GIT_HASH_CHARTS=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_ENV"

      - name: Get current git hash of the edge-manageability-framework PR
        id: get-git-hash-deploy
        run: echo "GIT_HASH_DEPLOY=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"

      - name: Deploy External Orchestrator
        env:
          GIT_USER: "git"
          GIT_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
          ORCH_DEPLOY_REV: ${{ env.GIT_HASH_DEPLOY }}
          DOCKERHUB_TOKEN: ${{ secrets.SYS_DOCKERHUB_RO }}
          DOCKERHUB_USERNAME: ${{ secrets.SYS_DOCKERHUB_USERNAME }}
        run: |
          set +x
          echo "Starting to deploy Orchestrator..."
          mage deploy:kindMinimal
          echo "Orchestrator deployment done!"
          echo "Root App Status:"
          kubectl -n dev get applications root-app -o yaml

      - name: Verify Kind Deployment
        timeout-minutes: 50
        run: |
          echo "Starting to verify Orchestrator deployment..."
          mage deploy:waitUntilComplete &
          WAIT_PID=$!
          while kill -0 $WAIT_PID 2>/dev/null; do
            echo "Waiting for Orchestrator deployment to complete..."
            kubectl get pods -A || true
            sleep 30
          done
          wait $WAIT_PID || true
          echo "Orchestrator deployment verified!"
          mage router:stop router:start || true
          echo "Router restarted"

      - name: Setup Test environment
        shell: bash
        run: |
          sudo awk -i inplace '/BEGIN ORCH DEVELOPMENT HOSTS/,/END ORCH DEVELOPMENT HOSTS/ { next } 1' /etc/hosts
          sudo awk -i inplace '/BEGIN ORCH SRE DEVELOPMENT HOST/,/END ORCH SRE DEVELOPMENT HOST/ { next } 1' /etc/hosts
          mage gen:hostfileTraefik | sudo tee -a /etc/hosts > /dev/null
          echo "Updated Hostfile entries!"
          mage gen:orchCa deploy:orchCa

      - name: Setup users and project/org
        shell: bash
        run: |
          mage tenantUtils:createDefaultMtSetup
          echo "Orch org/project/users created!"
          echo "Project uID:"
          kubectl get projects.project -o json | jq -r ".items[0].status.projectStatus.uID"

      - name: Redeploy and Rebuild app-orch-catalog
        working-directory: app-orch-catalog
        run: |
          make coder-redeploy
          make coder-rebuild 

      - name: Describe app-orch-catalog
        run: kubectl describe deployments.app -n orch-app app-orch-catalog

      - name: Wait for app-orch-catalog pod to be Running
        run: |
          while true; do
            POD_NAME=$(kubectl get pods -n orch-app -l app.kubernetes.io/instance=app-orch-catalog -o jsonpath='{.items[0].metadata.name}')
            POD_STATUS=$(kubectl get pod $POD_NAME -n orch-app -o jsonpath='{.status.phase}')
            if [ "$POD_STATUS" == "Running" ]; then
              echo "Pod $POD_NAME is in Running state."
              break
            else
              echo "Pod $POD_NAME is not in Running state. Current state: $POD_STATUS"
              echo "Waiting for 10 seconds before checking again..."
              sleep 10
            fi
          done  

      - name: Run Catalog Component Tests
        working-directory: app-orch-catalog/test
        run: |
          make component-tests
          echo "Component tests done!"  

      - name: Get diagnostic information
        if: always()
        run: |
          kubectl get pods -o wide -A | tee pods-list.txt
          kubectl describe pods -A | tee pods-describe.txt
          mage logutils:collectArgoDiags | tee argo-diag.txt
          kubectl get applications -o yaml -A | tee argocd-applications.yaml

      - name: Upload diagnostic artifacts
        if: always()
        uses: actions/upload-artifact@v4.4.3
        with:
          name: pods-apps-logs
          path: |
            argo-diag.txt
            pods-describe.txt
            pods-list.txt
            argocd-applications.yaml    
