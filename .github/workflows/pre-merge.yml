---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Pre-Merge CI Pipeline

on:
  pull_request:
    branches:
      - main
      - release-*
  workflow_dispatch:

permissions: {}

jobs:
  pre-checks:
    runs-on: ${{ github.repository_owner == 'intel' && 'intel-ubuntu-latest' || 'ubuntu-latest' }}
    permissions:
      contents: read
      pull-requests: write
    outputs:
      filtered_projects: ${{ steps.filter-changes.outputs.filtered_projects }}
      other_changed_projects: ${{ steps.filter-changes.outputs.other_changed_projects }}
      artifact_path: ${{ steps.arti-path.outputs.artifact_path }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: true
          fetch-depth: 0
      - name: "Verify Branch Name"
        uses: open-edge-platform/orch-ci/verify-branch-name@4c94cdd01e58beab5f822f1eeb0439a523018a55 # v0.1.5
      - name: "Discover Changed Subfolders"
        id: discover-changes
        uses: open-edge-platform/orch-ci/discover-changed-subfolders@070a95caeeed643fc9d1a34c11eac78179ce136d # v0.1.34
      - name: "Filter Out Unwanted Changed Subfolders"
        id: filter-changes
        env:
          changed_projects: ${{ steps.discover-changes.outputs.changed_projects }}
        run: |
          folders_to_remove='[".github",".reuse","LICENSES",".git","tools",""]'
          filtered_projects=$(echo "$changed_projects" | jq -cr --argjson folders_to_remove "$folders_to_remove" 'map(select(. as $item | $folders_to_remove | index($item) | not))')
          other_changed_projects=$(echo "$changed_projects" | jq -cr --argjson filtered_projects "$filtered_projects" 'map(select(. as $item | $filtered_projects | index($item) | not))')
          echo "filtered_projects=$filtered_projects" >> $GITHUB_OUTPUT
          echo "other_changed_projects=$other_changed_projects" >> $GITHUB_OUTPUT
          echo "filtered_projects=$filtered_projects" >> $GITHUB_ENV
      - name: "Artifact Folder or Files"
        id: arti-path
        run: |
          if [ "$filtered_projects" == '["vm-provisioning"]' ]; then
            echo "artifact_path<<EOF" >> $GITHUB_OUTPUT
            echo "vm-provisioning/out/" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "artifact_path=empty" >> $GITHUB_OUTPUT
          fi
  pre-merge-pipeline:
    needs: pre-checks
    uses: open-edge-platform/orch-ci/.github/workflows/pre-merge.yml@070a95caeeed643fc9d1a34c11eac78179ce136d # v0.1.34
    permissions:
      contents: read
      pull-requests: write
    with:
      bootstrap_tools: "go,gotools,golang-lint,nodejs,buf,hadolint,opa"
      run_security_scans: true
      run_version_check: true
      run_dep_version_check: false
      run_build: true
      run_lint: true
      run_test: true
      run_validate_clean_folder: false
      run_docker_build: false
      run_artifact: false
      artifacts_path: ${{ needs.pre-checks.outputs.artifact_path }}
      trivy_config_path: 'trivy.yaml'
    secrets:
      NO_AUTH_ECR_PUSH_USERNAME: ${{ secrets.NO_AUTH_ECR_PUSH_USERNAME }}
      NO_AUTH_ECR_PUSH_PASSWD: ${{ secrets.NO_AUTH_ECR_PUSH_PASSWD }}
  final-check:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [pre-merge-pipeline]
    env:
      RESULT: ${{ needs.pre-merge-pipeline.result }}
    steps:
      - name: Final Status Check
        run: |
          pre_merge_pipeline_result="${RESULT}"
          echo "Pre-merge pipeline result: $pre_merge_pipeline_result"

          if [ "$pre_merge_pipeline_result" == "success" ] || [ "$pre_merge_pipeline_result" == "skipped" ]; then
            echo "Pre-merge check passed successfully."
          else
            echo "Pre-merge checks failed. PR can't get merged"
            exit 1
          fi
