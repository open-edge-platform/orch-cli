// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rest/infra/client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/rest/infra/client.go -destination=pkg/rest/infra/mock_client.go -package=infra
//

// Package infra is a generated GoMock package.
package infra

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CustomConfigServiceCreateCustomConfig mocks base method.
func (m *MockClientInterface) CustomConfigServiceCreateCustomConfig(ctx context.Context, projectName string, body CustomConfigServiceCreateCustomConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomConfigServiceCreateCustomConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomConfigServiceCreateCustomConfig indicates an expected call of CustomConfigServiceCreateCustomConfig.
func (mr *MockClientInterfaceMockRecorder) CustomConfigServiceCreateCustomConfig(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomConfigServiceCreateCustomConfig", reflect.TypeOf((*MockClientInterface)(nil).CustomConfigServiceCreateCustomConfig), varargs...)
}

// CustomConfigServiceCreateCustomConfigWithBody mocks base method.
func (m *MockClientInterface) CustomConfigServiceCreateCustomConfigWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomConfigServiceCreateCustomConfigWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomConfigServiceCreateCustomConfigWithBody indicates an expected call of CustomConfigServiceCreateCustomConfigWithBody.
func (mr *MockClientInterfaceMockRecorder) CustomConfigServiceCreateCustomConfigWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomConfigServiceCreateCustomConfigWithBody", reflect.TypeOf((*MockClientInterface)(nil).CustomConfigServiceCreateCustomConfigWithBody), varargs...)
}

// CustomConfigServiceDeleteCustomConfig mocks base method.
func (m *MockClientInterface) CustomConfigServiceDeleteCustomConfig(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomConfigServiceDeleteCustomConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomConfigServiceDeleteCustomConfig indicates an expected call of CustomConfigServiceDeleteCustomConfig.
func (mr *MockClientInterfaceMockRecorder) CustomConfigServiceDeleteCustomConfig(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomConfigServiceDeleteCustomConfig", reflect.TypeOf((*MockClientInterface)(nil).CustomConfigServiceDeleteCustomConfig), varargs...)
}

// CustomConfigServiceGetCustomConfig mocks base method.
func (m *MockClientInterface) CustomConfigServiceGetCustomConfig(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomConfigServiceGetCustomConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomConfigServiceGetCustomConfig indicates an expected call of CustomConfigServiceGetCustomConfig.
func (mr *MockClientInterfaceMockRecorder) CustomConfigServiceGetCustomConfig(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomConfigServiceGetCustomConfig", reflect.TypeOf((*MockClientInterface)(nil).CustomConfigServiceGetCustomConfig), varargs...)
}

// CustomConfigServiceListCustomConfigs mocks base method.
func (m *MockClientInterface) CustomConfigServiceListCustomConfigs(ctx context.Context, projectName string, params *CustomConfigServiceListCustomConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomConfigServiceListCustomConfigs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomConfigServiceListCustomConfigs indicates an expected call of CustomConfigServiceListCustomConfigs.
func (mr *MockClientInterfaceMockRecorder) CustomConfigServiceListCustomConfigs(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomConfigServiceListCustomConfigs", reflect.TypeOf((*MockClientInterface)(nil).CustomConfigServiceListCustomConfigs), varargs...)
}

// HostServiceCreateHost mocks base method.
func (m *MockClientInterface) HostServiceCreateHost(ctx context.Context, projectName string, body HostServiceCreateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceCreateHost", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceCreateHost indicates an expected call of HostServiceCreateHost.
func (mr *MockClientInterfaceMockRecorder) HostServiceCreateHost(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceCreateHost", reflect.TypeOf((*MockClientInterface)(nil).HostServiceCreateHost), varargs...)
}

// HostServiceCreateHostWithBody mocks base method.
func (m *MockClientInterface) HostServiceCreateHostWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceCreateHostWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceCreateHostWithBody indicates an expected call of HostServiceCreateHostWithBody.
func (mr *MockClientInterfaceMockRecorder) HostServiceCreateHostWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceCreateHostWithBody", reflect.TypeOf((*MockClientInterface)(nil).HostServiceCreateHostWithBody), varargs...)
}

// HostServiceDeleteHost mocks base method.
func (m *MockClientInterface) HostServiceDeleteHost(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceDeleteHost", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceDeleteHost indicates an expected call of HostServiceDeleteHost.
func (mr *MockClientInterfaceMockRecorder) HostServiceDeleteHost(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceDeleteHost", reflect.TypeOf((*MockClientInterface)(nil).HostServiceDeleteHost), varargs...)
}

// HostServiceGetHost mocks base method.
func (m *MockClientInterface) HostServiceGetHost(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceGetHost", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceGetHost indicates an expected call of HostServiceGetHost.
func (mr *MockClientInterfaceMockRecorder) HostServiceGetHost(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceGetHost", reflect.TypeOf((*MockClientInterface)(nil).HostServiceGetHost), varargs...)
}

// HostServiceGetHostsSummary mocks base method.
func (m *MockClientInterface) HostServiceGetHostsSummary(ctx context.Context, projectName string, params *HostServiceGetHostsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceGetHostsSummary", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceGetHostsSummary indicates an expected call of HostServiceGetHostsSummary.
func (mr *MockClientInterfaceMockRecorder) HostServiceGetHostsSummary(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceGetHostsSummary", reflect.TypeOf((*MockClientInterface)(nil).HostServiceGetHostsSummary), varargs...)
}

// HostServiceInvalidateHost mocks base method.
func (m *MockClientInterface) HostServiceInvalidateHost(ctx context.Context, projectName, resourceId string, params *HostServiceInvalidateHostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceInvalidateHost", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceInvalidateHost indicates an expected call of HostServiceInvalidateHost.
func (mr *MockClientInterfaceMockRecorder) HostServiceInvalidateHost(ctx, projectName, resourceId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceInvalidateHost", reflect.TypeOf((*MockClientInterface)(nil).HostServiceInvalidateHost), varargs...)
}

// HostServiceListHosts mocks base method.
func (m *MockClientInterface) HostServiceListHosts(ctx context.Context, projectName string, params *HostServiceListHostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceListHosts", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceListHosts indicates an expected call of HostServiceListHosts.
func (mr *MockClientInterfaceMockRecorder) HostServiceListHosts(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceListHosts", reflect.TypeOf((*MockClientInterface)(nil).HostServiceListHosts), varargs...)
}

// HostServiceOnboardHost mocks base method.
func (m *MockClientInterface) HostServiceOnboardHost(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceOnboardHost", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceOnboardHost indicates an expected call of HostServiceOnboardHost.
func (mr *MockClientInterfaceMockRecorder) HostServiceOnboardHost(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceOnboardHost", reflect.TypeOf((*MockClientInterface)(nil).HostServiceOnboardHost), varargs...)
}

// HostServicePatchHost mocks base method.
func (m *MockClientInterface) HostServicePatchHost(ctx context.Context, projectName, resourceId string, body HostServicePatchHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServicePatchHost", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServicePatchHost indicates an expected call of HostServicePatchHost.
func (mr *MockClientInterfaceMockRecorder) HostServicePatchHost(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServicePatchHost", reflect.TypeOf((*MockClientInterface)(nil).HostServicePatchHost), varargs...)
}

// HostServicePatchHostWithBody mocks base method.
func (m *MockClientInterface) HostServicePatchHostWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServicePatchHostWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServicePatchHostWithBody indicates an expected call of HostServicePatchHostWithBody.
func (mr *MockClientInterfaceMockRecorder) HostServicePatchHostWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServicePatchHostWithBody", reflect.TypeOf((*MockClientInterface)(nil).HostServicePatchHostWithBody), varargs...)
}

// HostServicePatchRegisterHost mocks base method.
func (m *MockClientInterface) HostServicePatchRegisterHost(ctx context.Context, projectName, resourceId string, body HostServicePatchRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServicePatchRegisterHost", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServicePatchRegisterHost indicates an expected call of HostServicePatchRegisterHost.
func (mr *MockClientInterfaceMockRecorder) HostServicePatchRegisterHost(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServicePatchRegisterHost", reflect.TypeOf((*MockClientInterface)(nil).HostServicePatchRegisterHost), varargs...)
}

// HostServicePatchRegisterHostWithBody mocks base method.
func (m *MockClientInterface) HostServicePatchRegisterHostWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServicePatchRegisterHostWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServicePatchRegisterHostWithBody indicates an expected call of HostServicePatchRegisterHostWithBody.
func (mr *MockClientInterfaceMockRecorder) HostServicePatchRegisterHostWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServicePatchRegisterHostWithBody", reflect.TypeOf((*MockClientInterface)(nil).HostServicePatchRegisterHostWithBody), varargs...)
}

// HostServiceRegisterHost mocks base method.
func (m *MockClientInterface) HostServiceRegisterHost(ctx context.Context, projectName string, body HostServiceRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceRegisterHost", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceRegisterHost indicates an expected call of HostServiceRegisterHost.
func (mr *MockClientInterfaceMockRecorder) HostServiceRegisterHost(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceRegisterHost", reflect.TypeOf((*MockClientInterface)(nil).HostServiceRegisterHost), varargs...)
}

// HostServiceRegisterHostWithBody mocks base method.
func (m *MockClientInterface) HostServiceRegisterHostWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceRegisterHostWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceRegisterHostWithBody indicates an expected call of HostServiceRegisterHostWithBody.
func (mr *MockClientInterfaceMockRecorder) HostServiceRegisterHostWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceRegisterHostWithBody", reflect.TypeOf((*MockClientInterface)(nil).HostServiceRegisterHostWithBody), varargs...)
}

// HostServiceUpdateHost mocks base method.
func (m *MockClientInterface) HostServiceUpdateHost(ctx context.Context, projectName, resourceId string, body HostServiceUpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceUpdateHost", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceUpdateHost indicates an expected call of HostServiceUpdateHost.
func (mr *MockClientInterfaceMockRecorder) HostServiceUpdateHost(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceUpdateHost", reflect.TypeOf((*MockClientInterface)(nil).HostServiceUpdateHost), varargs...)
}

// HostServiceUpdateHostWithBody mocks base method.
func (m *MockClientInterface) HostServiceUpdateHostWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceUpdateHostWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceUpdateHostWithBody indicates an expected call of HostServiceUpdateHostWithBody.
func (mr *MockClientInterfaceMockRecorder) HostServiceUpdateHostWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceUpdateHostWithBody", reflect.TypeOf((*MockClientInterface)(nil).HostServiceUpdateHostWithBody), varargs...)
}

// InstanceServiceCreateInstance mocks base method.
func (m *MockClientInterface) InstanceServiceCreateInstance(ctx context.Context, projectName string, body InstanceServiceCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceCreateInstance", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceCreateInstance indicates an expected call of InstanceServiceCreateInstance.
func (mr *MockClientInterfaceMockRecorder) InstanceServiceCreateInstance(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceCreateInstance", reflect.TypeOf((*MockClientInterface)(nil).InstanceServiceCreateInstance), varargs...)
}

// InstanceServiceCreateInstanceWithBody mocks base method.
func (m *MockClientInterface) InstanceServiceCreateInstanceWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceCreateInstanceWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceCreateInstanceWithBody indicates an expected call of InstanceServiceCreateInstanceWithBody.
func (mr *MockClientInterfaceMockRecorder) InstanceServiceCreateInstanceWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceCreateInstanceWithBody", reflect.TypeOf((*MockClientInterface)(nil).InstanceServiceCreateInstanceWithBody), varargs...)
}

// InstanceServiceDeleteInstance mocks base method.
func (m *MockClientInterface) InstanceServiceDeleteInstance(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceDeleteInstance", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceDeleteInstance indicates an expected call of InstanceServiceDeleteInstance.
func (mr *MockClientInterfaceMockRecorder) InstanceServiceDeleteInstance(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceDeleteInstance", reflect.TypeOf((*MockClientInterface)(nil).InstanceServiceDeleteInstance), varargs...)
}

// InstanceServiceGetInstance mocks base method.
func (m *MockClientInterface) InstanceServiceGetInstance(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceGetInstance", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceGetInstance indicates an expected call of InstanceServiceGetInstance.
func (mr *MockClientInterfaceMockRecorder) InstanceServiceGetInstance(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceGetInstance", reflect.TypeOf((*MockClientInterface)(nil).InstanceServiceGetInstance), varargs...)
}

// InstanceServiceInvalidateInstance mocks base method.
func (m *MockClientInterface) InstanceServiceInvalidateInstance(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceInvalidateInstance", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceInvalidateInstance indicates an expected call of InstanceServiceInvalidateInstance.
func (mr *MockClientInterfaceMockRecorder) InstanceServiceInvalidateInstance(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceInvalidateInstance", reflect.TypeOf((*MockClientInterface)(nil).InstanceServiceInvalidateInstance), varargs...)
}

// InstanceServiceListInstances mocks base method.
func (m *MockClientInterface) InstanceServiceListInstances(ctx context.Context, projectName string, params *InstanceServiceListInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceListInstances", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceListInstances indicates an expected call of InstanceServiceListInstances.
func (mr *MockClientInterfaceMockRecorder) InstanceServiceListInstances(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceListInstances", reflect.TypeOf((*MockClientInterface)(nil).InstanceServiceListInstances), varargs...)
}

// InstanceServicePatchInstance mocks base method.
func (m *MockClientInterface) InstanceServicePatchInstance(ctx context.Context, projectName, resourceId string, body InstanceServicePatchInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServicePatchInstance", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServicePatchInstance indicates an expected call of InstanceServicePatchInstance.
func (mr *MockClientInterfaceMockRecorder) InstanceServicePatchInstance(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServicePatchInstance", reflect.TypeOf((*MockClientInterface)(nil).InstanceServicePatchInstance), varargs...)
}

// InstanceServicePatchInstanceWithBody mocks base method.
func (m *MockClientInterface) InstanceServicePatchInstanceWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServicePatchInstanceWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServicePatchInstanceWithBody indicates an expected call of InstanceServicePatchInstanceWithBody.
func (mr *MockClientInterfaceMockRecorder) InstanceServicePatchInstanceWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServicePatchInstanceWithBody", reflect.TypeOf((*MockClientInterface)(nil).InstanceServicePatchInstanceWithBody), varargs...)
}

// InstanceServiceUpdateInstance mocks base method.
func (m *MockClientInterface) InstanceServiceUpdateInstance(ctx context.Context, projectName, resourceId string, body InstanceServiceUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceUpdateInstance", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceUpdateInstance indicates an expected call of InstanceServiceUpdateInstance.
func (mr *MockClientInterfaceMockRecorder) InstanceServiceUpdateInstance(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceUpdateInstance", reflect.TypeOf((*MockClientInterface)(nil).InstanceServiceUpdateInstance), varargs...)
}

// InstanceServiceUpdateInstanceWithBody mocks base method.
func (m *MockClientInterface) InstanceServiceUpdateInstanceWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceUpdateInstanceWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceUpdateInstanceWithBody indicates an expected call of InstanceServiceUpdateInstanceWithBody.
func (mr *MockClientInterfaceMockRecorder) InstanceServiceUpdateInstanceWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceUpdateInstanceWithBody", reflect.TypeOf((*MockClientInterface)(nil).InstanceServiceUpdateInstanceWithBody), varargs...)
}

// LocalAccountServiceCreateLocalAccount mocks base method.
func (m *MockClientInterface) LocalAccountServiceCreateLocalAccount(ctx context.Context, projectName string, body LocalAccountServiceCreateLocalAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalAccountServiceCreateLocalAccount", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalAccountServiceCreateLocalAccount indicates an expected call of LocalAccountServiceCreateLocalAccount.
func (mr *MockClientInterfaceMockRecorder) LocalAccountServiceCreateLocalAccount(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAccountServiceCreateLocalAccount", reflect.TypeOf((*MockClientInterface)(nil).LocalAccountServiceCreateLocalAccount), varargs...)
}

// LocalAccountServiceCreateLocalAccountWithBody mocks base method.
func (m *MockClientInterface) LocalAccountServiceCreateLocalAccountWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalAccountServiceCreateLocalAccountWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalAccountServiceCreateLocalAccountWithBody indicates an expected call of LocalAccountServiceCreateLocalAccountWithBody.
func (mr *MockClientInterfaceMockRecorder) LocalAccountServiceCreateLocalAccountWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAccountServiceCreateLocalAccountWithBody", reflect.TypeOf((*MockClientInterface)(nil).LocalAccountServiceCreateLocalAccountWithBody), varargs...)
}

// LocalAccountServiceDeleteLocalAccount mocks base method.
func (m *MockClientInterface) LocalAccountServiceDeleteLocalAccount(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalAccountServiceDeleteLocalAccount", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalAccountServiceDeleteLocalAccount indicates an expected call of LocalAccountServiceDeleteLocalAccount.
func (mr *MockClientInterfaceMockRecorder) LocalAccountServiceDeleteLocalAccount(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAccountServiceDeleteLocalAccount", reflect.TypeOf((*MockClientInterface)(nil).LocalAccountServiceDeleteLocalAccount), varargs...)
}

// LocalAccountServiceGetLocalAccount mocks base method.
func (m *MockClientInterface) LocalAccountServiceGetLocalAccount(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalAccountServiceGetLocalAccount", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalAccountServiceGetLocalAccount indicates an expected call of LocalAccountServiceGetLocalAccount.
func (mr *MockClientInterfaceMockRecorder) LocalAccountServiceGetLocalAccount(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAccountServiceGetLocalAccount", reflect.TypeOf((*MockClientInterface)(nil).LocalAccountServiceGetLocalAccount), varargs...)
}

// LocalAccountServiceListLocalAccounts mocks base method.
func (m *MockClientInterface) LocalAccountServiceListLocalAccounts(ctx context.Context, projectName string, params *LocalAccountServiceListLocalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalAccountServiceListLocalAccounts", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalAccountServiceListLocalAccounts indicates an expected call of LocalAccountServiceListLocalAccounts.
func (mr *MockClientInterfaceMockRecorder) LocalAccountServiceListLocalAccounts(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAccountServiceListLocalAccounts", reflect.TypeOf((*MockClientInterface)(nil).LocalAccountServiceListLocalAccounts), varargs...)
}

// LocationServiceListLocations mocks base method.
func (m *MockClientInterface) LocationServiceListLocations(ctx context.Context, projectName string, params *LocationServiceListLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocationServiceListLocations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationServiceListLocations indicates an expected call of LocationServiceListLocations.
func (mr *MockClientInterfaceMockRecorder) LocationServiceListLocations(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationServiceListLocations", reflect.TypeOf((*MockClientInterface)(nil).LocationServiceListLocations), varargs...)
}

// OSUpdatePolicyCreateOSUpdatePolicy mocks base method.
func (m *MockClientInterface) OSUpdatePolicyCreateOSUpdatePolicy(ctx context.Context, projectName string, body OSUpdatePolicyCreateOSUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdatePolicyCreateOSUpdatePolicy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdatePolicyCreateOSUpdatePolicy indicates an expected call of OSUpdatePolicyCreateOSUpdatePolicy.
func (mr *MockClientInterfaceMockRecorder) OSUpdatePolicyCreateOSUpdatePolicy(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdatePolicyCreateOSUpdatePolicy", reflect.TypeOf((*MockClientInterface)(nil).OSUpdatePolicyCreateOSUpdatePolicy), varargs...)
}

// OSUpdatePolicyCreateOSUpdatePolicyWithBody mocks base method.
func (m *MockClientInterface) OSUpdatePolicyCreateOSUpdatePolicyWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdatePolicyCreateOSUpdatePolicyWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdatePolicyCreateOSUpdatePolicyWithBody indicates an expected call of OSUpdatePolicyCreateOSUpdatePolicyWithBody.
func (mr *MockClientInterfaceMockRecorder) OSUpdatePolicyCreateOSUpdatePolicyWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdatePolicyCreateOSUpdatePolicyWithBody", reflect.TypeOf((*MockClientInterface)(nil).OSUpdatePolicyCreateOSUpdatePolicyWithBody), varargs...)
}

// OSUpdatePolicyDeleteOSUpdatePolicy mocks base method.
func (m *MockClientInterface) OSUpdatePolicyDeleteOSUpdatePolicy(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdatePolicyDeleteOSUpdatePolicy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdatePolicyDeleteOSUpdatePolicy indicates an expected call of OSUpdatePolicyDeleteOSUpdatePolicy.
func (mr *MockClientInterfaceMockRecorder) OSUpdatePolicyDeleteOSUpdatePolicy(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdatePolicyDeleteOSUpdatePolicy", reflect.TypeOf((*MockClientInterface)(nil).OSUpdatePolicyDeleteOSUpdatePolicy), varargs...)
}

// OSUpdatePolicyGetOSUpdatePolicy mocks base method.
func (m *MockClientInterface) OSUpdatePolicyGetOSUpdatePolicy(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdatePolicyGetOSUpdatePolicy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdatePolicyGetOSUpdatePolicy indicates an expected call of OSUpdatePolicyGetOSUpdatePolicy.
func (mr *MockClientInterfaceMockRecorder) OSUpdatePolicyGetOSUpdatePolicy(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdatePolicyGetOSUpdatePolicy", reflect.TypeOf((*MockClientInterface)(nil).OSUpdatePolicyGetOSUpdatePolicy), varargs...)
}

// OSUpdatePolicyListOSUpdatePolicy mocks base method.
func (m *MockClientInterface) OSUpdatePolicyListOSUpdatePolicy(ctx context.Context, projectName string, params *OSUpdatePolicyListOSUpdatePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdatePolicyListOSUpdatePolicy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdatePolicyListOSUpdatePolicy indicates an expected call of OSUpdatePolicyListOSUpdatePolicy.
func (mr *MockClientInterfaceMockRecorder) OSUpdatePolicyListOSUpdatePolicy(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdatePolicyListOSUpdatePolicy", reflect.TypeOf((*MockClientInterface)(nil).OSUpdatePolicyListOSUpdatePolicy), varargs...)
}

// OSUpdateRunDeleteOSUpdateRun mocks base method.
func (m *MockClientInterface) OSUpdateRunDeleteOSUpdateRun(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdateRunDeleteOSUpdateRun", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdateRunDeleteOSUpdateRun indicates an expected call of OSUpdateRunDeleteOSUpdateRun.
func (mr *MockClientInterfaceMockRecorder) OSUpdateRunDeleteOSUpdateRun(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdateRunDeleteOSUpdateRun", reflect.TypeOf((*MockClientInterface)(nil).OSUpdateRunDeleteOSUpdateRun), varargs...)
}

// OSUpdateRunGetOSUpdateRun mocks base method.
func (m *MockClientInterface) OSUpdateRunGetOSUpdateRun(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdateRunGetOSUpdateRun", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdateRunGetOSUpdateRun indicates an expected call of OSUpdateRunGetOSUpdateRun.
func (mr *MockClientInterfaceMockRecorder) OSUpdateRunGetOSUpdateRun(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdateRunGetOSUpdateRun", reflect.TypeOf((*MockClientInterface)(nil).OSUpdateRunGetOSUpdateRun), varargs...)
}

// OSUpdateRunListOSUpdateRun mocks base method.
func (m *MockClientInterface) OSUpdateRunListOSUpdateRun(ctx context.Context, projectName string, params *OSUpdateRunListOSUpdateRunParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdateRunListOSUpdateRun", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdateRunListOSUpdateRun indicates an expected call of OSUpdateRunListOSUpdateRun.
func (mr *MockClientInterfaceMockRecorder) OSUpdateRunListOSUpdateRun(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdateRunListOSUpdateRun", reflect.TypeOf((*MockClientInterface)(nil).OSUpdateRunListOSUpdateRun), varargs...)
}

// OperatingSystemServiceCreateOperatingSystem mocks base method.
func (m *MockClientInterface) OperatingSystemServiceCreateOperatingSystem(ctx context.Context, projectName string, body OperatingSystemServiceCreateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceCreateOperatingSystem", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceCreateOperatingSystem indicates an expected call of OperatingSystemServiceCreateOperatingSystem.
func (mr *MockClientInterfaceMockRecorder) OperatingSystemServiceCreateOperatingSystem(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceCreateOperatingSystem", reflect.TypeOf((*MockClientInterface)(nil).OperatingSystemServiceCreateOperatingSystem), varargs...)
}

// OperatingSystemServiceCreateOperatingSystemWithBody mocks base method.
func (m *MockClientInterface) OperatingSystemServiceCreateOperatingSystemWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceCreateOperatingSystemWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceCreateOperatingSystemWithBody indicates an expected call of OperatingSystemServiceCreateOperatingSystemWithBody.
func (mr *MockClientInterfaceMockRecorder) OperatingSystemServiceCreateOperatingSystemWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceCreateOperatingSystemWithBody", reflect.TypeOf((*MockClientInterface)(nil).OperatingSystemServiceCreateOperatingSystemWithBody), varargs...)
}

// OperatingSystemServiceDeleteOperatingSystem mocks base method.
func (m *MockClientInterface) OperatingSystemServiceDeleteOperatingSystem(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceDeleteOperatingSystem", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceDeleteOperatingSystem indicates an expected call of OperatingSystemServiceDeleteOperatingSystem.
func (mr *MockClientInterfaceMockRecorder) OperatingSystemServiceDeleteOperatingSystem(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceDeleteOperatingSystem", reflect.TypeOf((*MockClientInterface)(nil).OperatingSystemServiceDeleteOperatingSystem), varargs...)
}

// OperatingSystemServiceGetOperatingSystem mocks base method.
func (m *MockClientInterface) OperatingSystemServiceGetOperatingSystem(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceGetOperatingSystem", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceGetOperatingSystem indicates an expected call of OperatingSystemServiceGetOperatingSystem.
func (mr *MockClientInterfaceMockRecorder) OperatingSystemServiceGetOperatingSystem(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceGetOperatingSystem", reflect.TypeOf((*MockClientInterface)(nil).OperatingSystemServiceGetOperatingSystem), varargs...)
}

// OperatingSystemServiceListOperatingSystems mocks base method.
func (m *MockClientInterface) OperatingSystemServiceListOperatingSystems(ctx context.Context, projectName string, params *OperatingSystemServiceListOperatingSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceListOperatingSystems", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceListOperatingSystems indicates an expected call of OperatingSystemServiceListOperatingSystems.
func (mr *MockClientInterfaceMockRecorder) OperatingSystemServiceListOperatingSystems(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceListOperatingSystems", reflect.TypeOf((*MockClientInterface)(nil).OperatingSystemServiceListOperatingSystems), varargs...)
}

// OperatingSystemServicePatchOperatingSystem mocks base method.
func (m *MockClientInterface) OperatingSystemServicePatchOperatingSystem(ctx context.Context, projectName, resourceId string, body OperatingSystemServicePatchOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServicePatchOperatingSystem", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServicePatchOperatingSystem indicates an expected call of OperatingSystemServicePatchOperatingSystem.
func (mr *MockClientInterfaceMockRecorder) OperatingSystemServicePatchOperatingSystem(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServicePatchOperatingSystem", reflect.TypeOf((*MockClientInterface)(nil).OperatingSystemServicePatchOperatingSystem), varargs...)
}

// OperatingSystemServicePatchOperatingSystemWithBody mocks base method.
func (m *MockClientInterface) OperatingSystemServicePatchOperatingSystemWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServicePatchOperatingSystemWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServicePatchOperatingSystemWithBody indicates an expected call of OperatingSystemServicePatchOperatingSystemWithBody.
func (mr *MockClientInterfaceMockRecorder) OperatingSystemServicePatchOperatingSystemWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServicePatchOperatingSystemWithBody", reflect.TypeOf((*MockClientInterface)(nil).OperatingSystemServicePatchOperatingSystemWithBody), varargs...)
}

// OperatingSystemServiceUpdateOperatingSystem mocks base method.
func (m *MockClientInterface) OperatingSystemServiceUpdateOperatingSystem(ctx context.Context, projectName, resourceId string, body OperatingSystemServiceUpdateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceUpdateOperatingSystem", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceUpdateOperatingSystem indicates an expected call of OperatingSystemServiceUpdateOperatingSystem.
func (mr *MockClientInterfaceMockRecorder) OperatingSystemServiceUpdateOperatingSystem(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceUpdateOperatingSystem", reflect.TypeOf((*MockClientInterface)(nil).OperatingSystemServiceUpdateOperatingSystem), varargs...)
}

// OperatingSystemServiceUpdateOperatingSystemWithBody mocks base method.
func (m *MockClientInterface) OperatingSystemServiceUpdateOperatingSystemWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceUpdateOperatingSystemWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceUpdateOperatingSystemWithBody indicates an expected call of OperatingSystemServiceUpdateOperatingSystemWithBody.
func (mr *MockClientInterfaceMockRecorder) OperatingSystemServiceUpdateOperatingSystemWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceUpdateOperatingSystemWithBody", reflect.TypeOf((*MockClientInterface)(nil).OperatingSystemServiceUpdateOperatingSystemWithBody), varargs...)
}

// ProviderServiceCreateProvider mocks base method.
func (m *MockClientInterface) ProviderServiceCreateProvider(ctx context.Context, projectName string, body ProviderServiceCreateProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProviderServiceCreateProvider", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderServiceCreateProvider indicates an expected call of ProviderServiceCreateProvider.
func (mr *MockClientInterfaceMockRecorder) ProviderServiceCreateProvider(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderServiceCreateProvider", reflect.TypeOf((*MockClientInterface)(nil).ProviderServiceCreateProvider), varargs...)
}

// ProviderServiceCreateProviderWithBody mocks base method.
func (m *MockClientInterface) ProviderServiceCreateProviderWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProviderServiceCreateProviderWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderServiceCreateProviderWithBody indicates an expected call of ProviderServiceCreateProviderWithBody.
func (mr *MockClientInterfaceMockRecorder) ProviderServiceCreateProviderWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderServiceCreateProviderWithBody", reflect.TypeOf((*MockClientInterface)(nil).ProviderServiceCreateProviderWithBody), varargs...)
}

// ProviderServiceDeleteProvider mocks base method.
func (m *MockClientInterface) ProviderServiceDeleteProvider(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProviderServiceDeleteProvider", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderServiceDeleteProvider indicates an expected call of ProviderServiceDeleteProvider.
func (mr *MockClientInterfaceMockRecorder) ProviderServiceDeleteProvider(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderServiceDeleteProvider", reflect.TypeOf((*MockClientInterface)(nil).ProviderServiceDeleteProvider), varargs...)
}

// ProviderServiceGetProvider mocks base method.
func (m *MockClientInterface) ProviderServiceGetProvider(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProviderServiceGetProvider", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderServiceGetProvider indicates an expected call of ProviderServiceGetProvider.
func (mr *MockClientInterfaceMockRecorder) ProviderServiceGetProvider(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderServiceGetProvider", reflect.TypeOf((*MockClientInterface)(nil).ProviderServiceGetProvider), varargs...)
}

// ProviderServiceListProviders mocks base method.
func (m *MockClientInterface) ProviderServiceListProviders(ctx context.Context, projectName string, params *ProviderServiceListProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProviderServiceListProviders", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderServiceListProviders indicates an expected call of ProviderServiceListProviders.
func (mr *MockClientInterfaceMockRecorder) ProviderServiceListProviders(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderServiceListProviders", reflect.TypeOf((*MockClientInterface)(nil).ProviderServiceListProviders), varargs...)
}

// RegionServiceCreateRegion mocks base method.
func (m *MockClientInterface) RegionServiceCreateRegion(ctx context.Context, projectName string, body RegionServiceCreateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceCreateRegion", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceCreateRegion indicates an expected call of RegionServiceCreateRegion.
func (mr *MockClientInterfaceMockRecorder) RegionServiceCreateRegion(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceCreateRegion", reflect.TypeOf((*MockClientInterface)(nil).RegionServiceCreateRegion), varargs...)
}

// RegionServiceCreateRegionWithBody mocks base method.
func (m *MockClientInterface) RegionServiceCreateRegionWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceCreateRegionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceCreateRegionWithBody indicates an expected call of RegionServiceCreateRegionWithBody.
func (mr *MockClientInterfaceMockRecorder) RegionServiceCreateRegionWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceCreateRegionWithBody", reflect.TypeOf((*MockClientInterface)(nil).RegionServiceCreateRegionWithBody), varargs...)
}

// RegionServiceDeleteRegion mocks base method.
func (m *MockClientInterface) RegionServiceDeleteRegion(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceDeleteRegion", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceDeleteRegion indicates an expected call of RegionServiceDeleteRegion.
func (mr *MockClientInterfaceMockRecorder) RegionServiceDeleteRegion(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceDeleteRegion", reflect.TypeOf((*MockClientInterface)(nil).RegionServiceDeleteRegion), varargs...)
}

// RegionServiceGetRegion mocks base method.
func (m *MockClientInterface) RegionServiceGetRegion(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceGetRegion", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceGetRegion indicates an expected call of RegionServiceGetRegion.
func (mr *MockClientInterfaceMockRecorder) RegionServiceGetRegion(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceGetRegion", reflect.TypeOf((*MockClientInterface)(nil).RegionServiceGetRegion), varargs...)
}

// RegionServiceListRegions mocks base method.
func (m *MockClientInterface) RegionServiceListRegions(ctx context.Context, projectName string, params *RegionServiceListRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceListRegions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceListRegions indicates an expected call of RegionServiceListRegions.
func (mr *MockClientInterfaceMockRecorder) RegionServiceListRegions(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceListRegions", reflect.TypeOf((*MockClientInterface)(nil).RegionServiceListRegions), varargs...)
}

// RegionServicePatchRegion mocks base method.
func (m *MockClientInterface) RegionServicePatchRegion(ctx context.Context, projectName, resourceId string, body RegionServicePatchRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServicePatchRegion", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServicePatchRegion indicates an expected call of RegionServicePatchRegion.
func (mr *MockClientInterfaceMockRecorder) RegionServicePatchRegion(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServicePatchRegion", reflect.TypeOf((*MockClientInterface)(nil).RegionServicePatchRegion), varargs...)
}

// RegionServicePatchRegionWithBody mocks base method.
func (m *MockClientInterface) RegionServicePatchRegionWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServicePatchRegionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServicePatchRegionWithBody indicates an expected call of RegionServicePatchRegionWithBody.
func (mr *MockClientInterfaceMockRecorder) RegionServicePatchRegionWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServicePatchRegionWithBody", reflect.TypeOf((*MockClientInterface)(nil).RegionServicePatchRegionWithBody), varargs...)
}

// RegionServiceUpdateRegion mocks base method.
func (m *MockClientInterface) RegionServiceUpdateRegion(ctx context.Context, projectName, resourceId string, body RegionServiceUpdateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceUpdateRegion", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceUpdateRegion indicates an expected call of RegionServiceUpdateRegion.
func (mr *MockClientInterfaceMockRecorder) RegionServiceUpdateRegion(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceUpdateRegion", reflect.TypeOf((*MockClientInterface)(nil).RegionServiceUpdateRegion), varargs...)
}

// RegionServiceUpdateRegionWithBody mocks base method.
func (m *MockClientInterface) RegionServiceUpdateRegionWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceUpdateRegionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceUpdateRegionWithBody indicates an expected call of RegionServiceUpdateRegionWithBody.
func (mr *MockClientInterfaceMockRecorder) RegionServiceUpdateRegionWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceUpdateRegionWithBody", reflect.TypeOf((*MockClientInterface)(nil).RegionServiceUpdateRegionWithBody), varargs...)
}

// ScheduleServiceCreateRepeatedSchedule mocks base method.
func (m *MockClientInterface) ScheduleServiceCreateRepeatedSchedule(ctx context.Context, projectName string, body ScheduleServiceCreateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceCreateRepeatedSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceCreateRepeatedSchedule indicates an expected call of ScheduleServiceCreateRepeatedSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceCreateRepeatedSchedule(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceCreateRepeatedSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceCreateRepeatedSchedule), varargs...)
}

// ScheduleServiceCreateRepeatedScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduleServiceCreateRepeatedScheduleWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceCreateRepeatedScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceCreateRepeatedScheduleWithBody indicates an expected call of ScheduleServiceCreateRepeatedScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceCreateRepeatedScheduleWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceCreateRepeatedScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceCreateRepeatedScheduleWithBody), varargs...)
}

// ScheduleServiceCreateSingleSchedule mocks base method.
func (m *MockClientInterface) ScheduleServiceCreateSingleSchedule(ctx context.Context, projectName string, body ScheduleServiceCreateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceCreateSingleSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceCreateSingleSchedule indicates an expected call of ScheduleServiceCreateSingleSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceCreateSingleSchedule(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceCreateSingleSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceCreateSingleSchedule), varargs...)
}

// ScheduleServiceCreateSingleScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduleServiceCreateSingleScheduleWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceCreateSingleScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceCreateSingleScheduleWithBody indicates an expected call of ScheduleServiceCreateSingleScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceCreateSingleScheduleWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceCreateSingleScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceCreateSingleScheduleWithBody), varargs...)
}

// ScheduleServiceDeleteRepeatedSchedule mocks base method.
func (m *MockClientInterface) ScheduleServiceDeleteRepeatedSchedule(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceDeleteRepeatedSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceDeleteRepeatedSchedule indicates an expected call of ScheduleServiceDeleteRepeatedSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceDeleteRepeatedSchedule(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceDeleteRepeatedSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceDeleteRepeatedSchedule), varargs...)
}

// ScheduleServiceDeleteSingleSchedule mocks base method.
func (m *MockClientInterface) ScheduleServiceDeleteSingleSchedule(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceDeleteSingleSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceDeleteSingleSchedule indicates an expected call of ScheduleServiceDeleteSingleSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceDeleteSingleSchedule(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceDeleteSingleSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceDeleteSingleSchedule), varargs...)
}

// ScheduleServiceGetRepeatedSchedule mocks base method.
func (m *MockClientInterface) ScheduleServiceGetRepeatedSchedule(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceGetRepeatedSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceGetRepeatedSchedule indicates an expected call of ScheduleServiceGetRepeatedSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceGetRepeatedSchedule(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceGetRepeatedSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceGetRepeatedSchedule), varargs...)
}

// ScheduleServiceGetSingleSchedule mocks base method.
func (m *MockClientInterface) ScheduleServiceGetSingleSchedule(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceGetSingleSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceGetSingleSchedule indicates an expected call of ScheduleServiceGetSingleSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceGetSingleSchedule(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceGetSingleSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceGetSingleSchedule), varargs...)
}

// ScheduleServiceListRepeatedSchedules mocks base method.
func (m *MockClientInterface) ScheduleServiceListRepeatedSchedules(ctx context.Context, projectName string, params *ScheduleServiceListRepeatedSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceListRepeatedSchedules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceListRepeatedSchedules indicates an expected call of ScheduleServiceListRepeatedSchedules.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceListRepeatedSchedules(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceListRepeatedSchedules", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceListRepeatedSchedules), varargs...)
}

// ScheduleServiceListSchedules mocks base method.
func (m *MockClientInterface) ScheduleServiceListSchedules(ctx context.Context, projectName string, params *ScheduleServiceListSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceListSchedules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceListSchedules indicates an expected call of ScheduleServiceListSchedules.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceListSchedules(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceListSchedules", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceListSchedules), varargs...)
}

// ScheduleServiceListSingleSchedules mocks base method.
func (m *MockClientInterface) ScheduleServiceListSingleSchedules(ctx context.Context, projectName string, params *ScheduleServiceListSingleSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceListSingleSchedules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceListSingleSchedules indicates an expected call of ScheduleServiceListSingleSchedules.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceListSingleSchedules(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceListSingleSchedules", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceListSingleSchedules), varargs...)
}

// ScheduleServicePatchRepeatedSchedule mocks base method.
func (m *MockClientInterface) ScheduleServicePatchRepeatedSchedule(ctx context.Context, projectName, resourceId string, body ScheduleServicePatchRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServicePatchRepeatedSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServicePatchRepeatedSchedule indicates an expected call of ScheduleServicePatchRepeatedSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduleServicePatchRepeatedSchedule(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServicePatchRepeatedSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServicePatchRepeatedSchedule), varargs...)
}

// ScheduleServicePatchRepeatedScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduleServicePatchRepeatedScheduleWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServicePatchRepeatedScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServicePatchRepeatedScheduleWithBody indicates an expected call of ScheduleServicePatchRepeatedScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduleServicePatchRepeatedScheduleWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServicePatchRepeatedScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServicePatchRepeatedScheduleWithBody), varargs...)
}

// ScheduleServicePatchSingleSchedule mocks base method.
func (m *MockClientInterface) ScheduleServicePatchSingleSchedule(ctx context.Context, projectName, resourceId string, body ScheduleServicePatchSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServicePatchSingleSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServicePatchSingleSchedule indicates an expected call of ScheduleServicePatchSingleSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduleServicePatchSingleSchedule(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServicePatchSingleSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServicePatchSingleSchedule), varargs...)
}

// ScheduleServicePatchSingleScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduleServicePatchSingleScheduleWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServicePatchSingleScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServicePatchSingleScheduleWithBody indicates an expected call of ScheduleServicePatchSingleScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduleServicePatchSingleScheduleWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServicePatchSingleScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServicePatchSingleScheduleWithBody), varargs...)
}

// ScheduleServiceUpdateRepeatedSchedule mocks base method.
func (m *MockClientInterface) ScheduleServiceUpdateRepeatedSchedule(ctx context.Context, projectName, resourceId string, body ScheduleServiceUpdateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceUpdateRepeatedSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceUpdateRepeatedSchedule indicates an expected call of ScheduleServiceUpdateRepeatedSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceUpdateRepeatedSchedule(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceUpdateRepeatedSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceUpdateRepeatedSchedule), varargs...)
}

// ScheduleServiceUpdateRepeatedScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduleServiceUpdateRepeatedScheduleWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceUpdateRepeatedScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceUpdateRepeatedScheduleWithBody indicates an expected call of ScheduleServiceUpdateRepeatedScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceUpdateRepeatedScheduleWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceUpdateRepeatedScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceUpdateRepeatedScheduleWithBody), varargs...)
}

// ScheduleServiceUpdateSingleSchedule mocks base method.
func (m *MockClientInterface) ScheduleServiceUpdateSingleSchedule(ctx context.Context, projectName, resourceId string, body ScheduleServiceUpdateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceUpdateSingleSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceUpdateSingleSchedule indicates an expected call of ScheduleServiceUpdateSingleSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceUpdateSingleSchedule(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceUpdateSingleSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceUpdateSingleSchedule), varargs...)
}

// ScheduleServiceUpdateSingleScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduleServiceUpdateSingleScheduleWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceUpdateSingleScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceUpdateSingleScheduleWithBody indicates an expected call of ScheduleServiceUpdateSingleScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduleServiceUpdateSingleScheduleWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceUpdateSingleScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduleServiceUpdateSingleScheduleWithBody), varargs...)
}

// SiteServiceCreateSite mocks base method.
func (m *MockClientInterface) SiteServiceCreateSite(ctx context.Context, projectName, resourceId string, body SiteServiceCreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceCreateSite", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceCreateSite indicates an expected call of SiteServiceCreateSite.
func (mr *MockClientInterfaceMockRecorder) SiteServiceCreateSite(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceCreateSite", reflect.TypeOf((*MockClientInterface)(nil).SiteServiceCreateSite), varargs...)
}

// SiteServiceCreateSiteWithBody mocks base method.
func (m *MockClientInterface) SiteServiceCreateSiteWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceCreateSiteWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceCreateSiteWithBody indicates an expected call of SiteServiceCreateSiteWithBody.
func (mr *MockClientInterfaceMockRecorder) SiteServiceCreateSiteWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceCreateSiteWithBody", reflect.TypeOf((*MockClientInterface)(nil).SiteServiceCreateSiteWithBody), varargs...)
}

// SiteServiceDeleteSite mocks base method.
func (m *MockClientInterface) SiteServiceDeleteSite(ctx context.Context, projectName, regionResourceId, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceDeleteSite", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceDeleteSite indicates an expected call of SiteServiceDeleteSite.
func (mr *MockClientInterfaceMockRecorder) SiteServiceDeleteSite(ctx, projectName, regionResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceDeleteSite", reflect.TypeOf((*MockClientInterface)(nil).SiteServiceDeleteSite), varargs...)
}

// SiteServiceGetSite mocks base method.
func (m *MockClientInterface) SiteServiceGetSite(ctx context.Context, projectName, regionResourceId, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceGetSite", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceGetSite indicates an expected call of SiteServiceGetSite.
func (mr *MockClientInterfaceMockRecorder) SiteServiceGetSite(ctx, projectName, regionResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceGetSite", reflect.TypeOf((*MockClientInterface)(nil).SiteServiceGetSite), varargs...)
}

// SiteServiceListSites mocks base method.
func (m *MockClientInterface) SiteServiceListSites(ctx context.Context, projectName, resourceId string, params *SiteServiceListSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceListSites", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceListSites indicates an expected call of SiteServiceListSites.
func (mr *MockClientInterfaceMockRecorder) SiteServiceListSites(ctx, projectName, resourceId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceListSites", reflect.TypeOf((*MockClientInterface)(nil).SiteServiceListSites), varargs...)
}

// SiteServicePatchSite mocks base method.
func (m *MockClientInterface) SiteServicePatchSite(ctx context.Context, projectName, regionResourceId, resourceId string, body SiteServicePatchSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServicePatchSite", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServicePatchSite indicates an expected call of SiteServicePatchSite.
func (mr *MockClientInterfaceMockRecorder) SiteServicePatchSite(ctx, projectName, regionResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServicePatchSite", reflect.TypeOf((*MockClientInterface)(nil).SiteServicePatchSite), varargs...)
}

// SiteServicePatchSiteWithBody mocks base method.
func (m *MockClientInterface) SiteServicePatchSiteWithBody(ctx context.Context, projectName, regionResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServicePatchSiteWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServicePatchSiteWithBody indicates an expected call of SiteServicePatchSiteWithBody.
func (mr *MockClientInterfaceMockRecorder) SiteServicePatchSiteWithBody(ctx, projectName, regionResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServicePatchSiteWithBody", reflect.TypeOf((*MockClientInterface)(nil).SiteServicePatchSiteWithBody), varargs...)
}

// SiteServiceUpdateSite mocks base method.
func (m *MockClientInterface) SiteServiceUpdateSite(ctx context.Context, projectName, regionResourceId, resourceId string, body SiteServiceUpdateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceUpdateSite", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceUpdateSite indicates an expected call of SiteServiceUpdateSite.
func (mr *MockClientInterfaceMockRecorder) SiteServiceUpdateSite(ctx, projectName, regionResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceUpdateSite", reflect.TypeOf((*MockClientInterface)(nil).SiteServiceUpdateSite), varargs...)
}

// SiteServiceUpdateSiteWithBody mocks base method.
func (m *MockClientInterface) SiteServiceUpdateSiteWithBody(ctx context.Context, projectName, regionResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceUpdateSiteWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceUpdateSiteWithBody indicates an expected call of SiteServiceUpdateSiteWithBody.
func (mr *MockClientInterfaceMockRecorder) SiteServiceUpdateSiteWithBody(ctx, projectName, regionResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceUpdateSiteWithBody", reflect.TypeOf((*MockClientInterface)(nil).SiteServiceUpdateSiteWithBody), varargs...)
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup mocks base method.
func (m *MockClientInterface) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx context.Context, projectName string, body TelemetryLogsGroupServiceCreateTelemetryLogsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsGroupServiceCreateTelemetryLogsGroup", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup indicates an expected call of TelemetryLogsGroupServiceCreateTelemetryLogsGroup.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsGroupServiceCreateTelemetryLogsGroup", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsGroupServiceCreateTelemetryLogsGroup), varargs...)
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody mocks base method.
func (m *MockClientInterface) TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody indicates an expected call of TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody), varargs...)
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup mocks base method.
func (m *MockClientInterface) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsGroupServiceDeleteTelemetryLogsGroup", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup indicates an expected call of TelemetryLogsGroupServiceDeleteTelemetryLogsGroup.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsGroupServiceDeleteTelemetryLogsGroup", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsGroupServiceDeleteTelemetryLogsGroup), varargs...)
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup mocks base method.
func (m *MockClientInterface) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsGroupServiceGetTelemetryLogsGroup", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup indicates an expected call of TelemetryLogsGroupServiceGetTelemetryLogsGroup.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsGroupServiceGetTelemetryLogsGroup", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsGroupServiceGetTelemetryLogsGroup), varargs...)
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups mocks base method.
func (m *MockClientInterface) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx context.Context, projectName string, params *TelemetryLogsGroupServiceListTelemetryLogsGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsGroupServiceListTelemetryLogsGroups", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups indicates an expected call of TelemetryLogsGroupServiceListTelemetryLogsGroups.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsGroupServiceListTelemetryLogsGroups", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsGroupServiceListTelemetryLogsGroups), varargs...)
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile mocks base method.
func (m *MockClientInterface) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx context.Context, projectName, resourceId string, body TelemetryLogsProfileServiceCreateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceCreateTelemetryLogsProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile indicates an expected call of TelemetryLogsProfileServiceCreateTelemetryLogsProfile.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceCreateTelemetryLogsProfile", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsProfileServiceCreateTelemetryLogsProfile), varargs...)
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody mocks base method.
func (m *MockClientInterface) TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody indicates an expected call of TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody), varargs...)
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile mocks base method.
func (m *MockClientInterface) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx context.Context, projectName, loggroupResourceId, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceDeleteTelemetryLogsProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile indicates an expected call of TelemetryLogsProfileServiceDeleteTelemetryLogsProfile.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, projectName, loggroupResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceDeleteTelemetryLogsProfile", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsProfileServiceDeleteTelemetryLogsProfile), varargs...)
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile mocks base method.
func (m *MockClientInterface) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx context.Context, projectName, loggroupResourceId, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceGetTelemetryLogsProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile indicates an expected call of TelemetryLogsProfileServiceGetTelemetryLogsProfile.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, projectName, loggroupResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceGetTelemetryLogsProfile", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsProfileServiceGetTelemetryLogsProfile), varargs...)
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles mocks base method.
func (m *MockClientInterface) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx context.Context, projectName, resourceId string, params *TelemetryLogsProfileServiceListTelemetryLogsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceListTelemetryLogsProfiles", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles indicates an expected call of TelemetryLogsProfileServiceListTelemetryLogsProfiles.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, projectName, resourceId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceListTelemetryLogsProfiles", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsProfileServiceListTelemetryLogsProfiles), varargs...)
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile mocks base method.
func (m *MockClientInterface) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx context.Context, projectName, loggroupResourceId, resourceId string, body TelemetryLogsProfileServicePatchTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServicePatchTelemetryLogsProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile indicates an expected call of TelemetryLogsProfileServicePatchTelemetryLogsProfile.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, projectName, loggroupResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServicePatchTelemetryLogsProfile", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsProfileServicePatchTelemetryLogsProfile), varargs...)
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody mocks base method.
func (m *MockClientInterface) TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody(ctx context.Context, projectName, loggroupResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody indicates an expected call of TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody(ctx, projectName, loggroupResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody), varargs...)
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile mocks base method.
func (m *MockClientInterface) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx context.Context, projectName, loggroupResourceId, resourceId string, body TelemetryLogsProfileServiceUpdateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceUpdateTelemetryLogsProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile indicates an expected call of TelemetryLogsProfileServiceUpdateTelemetryLogsProfile.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, projectName, loggroupResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceUpdateTelemetryLogsProfile", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsProfileServiceUpdateTelemetryLogsProfile), varargs...)
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody mocks base method.
func (m *MockClientInterface) TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody(ctx context.Context, projectName, loggroupResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody indicates an expected call of TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody.
func (mr *MockClientInterfaceMockRecorder) TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody(ctx, projectName, loggroupResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody", reflect.TypeOf((*MockClientInterface)(nil).TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody), varargs...)
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup mocks base method.
func (m *MockClientInterface) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx context.Context, projectName string, body TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup indicates an expected call of TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup), varargs...)
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody mocks base method.
func (m *MockClientInterface) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody indicates an expected call of TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody), varargs...)
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup mocks base method.
func (m *MockClientInterface) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup indicates an expected call of TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup), varargs...)
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup mocks base method.
func (m *MockClientInterface) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsGroupServiceGetTelemetryMetricsGroup", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup indicates an expected call of TelemetryMetricsGroupServiceGetTelemetryMetricsGroup.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsGroupServiceGetTelemetryMetricsGroup", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsGroupServiceGetTelemetryMetricsGroup), varargs...)
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups mocks base method.
func (m *MockClientInterface) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx context.Context, projectName string, params *TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsGroupServiceListTelemetryMetricsGroups", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups indicates an expected call of TelemetryMetricsGroupServiceListTelemetryMetricsGroups.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsGroupServiceListTelemetryMetricsGroups", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsGroupServiceListTelemetryMetricsGroups), varargs...)
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile mocks base method.
func (m *MockClientInterface) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx context.Context, projectName, resourceId string, body TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile indicates an expected call of TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile), varargs...)
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody mocks base method.
func (m *MockClientInterface) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody indicates an expected call of TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody), varargs...)
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile mocks base method.
func (m *MockClientInterface) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx context.Context, projectName, metricgroupResourceId, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile indicates an expected call of TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, projectName, metricgroupResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile), varargs...)
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile mocks base method.
func (m *MockClientInterface) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx context.Context, projectName, metricgroupResourceId, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceGetTelemetryMetricsProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile indicates an expected call of TelemetryMetricsProfileServiceGetTelemetryMetricsProfile.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, projectName, metricgroupResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceGetTelemetryMetricsProfile", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsProfileServiceGetTelemetryMetricsProfile), varargs...)
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles mocks base method.
func (m *MockClientInterface) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx context.Context, projectName, resourceId string, params *TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceListTelemetryMetricsProfiles", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles indicates an expected call of TelemetryMetricsProfileServiceListTelemetryMetricsProfiles.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, projectName, resourceId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceListTelemetryMetricsProfiles", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsProfileServiceListTelemetryMetricsProfiles), varargs...)
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile mocks base method.
func (m *MockClientInterface) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx context.Context, projectName, metricgroupResourceId, resourceId string, body TelemetryMetricsProfileServicePatchTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServicePatchTelemetryMetricsProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile indicates an expected call of TelemetryMetricsProfileServicePatchTelemetryMetricsProfile.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, projectName, metricgroupResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServicePatchTelemetryMetricsProfile", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsProfileServicePatchTelemetryMetricsProfile), varargs...)
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody mocks base method.
func (m *MockClientInterface) TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody(ctx context.Context, projectName, metricgroupResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody indicates an expected call of TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody(ctx, projectName, metricgroupResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody), varargs...)
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile mocks base method.
func (m *MockClientInterface) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx context.Context, projectName, metricgroupResourceId, resourceId string, body TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile indicates an expected call of TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, projectName, metricgroupResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile), varargs...)
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody mocks base method.
func (m *MockClientInterface) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody(ctx context.Context, projectName, metricgroupResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody indicates an expected call of TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody.
func (mr *MockClientInterfaceMockRecorder) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody(ctx, projectName, metricgroupResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody", reflect.TypeOf((*MockClientInterface)(nil).TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody), varargs...)
}

// WorkloadMemberServiceCreateWorkloadMember mocks base method.
func (m *MockClientInterface) WorkloadMemberServiceCreateWorkloadMember(ctx context.Context, projectName, resourceId string, body WorkloadMemberServiceCreateWorkloadMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadMemberServiceCreateWorkloadMember", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadMemberServiceCreateWorkloadMember indicates an expected call of WorkloadMemberServiceCreateWorkloadMember.
func (mr *MockClientInterfaceMockRecorder) WorkloadMemberServiceCreateWorkloadMember(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadMemberServiceCreateWorkloadMember", reflect.TypeOf((*MockClientInterface)(nil).WorkloadMemberServiceCreateWorkloadMember), varargs...)
}

// WorkloadMemberServiceCreateWorkloadMemberWithBody mocks base method.
func (m *MockClientInterface) WorkloadMemberServiceCreateWorkloadMemberWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadMemberServiceCreateWorkloadMemberWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadMemberServiceCreateWorkloadMemberWithBody indicates an expected call of WorkloadMemberServiceCreateWorkloadMemberWithBody.
func (mr *MockClientInterfaceMockRecorder) WorkloadMemberServiceCreateWorkloadMemberWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadMemberServiceCreateWorkloadMemberWithBody", reflect.TypeOf((*MockClientInterface)(nil).WorkloadMemberServiceCreateWorkloadMemberWithBody), varargs...)
}

// WorkloadMemberServiceDeleteWorkloadMember mocks base method.
func (m *MockClientInterface) WorkloadMemberServiceDeleteWorkloadMember(ctx context.Context, projectName, workloadResourceId, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, workloadResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadMemberServiceDeleteWorkloadMember", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadMemberServiceDeleteWorkloadMember indicates an expected call of WorkloadMemberServiceDeleteWorkloadMember.
func (mr *MockClientInterfaceMockRecorder) WorkloadMemberServiceDeleteWorkloadMember(ctx, projectName, workloadResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, workloadResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadMemberServiceDeleteWorkloadMember", reflect.TypeOf((*MockClientInterface)(nil).WorkloadMemberServiceDeleteWorkloadMember), varargs...)
}

// WorkloadMemberServiceGetWorkloadMember mocks base method.
func (m *MockClientInterface) WorkloadMemberServiceGetWorkloadMember(ctx context.Context, projectName, workloadResourceId, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, workloadResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadMemberServiceGetWorkloadMember", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadMemberServiceGetWorkloadMember indicates an expected call of WorkloadMemberServiceGetWorkloadMember.
func (mr *MockClientInterfaceMockRecorder) WorkloadMemberServiceGetWorkloadMember(ctx, projectName, workloadResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, workloadResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadMemberServiceGetWorkloadMember", reflect.TypeOf((*MockClientInterface)(nil).WorkloadMemberServiceGetWorkloadMember), varargs...)
}

// WorkloadMemberServiceListWorkloadMembers mocks base method.
func (m *MockClientInterface) WorkloadMemberServiceListWorkloadMembers(ctx context.Context, projectName, resourceId string, params *WorkloadMemberServiceListWorkloadMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadMemberServiceListWorkloadMembers", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadMemberServiceListWorkloadMembers indicates an expected call of WorkloadMemberServiceListWorkloadMembers.
func (mr *MockClientInterfaceMockRecorder) WorkloadMemberServiceListWorkloadMembers(ctx, projectName, resourceId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadMemberServiceListWorkloadMembers", reflect.TypeOf((*MockClientInterface)(nil).WorkloadMemberServiceListWorkloadMembers), varargs...)
}

// WorkloadServiceCreateWorkload mocks base method.
func (m *MockClientInterface) WorkloadServiceCreateWorkload(ctx context.Context, projectName string, body WorkloadServiceCreateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceCreateWorkload", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceCreateWorkload indicates an expected call of WorkloadServiceCreateWorkload.
func (mr *MockClientInterfaceMockRecorder) WorkloadServiceCreateWorkload(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceCreateWorkload", reflect.TypeOf((*MockClientInterface)(nil).WorkloadServiceCreateWorkload), varargs...)
}

// WorkloadServiceCreateWorkloadWithBody mocks base method.
func (m *MockClientInterface) WorkloadServiceCreateWorkloadWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceCreateWorkloadWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceCreateWorkloadWithBody indicates an expected call of WorkloadServiceCreateWorkloadWithBody.
func (mr *MockClientInterfaceMockRecorder) WorkloadServiceCreateWorkloadWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceCreateWorkloadWithBody", reflect.TypeOf((*MockClientInterface)(nil).WorkloadServiceCreateWorkloadWithBody), varargs...)
}

// WorkloadServiceDeleteWorkload mocks base method.
func (m *MockClientInterface) WorkloadServiceDeleteWorkload(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceDeleteWorkload", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceDeleteWorkload indicates an expected call of WorkloadServiceDeleteWorkload.
func (mr *MockClientInterfaceMockRecorder) WorkloadServiceDeleteWorkload(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceDeleteWorkload", reflect.TypeOf((*MockClientInterface)(nil).WorkloadServiceDeleteWorkload), varargs...)
}

// WorkloadServiceGetWorkload mocks base method.
func (m *MockClientInterface) WorkloadServiceGetWorkload(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceGetWorkload", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceGetWorkload indicates an expected call of WorkloadServiceGetWorkload.
func (mr *MockClientInterfaceMockRecorder) WorkloadServiceGetWorkload(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceGetWorkload", reflect.TypeOf((*MockClientInterface)(nil).WorkloadServiceGetWorkload), varargs...)
}

// WorkloadServiceListWorkloads mocks base method.
func (m *MockClientInterface) WorkloadServiceListWorkloads(ctx context.Context, projectName string, params *WorkloadServiceListWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceListWorkloads", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceListWorkloads indicates an expected call of WorkloadServiceListWorkloads.
func (mr *MockClientInterfaceMockRecorder) WorkloadServiceListWorkloads(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceListWorkloads", reflect.TypeOf((*MockClientInterface)(nil).WorkloadServiceListWorkloads), varargs...)
}

// WorkloadServicePatchWorkload mocks base method.
func (m *MockClientInterface) WorkloadServicePatchWorkload(ctx context.Context, projectName, resourceId string, body WorkloadServicePatchWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServicePatchWorkload", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServicePatchWorkload indicates an expected call of WorkloadServicePatchWorkload.
func (mr *MockClientInterfaceMockRecorder) WorkloadServicePatchWorkload(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServicePatchWorkload", reflect.TypeOf((*MockClientInterface)(nil).WorkloadServicePatchWorkload), varargs...)
}

// WorkloadServicePatchWorkloadWithBody mocks base method.
func (m *MockClientInterface) WorkloadServicePatchWorkloadWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServicePatchWorkloadWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServicePatchWorkloadWithBody indicates an expected call of WorkloadServicePatchWorkloadWithBody.
func (mr *MockClientInterfaceMockRecorder) WorkloadServicePatchWorkloadWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServicePatchWorkloadWithBody", reflect.TypeOf((*MockClientInterface)(nil).WorkloadServicePatchWorkloadWithBody), varargs...)
}

// WorkloadServiceUpdateWorkload mocks base method.
func (m *MockClientInterface) WorkloadServiceUpdateWorkload(ctx context.Context, projectName, resourceId string, body WorkloadServiceUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceUpdateWorkload", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceUpdateWorkload indicates an expected call of WorkloadServiceUpdateWorkload.
func (mr *MockClientInterfaceMockRecorder) WorkloadServiceUpdateWorkload(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceUpdateWorkload", reflect.TypeOf((*MockClientInterface)(nil).WorkloadServiceUpdateWorkload), varargs...)
}

// WorkloadServiceUpdateWorkloadWithBody mocks base method.
func (m *MockClientInterface) WorkloadServiceUpdateWorkloadWithBody(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceUpdateWorkloadWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceUpdateWorkloadWithBody indicates an expected call of WorkloadServiceUpdateWorkloadWithBody.
func (mr *MockClientInterfaceMockRecorder) WorkloadServiceUpdateWorkloadWithBody(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceUpdateWorkloadWithBody", reflect.TypeOf((*MockClientInterface)(nil).WorkloadServiceUpdateWorkloadWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CustomConfigServiceCreateCustomConfigWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CustomConfigServiceCreateCustomConfigWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomConfigServiceCreateCustomConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomConfigServiceCreateCustomConfigWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CustomConfigServiceCreateCustomConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomConfigServiceCreateCustomConfigWithBodyWithResponse indicates an expected call of CustomConfigServiceCreateCustomConfigWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CustomConfigServiceCreateCustomConfigWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomConfigServiceCreateCustomConfigWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CustomConfigServiceCreateCustomConfigWithBodyWithResponse), varargs...)
}

// CustomConfigServiceCreateCustomConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CustomConfigServiceCreateCustomConfigWithResponse(ctx context.Context, projectName string, body CustomConfigServiceCreateCustomConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomConfigServiceCreateCustomConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomConfigServiceCreateCustomConfigWithResponse", varargs...)
	ret0, _ := ret[0].(*CustomConfigServiceCreateCustomConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomConfigServiceCreateCustomConfigWithResponse indicates an expected call of CustomConfigServiceCreateCustomConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CustomConfigServiceCreateCustomConfigWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomConfigServiceCreateCustomConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CustomConfigServiceCreateCustomConfigWithResponse), varargs...)
}

// CustomConfigServiceDeleteCustomConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CustomConfigServiceDeleteCustomConfigWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*CustomConfigServiceDeleteCustomConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomConfigServiceDeleteCustomConfigWithResponse", varargs...)
	ret0, _ := ret[0].(*CustomConfigServiceDeleteCustomConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomConfigServiceDeleteCustomConfigWithResponse indicates an expected call of CustomConfigServiceDeleteCustomConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CustomConfigServiceDeleteCustomConfigWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomConfigServiceDeleteCustomConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CustomConfigServiceDeleteCustomConfigWithResponse), varargs...)
}

// CustomConfigServiceGetCustomConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CustomConfigServiceGetCustomConfigWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*CustomConfigServiceGetCustomConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomConfigServiceGetCustomConfigWithResponse", varargs...)
	ret0, _ := ret[0].(*CustomConfigServiceGetCustomConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomConfigServiceGetCustomConfigWithResponse indicates an expected call of CustomConfigServiceGetCustomConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CustomConfigServiceGetCustomConfigWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomConfigServiceGetCustomConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CustomConfigServiceGetCustomConfigWithResponse), varargs...)
}

// CustomConfigServiceListCustomConfigsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CustomConfigServiceListCustomConfigsWithResponse(ctx context.Context, projectName string, params *CustomConfigServiceListCustomConfigsParams, reqEditors ...RequestEditorFn) (*CustomConfigServiceListCustomConfigsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomConfigServiceListCustomConfigsWithResponse", varargs...)
	ret0, _ := ret[0].(*CustomConfigServiceListCustomConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomConfigServiceListCustomConfigsWithResponse indicates an expected call of CustomConfigServiceListCustomConfigsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CustomConfigServiceListCustomConfigsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomConfigServiceListCustomConfigsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CustomConfigServiceListCustomConfigsWithResponse), varargs...)
}

// HostServiceCreateHostWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceCreateHostWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServiceCreateHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceCreateHostWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceCreateHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceCreateHostWithBodyWithResponse indicates an expected call of HostServiceCreateHostWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceCreateHostWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceCreateHostWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceCreateHostWithBodyWithResponse), varargs...)
}

// HostServiceCreateHostWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceCreateHostWithResponse(ctx context.Context, projectName string, body HostServiceCreateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServiceCreateHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceCreateHostWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceCreateHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceCreateHostWithResponse indicates an expected call of HostServiceCreateHostWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceCreateHostWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceCreateHostWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceCreateHostWithResponse), varargs...)
}

// HostServiceDeleteHostWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceDeleteHostWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*HostServiceDeleteHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceDeleteHostWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceDeleteHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceDeleteHostWithResponse indicates an expected call of HostServiceDeleteHostWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceDeleteHostWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceDeleteHostWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceDeleteHostWithResponse), varargs...)
}

// HostServiceGetHostWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceGetHostWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*HostServiceGetHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceGetHostWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceGetHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceGetHostWithResponse indicates an expected call of HostServiceGetHostWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceGetHostWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceGetHostWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceGetHostWithResponse), varargs...)
}

// HostServiceGetHostsSummaryWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceGetHostsSummaryWithResponse(ctx context.Context, projectName string, params *HostServiceGetHostsSummaryParams, reqEditors ...RequestEditorFn) (*HostServiceGetHostsSummaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceGetHostsSummaryWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceGetHostsSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceGetHostsSummaryWithResponse indicates an expected call of HostServiceGetHostsSummaryWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceGetHostsSummaryWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceGetHostsSummaryWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceGetHostsSummaryWithResponse), varargs...)
}

// HostServiceInvalidateHostWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceInvalidateHostWithResponse(ctx context.Context, projectName, resourceId string, params *HostServiceInvalidateHostParams, reqEditors ...RequestEditorFn) (*HostServiceInvalidateHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceInvalidateHostWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceInvalidateHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceInvalidateHostWithResponse indicates an expected call of HostServiceInvalidateHostWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceInvalidateHostWithResponse(ctx, projectName, resourceId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceInvalidateHostWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceInvalidateHostWithResponse), varargs...)
}

// HostServiceListHostsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceListHostsWithResponse(ctx context.Context, projectName string, params *HostServiceListHostsParams, reqEditors ...RequestEditorFn) (*HostServiceListHostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceListHostsWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceListHostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceListHostsWithResponse indicates an expected call of HostServiceListHostsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceListHostsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceListHostsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceListHostsWithResponse), varargs...)
}

// HostServiceOnboardHostWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceOnboardHostWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*HostServiceOnboardHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceOnboardHostWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceOnboardHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceOnboardHostWithResponse indicates an expected call of HostServiceOnboardHostWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceOnboardHostWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceOnboardHostWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceOnboardHostWithResponse), varargs...)
}

// HostServicePatchHostWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServicePatchHostWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServicePatchHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServicePatchHostWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServicePatchHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServicePatchHostWithBodyWithResponse indicates an expected call of HostServicePatchHostWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServicePatchHostWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServicePatchHostWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServicePatchHostWithBodyWithResponse), varargs...)
}

// HostServicePatchHostWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServicePatchHostWithResponse(ctx context.Context, projectName, resourceId string, body HostServicePatchHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServicePatchHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServicePatchHostWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServicePatchHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServicePatchHostWithResponse indicates an expected call of HostServicePatchHostWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServicePatchHostWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServicePatchHostWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServicePatchHostWithResponse), varargs...)
}

// HostServicePatchRegisterHostWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServicePatchRegisterHostWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServicePatchRegisterHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServicePatchRegisterHostWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServicePatchRegisterHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServicePatchRegisterHostWithBodyWithResponse indicates an expected call of HostServicePatchRegisterHostWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServicePatchRegisterHostWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServicePatchRegisterHostWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServicePatchRegisterHostWithBodyWithResponse), varargs...)
}

// HostServicePatchRegisterHostWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServicePatchRegisterHostWithResponse(ctx context.Context, projectName, resourceId string, body HostServicePatchRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServicePatchRegisterHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServicePatchRegisterHostWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServicePatchRegisterHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServicePatchRegisterHostWithResponse indicates an expected call of HostServicePatchRegisterHostWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServicePatchRegisterHostWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServicePatchRegisterHostWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServicePatchRegisterHostWithResponse), varargs...)
}

// HostServiceRegisterHostWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceRegisterHostWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServiceRegisterHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceRegisterHostWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceRegisterHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceRegisterHostWithBodyWithResponse indicates an expected call of HostServiceRegisterHostWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceRegisterHostWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceRegisterHostWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceRegisterHostWithBodyWithResponse), varargs...)
}

// HostServiceRegisterHostWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceRegisterHostWithResponse(ctx context.Context, projectName string, body HostServiceRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServiceRegisterHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceRegisterHostWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceRegisterHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceRegisterHostWithResponse indicates an expected call of HostServiceRegisterHostWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceRegisterHostWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceRegisterHostWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceRegisterHostWithResponse), varargs...)
}

// HostServiceUpdateHostWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceUpdateHostWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServiceUpdateHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceUpdateHostWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceUpdateHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceUpdateHostWithBodyWithResponse indicates an expected call of HostServiceUpdateHostWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceUpdateHostWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceUpdateHostWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceUpdateHostWithBodyWithResponse), varargs...)
}

// HostServiceUpdateHostWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HostServiceUpdateHostWithResponse(ctx context.Context, projectName, resourceId string, body HostServiceUpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServiceUpdateHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HostServiceUpdateHostWithResponse", varargs...)
	ret0, _ := ret[0].(*HostServiceUpdateHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostServiceUpdateHostWithResponse indicates an expected call of HostServiceUpdateHostWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HostServiceUpdateHostWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostServiceUpdateHostWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HostServiceUpdateHostWithResponse), varargs...)
}

// InstanceServiceCreateInstanceWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InstanceServiceCreateInstanceWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceServiceCreateInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceCreateInstanceWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*InstanceServiceCreateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceCreateInstanceWithBodyWithResponse indicates an expected call of InstanceServiceCreateInstanceWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InstanceServiceCreateInstanceWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceCreateInstanceWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InstanceServiceCreateInstanceWithBodyWithResponse), varargs...)
}

// InstanceServiceCreateInstanceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InstanceServiceCreateInstanceWithResponse(ctx context.Context, projectName string, body InstanceServiceCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceServiceCreateInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceCreateInstanceWithResponse", varargs...)
	ret0, _ := ret[0].(*InstanceServiceCreateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceCreateInstanceWithResponse indicates an expected call of InstanceServiceCreateInstanceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InstanceServiceCreateInstanceWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceCreateInstanceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InstanceServiceCreateInstanceWithResponse), varargs...)
}

// InstanceServiceDeleteInstanceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InstanceServiceDeleteInstanceWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*InstanceServiceDeleteInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceDeleteInstanceWithResponse", varargs...)
	ret0, _ := ret[0].(*InstanceServiceDeleteInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceDeleteInstanceWithResponse indicates an expected call of InstanceServiceDeleteInstanceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InstanceServiceDeleteInstanceWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceDeleteInstanceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InstanceServiceDeleteInstanceWithResponse), varargs...)
}

// InstanceServiceGetInstanceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InstanceServiceGetInstanceWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*InstanceServiceGetInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceGetInstanceWithResponse", varargs...)
	ret0, _ := ret[0].(*InstanceServiceGetInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceGetInstanceWithResponse indicates an expected call of InstanceServiceGetInstanceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InstanceServiceGetInstanceWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceGetInstanceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InstanceServiceGetInstanceWithResponse), varargs...)
}

// InstanceServiceInvalidateInstanceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InstanceServiceInvalidateInstanceWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*InstanceServiceInvalidateInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceInvalidateInstanceWithResponse", varargs...)
	ret0, _ := ret[0].(*InstanceServiceInvalidateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceInvalidateInstanceWithResponse indicates an expected call of InstanceServiceInvalidateInstanceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InstanceServiceInvalidateInstanceWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceInvalidateInstanceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InstanceServiceInvalidateInstanceWithResponse), varargs...)
}

// InstanceServiceListInstancesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InstanceServiceListInstancesWithResponse(ctx context.Context, projectName string, params *InstanceServiceListInstancesParams, reqEditors ...RequestEditorFn) (*InstanceServiceListInstancesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceListInstancesWithResponse", varargs...)
	ret0, _ := ret[0].(*InstanceServiceListInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceListInstancesWithResponse indicates an expected call of InstanceServiceListInstancesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InstanceServiceListInstancesWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceListInstancesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InstanceServiceListInstancesWithResponse), varargs...)
}

// InstanceServicePatchInstanceWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InstanceServicePatchInstanceWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceServicePatchInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServicePatchInstanceWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*InstanceServicePatchInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServicePatchInstanceWithBodyWithResponse indicates an expected call of InstanceServicePatchInstanceWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InstanceServicePatchInstanceWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServicePatchInstanceWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InstanceServicePatchInstanceWithBodyWithResponse), varargs...)
}

// InstanceServicePatchInstanceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InstanceServicePatchInstanceWithResponse(ctx context.Context, projectName, resourceId string, body InstanceServicePatchInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceServicePatchInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServicePatchInstanceWithResponse", varargs...)
	ret0, _ := ret[0].(*InstanceServicePatchInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServicePatchInstanceWithResponse indicates an expected call of InstanceServicePatchInstanceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InstanceServicePatchInstanceWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServicePatchInstanceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InstanceServicePatchInstanceWithResponse), varargs...)
}

// InstanceServiceUpdateInstanceWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InstanceServiceUpdateInstanceWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceServiceUpdateInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceUpdateInstanceWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*InstanceServiceUpdateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceUpdateInstanceWithBodyWithResponse indicates an expected call of InstanceServiceUpdateInstanceWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InstanceServiceUpdateInstanceWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceUpdateInstanceWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InstanceServiceUpdateInstanceWithBodyWithResponse), varargs...)
}

// InstanceServiceUpdateInstanceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InstanceServiceUpdateInstanceWithResponse(ctx context.Context, projectName, resourceId string, body InstanceServiceUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceServiceUpdateInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstanceServiceUpdateInstanceWithResponse", varargs...)
	ret0, _ := ret[0].(*InstanceServiceUpdateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServiceUpdateInstanceWithResponse indicates an expected call of InstanceServiceUpdateInstanceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InstanceServiceUpdateInstanceWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServiceUpdateInstanceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InstanceServiceUpdateInstanceWithResponse), varargs...)
}

// LocalAccountServiceCreateLocalAccountWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) LocalAccountServiceCreateLocalAccountWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LocalAccountServiceCreateLocalAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalAccountServiceCreateLocalAccountWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*LocalAccountServiceCreateLocalAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalAccountServiceCreateLocalAccountWithBodyWithResponse indicates an expected call of LocalAccountServiceCreateLocalAccountWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) LocalAccountServiceCreateLocalAccountWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAccountServiceCreateLocalAccountWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).LocalAccountServiceCreateLocalAccountWithBodyWithResponse), varargs...)
}

// LocalAccountServiceCreateLocalAccountWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) LocalAccountServiceCreateLocalAccountWithResponse(ctx context.Context, projectName string, body LocalAccountServiceCreateLocalAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*LocalAccountServiceCreateLocalAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalAccountServiceCreateLocalAccountWithResponse", varargs...)
	ret0, _ := ret[0].(*LocalAccountServiceCreateLocalAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalAccountServiceCreateLocalAccountWithResponse indicates an expected call of LocalAccountServiceCreateLocalAccountWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) LocalAccountServiceCreateLocalAccountWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAccountServiceCreateLocalAccountWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).LocalAccountServiceCreateLocalAccountWithResponse), varargs...)
}

// LocalAccountServiceDeleteLocalAccountWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) LocalAccountServiceDeleteLocalAccountWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*LocalAccountServiceDeleteLocalAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalAccountServiceDeleteLocalAccountWithResponse", varargs...)
	ret0, _ := ret[0].(*LocalAccountServiceDeleteLocalAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalAccountServiceDeleteLocalAccountWithResponse indicates an expected call of LocalAccountServiceDeleteLocalAccountWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) LocalAccountServiceDeleteLocalAccountWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAccountServiceDeleteLocalAccountWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).LocalAccountServiceDeleteLocalAccountWithResponse), varargs...)
}

// LocalAccountServiceGetLocalAccountWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) LocalAccountServiceGetLocalAccountWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*LocalAccountServiceGetLocalAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalAccountServiceGetLocalAccountWithResponse", varargs...)
	ret0, _ := ret[0].(*LocalAccountServiceGetLocalAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalAccountServiceGetLocalAccountWithResponse indicates an expected call of LocalAccountServiceGetLocalAccountWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) LocalAccountServiceGetLocalAccountWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAccountServiceGetLocalAccountWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).LocalAccountServiceGetLocalAccountWithResponse), varargs...)
}

// LocalAccountServiceListLocalAccountsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) LocalAccountServiceListLocalAccountsWithResponse(ctx context.Context, projectName string, params *LocalAccountServiceListLocalAccountsParams, reqEditors ...RequestEditorFn) (*LocalAccountServiceListLocalAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalAccountServiceListLocalAccountsWithResponse", varargs...)
	ret0, _ := ret[0].(*LocalAccountServiceListLocalAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalAccountServiceListLocalAccountsWithResponse indicates an expected call of LocalAccountServiceListLocalAccountsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) LocalAccountServiceListLocalAccountsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAccountServiceListLocalAccountsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).LocalAccountServiceListLocalAccountsWithResponse), varargs...)
}

// LocationServiceListLocationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) LocationServiceListLocationsWithResponse(ctx context.Context, projectName string, params *LocationServiceListLocationsParams, reqEditors ...RequestEditorFn) (*LocationServiceListLocationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocationServiceListLocationsWithResponse", varargs...)
	ret0, _ := ret[0].(*LocationServiceListLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationServiceListLocationsWithResponse indicates an expected call of LocationServiceListLocationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) LocationServiceListLocationsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationServiceListLocationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).LocationServiceListLocationsWithResponse), varargs...)
}

// OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OSUpdatePolicyCreateOSUpdatePolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*OSUpdatePolicyCreateOSUpdatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse indicates an expected call of OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse), varargs...)
}

// OSUpdatePolicyCreateOSUpdatePolicyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OSUpdatePolicyCreateOSUpdatePolicyWithResponse(ctx context.Context, projectName string, body OSUpdatePolicyCreateOSUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*OSUpdatePolicyCreateOSUpdatePolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdatePolicyCreateOSUpdatePolicyWithResponse", varargs...)
	ret0, _ := ret[0].(*OSUpdatePolicyCreateOSUpdatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdatePolicyCreateOSUpdatePolicyWithResponse indicates an expected call of OSUpdatePolicyCreateOSUpdatePolicyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OSUpdatePolicyCreateOSUpdatePolicyWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdatePolicyCreateOSUpdatePolicyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OSUpdatePolicyCreateOSUpdatePolicyWithResponse), varargs...)
}

// OSUpdatePolicyDeleteOSUpdatePolicyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OSUpdatePolicyDeleteOSUpdatePolicyWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdatePolicyDeleteOSUpdatePolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdatePolicyDeleteOSUpdatePolicyWithResponse", varargs...)
	ret0, _ := ret[0].(*OSUpdatePolicyDeleteOSUpdatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdatePolicyDeleteOSUpdatePolicyWithResponse indicates an expected call of OSUpdatePolicyDeleteOSUpdatePolicyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OSUpdatePolicyDeleteOSUpdatePolicyWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdatePolicyDeleteOSUpdatePolicyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OSUpdatePolicyDeleteOSUpdatePolicyWithResponse), varargs...)
}

// OSUpdatePolicyGetOSUpdatePolicyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OSUpdatePolicyGetOSUpdatePolicyWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdatePolicyGetOSUpdatePolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdatePolicyGetOSUpdatePolicyWithResponse", varargs...)
	ret0, _ := ret[0].(*OSUpdatePolicyGetOSUpdatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdatePolicyGetOSUpdatePolicyWithResponse indicates an expected call of OSUpdatePolicyGetOSUpdatePolicyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OSUpdatePolicyGetOSUpdatePolicyWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdatePolicyGetOSUpdatePolicyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OSUpdatePolicyGetOSUpdatePolicyWithResponse), varargs...)
}

// OSUpdatePolicyListOSUpdatePolicyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OSUpdatePolicyListOSUpdatePolicyWithResponse(ctx context.Context, projectName string, params *OSUpdatePolicyListOSUpdatePolicyParams, reqEditors ...RequestEditorFn) (*OSUpdatePolicyListOSUpdatePolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdatePolicyListOSUpdatePolicyWithResponse", varargs...)
	ret0, _ := ret[0].(*OSUpdatePolicyListOSUpdatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdatePolicyListOSUpdatePolicyWithResponse indicates an expected call of OSUpdatePolicyListOSUpdatePolicyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OSUpdatePolicyListOSUpdatePolicyWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdatePolicyListOSUpdatePolicyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OSUpdatePolicyListOSUpdatePolicyWithResponse), varargs...)
}

// OSUpdateRunDeleteOSUpdateRunWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OSUpdateRunDeleteOSUpdateRunWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdateRunDeleteOSUpdateRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdateRunDeleteOSUpdateRunWithResponse", varargs...)
	ret0, _ := ret[0].(*OSUpdateRunDeleteOSUpdateRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdateRunDeleteOSUpdateRunWithResponse indicates an expected call of OSUpdateRunDeleteOSUpdateRunWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OSUpdateRunDeleteOSUpdateRunWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdateRunDeleteOSUpdateRunWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OSUpdateRunDeleteOSUpdateRunWithResponse), varargs...)
}

// OSUpdateRunGetOSUpdateRunWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OSUpdateRunGetOSUpdateRunWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdateRunGetOSUpdateRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdateRunGetOSUpdateRunWithResponse", varargs...)
	ret0, _ := ret[0].(*OSUpdateRunGetOSUpdateRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdateRunGetOSUpdateRunWithResponse indicates an expected call of OSUpdateRunGetOSUpdateRunWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OSUpdateRunGetOSUpdateRunWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdateRunGetOSUpdateRunWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OSUpdateRunGetOSUpdateRunWithResponse), varargs...)
}

// OSUpdateRunListOSUpdateRunWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OSUpdateRunListOSUpdateRunWithResponse(ctx context.Context, projectName string, params *OSUpdateRunListOSUpdateRunParams, reqEditors ...RequestEditorFn) (*OSUpdateRunListOSUpdateRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OSUpdateRunListOSUpdateRunWithResponse", varargs...)
	ret0, _ := ret[0].(*OSUpdateRunListOSUpdateRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSUpdateRunListOSUpdateRunWithResponse indicates an expected call of OSUpdateRunListOSUpdateRunWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OSUpdateRunListOSUpdateRunWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSUpdateRunListOSUpdateRunWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OSUpdateRunListOSUpdateRunWithResponse), varargs...)
}

// OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperatingSystemServiceCreateOperatingSystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*OperatingSystemServiceCreateOperatingSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse indicates an expected call of OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse), varargs...)
}

// OperatingSystemServiceCreateOperatingSystemWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperatingSystemServiceCreateOperatingSystemWithResponse(ctx context.Context, projectName string, body OperatingSystemServiceCreateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*OperatingSystemServiceCreateOperatingSystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceCreateOperatingSystemWithResponse", varargs...)
	ret0, _ := ret[0].(*OperatingSystemServiceCreateOperatingSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceCreateOperatingSystemWithResponse indicates an expected call of OperatingSystemServiceCreateOperatingSystemWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperatingSystemServiceCreateOperatingSystemWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceCreateOperatingSystemWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperatingSystemServiceCreateOperatingSystemWithResponse), varargs...)
}

// OperatingSystemServiceDeleteOperatingSystemWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperatingSystemServiceDeleteOperatingSystemWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*OperatingSystemServiceDeleteOperatingSystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceDeleteOperatingSystemWithResponse", varargs...)
	ret0, _ := ret[0].(*OperatingSystemServiceDeleteOperatingSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceDeleteOperatingSystemWithResponse indicates an expected call of OperatingSystemServiceDeleteOperatingSystemWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperatingSystemServiceDeleteOperatingSystemWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceDeleteOperatingSystemWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperatingSystemServiceDeleteOperatingSystemWithResponse), varargs...)
}

// OperatingSystemServiceGetOperatingSystemWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperatingSystemServiceGetOperatingSystemWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*OperatingSystemServiceGetOperatingSystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceGetOperatingSystemWithResponse", varargs...)
	ret0, _ := ret[0].(*OperatingSystemServiceGetOperatingSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceGetOperatingSystemWithResponse indicates an expected call of OperatingSystemServiceGetOperatingSystemWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperatingSystemServiceGetOperatingSystemWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceGetOperatingSystemWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperatingSystemServiceGetOperatingSystemWithResponse), varargs...)
}

// OperatingSystemServiceListOperatingSystemsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperatingSystemServiceListOperatingSystemsWithResponse(ctx context.Context, projectName string, params *OperatingSystemServiceListOperatingSystemsParams, reqEditors ...RequestEditorFn) (*OperatingSystemServiceListOperatingSystemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceListOperatingSystemsWithResponse", varargs...)
	ret0, _ := ret[0].(*OperatingSystemServiceListOperatingSystemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceListOperatingSystemsWithResponse indicates an expected call of OperatingSystemServiceListOperatingSystemsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperatingSystemServiceListOperatingSystemsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceListOperatingSystemsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperatingSystemServiceListOperatingSystemsWithResponse), varargs...)
}

// OperatingSystemServicePatchOperatingSystemWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperatingSystemServicePatchOperatingSystemWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperatingSystemServicePatchOperatingSystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServicePatchOperatingSystemWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*OperatingSystemServicePatchOperatingSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServicePatchOperatingSystemWithBodyWithResponse indicates an expected call of OperatingSystemServicePatchOperatingSystemWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperatingSystemServicePatchOperatingSystemWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServicePatchOperatingSystemWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperatingSystemServicePatchOperatingSystemWithBodyWithResponse), varargs...)
}

// OperatingSystemServicePatchOperatingSystemWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperatingSystemServicePatchOperatingSystemWithResponse(ctx context.Context, projectName, resourceId string, body OperatingSystemServicePatchOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*OperatingSystemServicePatchOperatingSystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServicePatchOperatingSystemWithResponse", varargs...)
	ret0, _ := ret[0].(*OperatingSystemServicePatchOperatingSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServicePatchOperatingSystemWithResponse indicates an expected call of OperatingSystemServicePatchOperatingSystemWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperatingSystemServicePatchOperatingSystemWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServicePatchOperatingSystemWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperatingSystemServicePatchOperatingSystemWithResponse), varargs...)
}

// OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperatingSystemServiceUpdateOperatingSystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*OperatingSystemServiceUpdateOperatingSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse indicates an expected call of OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse), varargs...)
}

// OperatingSystemServiceUpdateOperatingSystemWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperatingSystemServiceUpdateOperatingSystemWithResponse(ctx context.Context, projectName, resourceId string, body OperatingSystemServiceUpdateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*OperatingSystemServiceUpdateOperatingSystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperatingSystemServiceUpdateOperatingSystemWithResponse", varargs...)
	ret0, _ := ret[0].(*OperatingSystemServiceUpdateOperatingSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatingSystemServiceUpdateOperatingSystemWithResponse indicates an expected call of OperatingSystemServiceUpdateOperatingSystemWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperatingSystemServiceUpdateOperatingSystemWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemServiceUpdateOperatingSystemWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperatingSystemServiceUpdateOperatingSystemWithResponse), varargs...)
}

// ProviderServiceCreateProviderWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ProviderServiceCreateProviderWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProviderServiceCreateProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProviderServiceCreateProviderWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*ProviderServiceCreateProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderServiceCreateProviderWithBodyWithResponse indicates an expected call of ProviderServiceCreateProviderWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ProviderServiceCreateProviderWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderServiceCreateProviderWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ProviderServiceCreateProviderWithBodyWithResponse), varargs...)
}

// ProviderServiceCreateProviderWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ProviderServiceCreateProviderWithResponse(ctx context.Context, projectName string, body ProviderServiceCreateProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*ProviderServiceCreateProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProviderServiceCreateProviderWithResponse", varargs...)
	ret0, _ := ret[0].(*ProviderServiceCreateProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderServiceCreateProviderWithResponse indicates an expected call of ProviderServiceCreateProviderWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ProviderServiceCreateProviderWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderServiceCreateProviderWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ProviderServiceCreateProviderWithResponse), varargs...)
}

// ProviderServiceDeleteProviderWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ProviderServiceDeleteProviderWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*ProviderServiceDeleteProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProviderServiceDeleteProviderWithResponse", varargs...)
	ret0, _ := ret[0].(*ProviderServiceDeleteProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderServiceDeleteProviderWithResponse indicates an expected call of ProviderServiceDeleteProviderWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ProviderServiceDeleteProviderWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderServiceDeleteProviderWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ProviderServiceDeleteProviderWithResponse), varargs...)
}

// ProviderServiceGetProviderWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ProviderServiceGetProviderWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*ProviderServiceGetProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProviderServiceGetProviderWithResponse", varargs...)
	ret0, _ := ret[0].(*ProviderServiceGetProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderServiceGetProviderWithResponse indicates an expected call of ProviderServiceGetProviderWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ProviderServiceGetProviderWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderServiceGetProviderWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ProviderServiceGetProviderWithResponse), varargs...)
}

// ProviderServiceListProvidersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ProviderServiceListProvidersWithResponse(ctx context.Context, projectName string, params *ProviderServiceListProvidersParams, reqEditors ...RequestEditorFn) (*ProviderServiceListProvidersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProviderServiceListProvidersWithResponse", varargs...)
	ret0, _ := ret[0].(*ProviderServiceListProvidersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderServiceListProvidersWithResponse indicates an expected call of ProviderServiceListProvidersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ProviderServiceListProvidersWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderServiceListProvidersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ProviderServiceListProvidersWithResponse), varargs...)
}

// RegionServiceCreateRegionWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RegionServiceCreateRegionWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegionServiceCreateRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceCreateRegionWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*RegionServiceCreateRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceCreateRegionWithBodyWithResponse indicates an expected call of RegionServiceCreateRegionWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RegionServiceCreateRegionWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceCreateRegionWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RegionServiceCreateRegionWithBodyWithResponse), varargs...)
}

// RegionServiceCreateRegionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RegionServiceCreateRegionWithResponse(ctx context.Context, projectName string, body RegionServiceCreateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegionServiceCreateRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceCreateRegionWithResponse", varargs...)
	ret0, _ := ret[0].(*RegionServiceCreateRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceCreateRegionWithResponse indicates an expected call of RegionServiceCreateRegionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RegionServiceCreateRegionWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceCreateRegionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RegionServiceCreateRegionWithResponse), varargs...)
}

// RegionServiceDeleteRegionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RegionServiceDeleteRegionWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*RegionServiceDeleteRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceDeleteRegionWithResponse", varargs...)
	ret0, _ := ret[0].(*RegionServiceDeleteRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceDeleteRegionWithResponse indicates an expected call of RegionServiceDeleteRegionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RegionServiceDeleteRegionWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceDeleteRegionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RegionServiceDeleteRegionWithResponse), varargs...)
}

// RegionServiceGetRegionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RegionServiceGetRegionWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*RegionServiceGetRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceGetRegionWithResponse", varargs...)
	ret0, _ := ret[0].(*RegionServiceGetRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceGetRegionWithResponse indicates an expected call of RegionServiceGetRegionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RegionServiceGetRegionWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceGetRegionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RegionServiceGetRegionWithResponse), varargs...)
}

// RegionServiceListRegionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RegionServiceListRegionsWithResponse(ctx context.Context, projectName string, params *RegionServiceListRegionsParams, reqEditors ...RequestEditorFn) (*RegionServiceListRegionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceListRegionsWithResponse", varargs...)
	ret0, _ := ret[0].(*RegionServiceListRegionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceListRegionsWithResponse indicates an expected call of RegionServiceListRegionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RegionServiceListRegionsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceListRegionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RegionServiceListRegionsWithResponse), varargs...)
}

// RegionServicePatchRegionWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RegionServicePatchRegionWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegionServicePatchRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServicePatchRegionWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*RegionServicePatchRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServicePatchRegionWithBodyWithResponse indicates an expected call of RegionServicePatchRegionWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RegionServicePatchRegionWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServicePatchRegionWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RegionServicePatchRegionWithBodyWithResponse), varargs...)
}

// RegionServicePatchRegionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RegionServicePatchRegionWithResponse(ctx context.Context, projectName, resourceId string, body RegionServicePatchRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegionServicePatchRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServicePatchRegionWithResponse", varargs...)
	ret0, _ := ret[0].(*RegionServicePatchRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServicePatchRegionWithResponse indicates an expected call of RegionServicePatchRegionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RegionServicePatchRegionWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServicePatchRegionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RegionServicePatchRegionWithResponse), varargs...)
}

// RegionServiceUpdateRegionWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RegionServiceUpdateRegionWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegionServiceUpdateRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceUpdateRegionWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*RegionServiceUpdateRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceUpdateRegionWithBodyWithResponse indicates an expected call of RegionServiceUpdateRegionWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RegionServiceUpdateRegionWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceUpdateRegionWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RegionServiceUpdateRegionWithBodyWithResponse), varargs...)
}

// RegionServiceUpdateRegionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RegionServiceUpdateRegionWithResponse(ctx context.Context, projectName, resourceId string, body RegionServiceUpdateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegionServiceUpdateRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegionServiceUpdateRegionWithResponse", varargs...)
	ret0, _ := ret[0].(*RegionServiceUpdateRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionServiceUpdateRegionWithResponse indicates an expected call of RegionServiceUpdateRegionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RegionServiceUpdateRegionWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionServiceUpdateRegionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RegionServiceUpdateRegionWithResponse), varargs...)
}

// ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateRepeatedScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceCreateRepeatedScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse indicates an expected call of ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse), varargs...)
}

// ScheduleServiceCreateRepeatedScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceCreateRepeatedScheduleWithResponse(ctx context.Context, projectName string, body ScheduleServiceCreateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateRepeatedScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceCreateRepeatedScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceCreateRepeatedScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceCreateRepeatedScheduleWithResponse indicates an expected call of ScheduleServiceCreateRepeatedScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceCreateRepeatedScheduleWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceCreateRepeatedScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceCreateRepeatedScheduleWithResponse), varargs...)
}

// ScheduleServiceCreateSingleScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceCreateSingleScheduleWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateSingleScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceCreateSingleScheduleWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceCreateSingleScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceCreateSingleScheduleWithBodyWithResponse indicates an expected call of ScheduleServiceCreateSingleScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceCreateSingleScheduleWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceCreateSingleScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceCreateSingleScheduleWithBodyWithResponse), varargs...)
}

// ScheduleServiceCreateSingleScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceCreateSingleScheduleWithResponse(ctx context.Context, projectName string, body ScheduleServiceCreateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateSingleScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceCreateSingleScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceCreateSingleScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceCreateSingleScheduleWithResponse indicates an expected call of ScheduleServiceCreateSingleScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceCreateSingleScheduleWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceCreateSingleScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceCreateSingleScheduleWithResponse), varargs...)
}

// ScheduleServiceDeleteRepeatedScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceDeleteRepeatedScheduleWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceDeleteRepeatedScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceDeleteRepeatedScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceDeleteRepeatedScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceDeleteRepeatedScheduleWithResponse indicates an expected call of ScheduleServiceDeleteRepeatedScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceDeleteRepeatedScheduleWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceDeleteRepeatedScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceDeleteRepeatedScheduleWithResponse), varargs...)
}

// ScheduleServiceDeleteSingleScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceDeleteSingleScheduleWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceDeleteSingleScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceDeleteSingleScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceDeleteSingleScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceDeleteSingleScheduleWithResponse indicates an expected call of ScheduleServiceDeleteSingleScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceDeleteSingleScheduleWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceDeleteSingleScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceDeleteSingleScheduleWithResponse), varargs...)
}

// ScheduleServiceGetRepeatedScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceGetRepeatedScheduleWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceGetRepeatedScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceGetRepeatedScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceGetRepeatedScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceGetRepeatedScheduleWithResponse indicates an expected call of ScheduleServiceGetRepeatedScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceGetRepeatedScheduleWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceGetRepeatedScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceGetRepeatedScheduleWithResponse), varargs...)
}

// ScheduleServiceGetSingleScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceGetSingleScheduleWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceGetSingleScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceGetSingleScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceGetSingleScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceGetSingleScheduleWithResponse indicates an expected call of ScheduleServiceGetSingleScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceGetSingleScheduleWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceGetSingleScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceGetSingleScheduleWithResponse), varargs...)
}

// ScheduleServiceListRepeatedSchedulesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceListRepeatedSchedulesWithResponse(ctx context.Context, projectName string, params *ScheduleServiceListRepeatedSchedulesParams, reqEditors ...RequestEditorFn) (*ScheduleServiceListRepeatedSchedulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceListRepeatedSchedulesWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceListRepeatedSchedulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceListRepeatedSchedulesWithResponse indicates an expected call of ScheduleServiceListRepeatedSchedulesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceListRepeatedSchedulesWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceListRepeatedSchedulesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceListRepeatedSchedulesWithResponse), varargs...)
}

// ScheduleServiceListSchedulesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceListSchedulesWithResponse(ctx context.Context, projectName string, params *ScheduleServiceListSchedulesParams, reqEditors ...RequestEditorFn) (*ScheduleServiceListSchedulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceListSchedulesWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceListSchedulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceListSchedulesWithResponse indicates an expected call of ScheduleServiceListSchedulesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceListSchedulesWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceListSchedulesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceListSchedulesWithResponse), varargs...)
}

// ScheduleServiceListSingleSchedulesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceListSingleSchedulesWithResponse(ctx context.Context, projectName string, params *ScheduleServiceListSingleSchedulesParams, reqEditors ...RequestEditorFn) (*ScheduleServiceListSingleSchedulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceListSingleSchedulesWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceListSingleSchedulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceListSingleSchedulesWithResponse indicates an expected call of ScheduleServiceListSingleSchedulesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceListSingleSchedulesWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceListSingleSchedulesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceListSingleSchedulesWithResponse), varargs...)
}

// ScheduleServicePatchRepeatedScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServicePatchRepeatedScheduleWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServicePatchRepeatedScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServicePatchRepeatedScheduleWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServicePatchRepeatedScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServicePatchRepeatedScheduleWithBodyWithResponse indicates an expected call of ScheduleServicePatchRepeatedScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServicePatchRepeatedScheduleWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServicePatchRepeatedScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServicePatchRepeatedScheduleWithBodyWithResponse), varargs...)
}

// ScheduleServicePatchRepeatedScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServicePatchRepeatedScheduleWithResponse(ctx context.Context, projectName, resourceId string, body ScheduleServicePatchRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServicePatchRepeatedScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServicePatchRepeatedScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServicePatchRepeatedScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServicePatchRepeatedScheduleWithResponse indicates an expected call of ScheduleServicePatchRepeatedScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServicePatchRepeatedScheduleWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServicePatchRepeatedScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServicePatchRepeatedScheduleWithResponse), varargs...)
}

// ScheduleServicePatchSingleScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServicePatchSingleScheduleWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServicePatchSingleScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServicePatchSingleScheduleWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServicePatchSingleScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServicePatchSingleScheduleWithBodyWithResponse indicates an expected call of ScheduleServicePatchSingleScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServicePatchSingleScheduleWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServicePatchSingleScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServicePatchSingleScheduleWithBodyWithResponse), varargs...)
}

// ScheduleServicePatchSingleScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServicePatchSingleScheduleWithResponse(ctx context.Context, projectName, resourceId string, body ScheduleServicePatchSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServicePatchSingleScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServicePatchSingleScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServicePatchSingleScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServicePatchSingleScheduleWithResponse indicates an expected call of ScheduleServicePatchSingleScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServicePatchSingleScheduleWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServicePatchSingleScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServicePatchSingleScheduleWithResponse), varargs...)
}

// ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateRepeatedScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceUpdateRepeatedScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse indicates an expected call of ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse), varargs...)
}

// ScheduleServiceUpdateRepeatedScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceUpdateRepeatedScheduleWithResponse(ctx context.Context, projectName, resourceId string, body ScheduleServiceUpdateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateRepeatedScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceUpdateRepeatedScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceUpdateRepeatedScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceUpdateRepeatedScheduleWithResponse indicates an expected call of ScheduleServiceUpdateRepeatedScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceUpdateRepeatedScheduleWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceUpdateRepeatedScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceUpdateRepeatedScheduleWithResponse), varargs...)
}

// ScheduleServiceUpdateSingleScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceUpdateSingleScheduleWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateSingleScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceUpdateSingleScheduleWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceUpdateSingleScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceUpdateSingleScheduleWithBodyWithResponse indicates an expected call of ScheduleServiceUpdateSingleScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceUpdateSingleScheduleWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceUpdateSingleScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceUpdateSingleScheduleWithBodyWithResponse), varargs...)
}

// ScheduleServiceUpdateSingleScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduleServiceUpdateSingleScheduleWithResponse(ctx context.Context, projectName, resourceId string, body ScheduleServiceUpdateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateSingleScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleServiceUpdateSingleScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ScheduleServiceUpdateSingleScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleServiceUpdateSingleScheduleWithResponse indicates an expected call of ScheduleServiceUpdateSingleScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduleServiceUpdateSingleScheduleWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleServiceUpdateSingleScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduleServiceUpdateSingleScheduleWithResponse), varargs...)
}

// SiteServiceCreateSiteWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SiteServiceCreateSiteWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SiteServiceCreateSiteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceCreateSiteWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*SiteServiceCreateSiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceCreateSiteWithBodyWithResponse indicates an expected call of SiteServiceCreateSiteWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SiteServiceCreateSiteWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceCreateSiteWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SiteServiceCreateSiteWithBodyWithResponse), varargs...)
}

// SiteServiceCreateSiteWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SiteServiceCreateSiteWithResponse(ctx context.Context, projectName, resourceId string, body SiteServiceCreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*SiteServiceCreateSiteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceCreateSiteWithResponse", varargs...)
	ret0, _ := ret[0].(*SiteServiceCreateSiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceCreateSiteWithResponse indicates an expected call of SiteServiceCreateSiteWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SiteServiceCreateSiteWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceCreateSiteWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SiteServiceCreateSiteWithResponse), varargs...)
}

// SiteServiceDeleteSiteWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SiteServiceDeleteSiteWithResponse(ctx context.Context, projectName, regionResourceId, resourceId string, reqEditors ...RequestEditorFn) (*SiteServiceDeleteSiteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceDeleteSiteWithResponse", varargs...)
	ret0, _ := ret[0].(*SiteServiceDeleteSiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceDeleteSiteWithResponse indicates an expected call of SiteServiceDeleteSiteWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SiteServiceDeleteSiteWithResponse(ctx, projectName, regionResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceDeleteSiteWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SiteServiceDeleteSiteWithResponse), varargs...)
}

// SiteServiceGetSiteWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SiteServiceGetSiteWithResponse(ctx context.Context, projectName, regionResourceId, resourceId string, reqEditors ...RequestEditorFn) (*SiteServiceGetSiteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceGetSiteWithResponse", varargs...)
	ret0, _ := ret[0].(*SiteServiceGetSiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceGetSiteWithResponse indicates an expected call of SiteServiceGetSiteWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SiteServiceGetSiteWithResponse(ctx, projectName, regionResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceGetSiteWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SiteServiceGetSiteWithResponse), varargs...)
}

// SiteServiceListSitesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SiteServiceListSitesWithResponse(ctx context.Context, projectName, resourceId string, params *SiteServiceListSitesParams, reqEditors ...RequestEditorFn) (*SiteServiceListSitesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceListSitesWithResponse", varargs...)
	ret0, _ := ret[0].(*SiteServiceListSitesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceListSitesWithResponse indicates an expected call of SiteServiceListSitesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SiteServiceListSitesWithResponse(ctx, projectName, resourceId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceListSitesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SiteServiceListSitesWithResponse), varargs...)
}

// SiteServicePatchSiteWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SiteServicePatchSiteWithBodyWithResponse(ctx context.Context, projectName, regionResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SiteServicePatchSiteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServicePatchSiteWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*SiteServicePatchSiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServicePatchSiteWithBodyWithResponse indicates an expected call of SiteServicePatchSiteWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SiteServicePatchSiteWithBodyWithResponse(ctx, projectName, regionResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServicePatchSiteWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SiteServicePatchSiteWithBodyWithResponse), varargs...)
}

// SiteServicePatchSiteWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SiteServicePatchSiteWithResponse(ctx context.Context, projectName, regionResourceId, resourceId string, body SiteServicePatchSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*SiteServicePatchSiteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServicePatchSiteWithResponse", varargs...)
	ret0, _ := ret[0].(*SiteServicePatchSiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServicePatchSiteWithResponse indicates an expected call of SiteServicePatchSiteWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SiteServicePatchSiteWithResponse(ctx, projectName, regionResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServicePatchSiteWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SiteServicePatchSiteWithResponse), varargs...)
}

// SiteServiceUpdateSiteWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SiteServiceUpdateSiteWithBodyWithResponse(ctx context.Context, projectName, regionResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SiteServiceUpdateSiteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceUpdateSiteWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*SiteServiceUpdateSiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceUpdateSiteWithBodyWithResponse indicates an expected call of SiteServiceUpdateSiteWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SiteServiceUpdateSiteWithBodyWithResponse(ctx, projectName, regionResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceUpdateSiteWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SiteServiceUpdateSiteWithBodyWithResponse), varargs...)
}

// SiteServiceUpdateSiteWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SiteServiceUpdateSiteWithResponse(ctx context.Context, projectName, regionResourceId, resourceId string, body SiteServiceUpdateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*SiteServiceUpdateSiteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, regionResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteServiceUpdateSiteWithResponse", varargs...)
	ret0, _ := ret[0].(*SiteServiceUpdateSiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteServiceUpdateSiteWithResponse indicates an expected call of SiteServiceUpdateSiteWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SiteServiceUpdateSiteWithResponse(ctx, projectName, regionResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, regionResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteServiceUpdateSiteWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SiteServiceUpdateSiteWithResponse), varargs...)
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse indicates an expected call of TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse), varargs...)
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse(ctx context.Context, projectName string, body TelemetryLogsGroupServiceCreateTelemetryLogsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse indicates an expected call of TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse), varargs...)
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse indicates an expected call of TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse), varargs...)
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceGetTelemetryLogsGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsGroupServiceGetTelemetryLogsGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse indicates an expected call of TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse), varargs...)
}

// TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse(ctx context.Context, projectName string, params *TelemetryLogsGroupServiceListTelemetryLogsGroupsParams, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceListTelemetryLogsGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsGroupServiceListTelemetryLogsGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse indicates an expected call of TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse), varargs...)
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse indicates an expected call of TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse), varargs...)
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse(ctx context.Context, projectName, resourceId string, body TelemetryLogsProfileServiceCreateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse indicates an expected call of TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse), varargs...)
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse(ctx context.Context, projectName, loggroupResourceId, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse indicates an expected call of TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse(ctx, projectName, loggroupResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse), varargs...)
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse(ctx context.Context, projectName, loggroupResourceId, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceGetTelemetryLogsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsProfileServiceGetTelemetryLogsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse indicates an expected call of TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse(ctx, projectName, loggroupResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse), varargs...)
}

// TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse(ctx context.Context, projectName, resourceId string, params *TelemetryLogsProfileServiceListTelemetryLogsProfilesParams, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceListTelemetryLogsProfilesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsProfileServiceListTelemetryLogsProfilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse indicates an expected call of TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse(ctx, projectName, resourceId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse), varargs...)
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse(ctx context.Context, projectName, loggroupResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse indicates an expected call of TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse(ctx, projectName, loggroupResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse), varargs...)
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse(ctx context.Context, projectName, loggroupResourceId, resourceId string, body TelemetryLogsProfileServicePatchTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse indicates an expected call of TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse(ctx, projectName, loggroupResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse), varargs...)
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse(ctx context.Context, projectName, loggroupResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse indicates an expected call of TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse(ctx, projectName, loggroupResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse), varargs...)
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse(ctx context.Context, projectName, loggroupResourceId, resourceId string, body TelemetryLogsProfileServiceUpdateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, loggroupResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse indicates an expected call of TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse(ctx, projectName, loggroupResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, loggroupResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse), varargs...)
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse indicates an expected call of TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse), varargs...)
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse(ctx context.Context, projectName string, body TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse indicates an expected call of TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse), varargs...)
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse indicates an expected call of TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse), varargs...)
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse indicates an expected call of TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse), varargs...)
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse(ctx context.Context, projectName string, params *TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse indicates an expected call of TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse), varargs...)
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse indicates an expected call of TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse), varargs...)
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse(ctx context.Context, projectName, resourceId string, body TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse indicates an expected call of TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse), varargs...)
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse(ctx context.Context, projectName, metricgroupResourceId, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse indicates an expected call of TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse(ctx, projectName, metricgroupResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse), varargs...)
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse(ctx context.Context, projectName, metricgroupResourceId, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse indicates an expected call of TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse(ctx, projectName, metricgroupResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse), varargs...)
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse(ctx context.Context, projectName, resourceId string, params *TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse indicates an expected call of TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse(ctx, projectName, resourceId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse), varargs...)
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse(ctx context.Context, projectName, metricgroupResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse indicates an expected call of TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse(ctx, projectName, metricgroupResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse), varargs...)
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse(ctx context.Context, projectName, metricgroupResourceId, resourceId string, body TelemetryMetricsProfileServicePatchTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse indicates an expected call of TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse(ctx, projectName, metricgroupResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse), varargs...)
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse(ctx context.Context, projectName, metricgroupResourceId, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse indicates an expected call of TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse(ctx, projectName, metricgroupResourceId, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse), varargs...)
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse(ctx context.Context, projectName, metricgroupResourceId, resourceId string, body TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, metricgroupResourceId, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse", varargs...)
	ret0, _ := ret[0].(*TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse indicates an expected call of TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse(ctx, projectName, metricgroupResourceId, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, metricgroupResourceId, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse), varargs...)
}

// WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceCreateWorkloadMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadMemberServiceCreateWorkloadMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse indicates an expected call of WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse), varargs...)
}

// WorkloadMemberServiceCreateWorkloadMemberWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadMemberServiceCreateWorkloadMemberWithResponse(ctx context.Context, projectName, resourceId string, body WorkloadMemberServiceCreateWorkloadMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceCreateWorkloadMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadMemberServiceCreateWorkloadMemberWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadMemberServiceCreateWorkloadMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadMemberServiceCreateWorkloadMemberWithResponse indicates an expected call of WorkloadMemberServiceCreateWorkloadMemberWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadMemberServiceCreateWorkloadMemberWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadMemberServiceCreateWorkloadMemberWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadMemberServiceCreateWorkloadMemberWithResponse), varargs...)
}

// WorkloadMemberServiceDeleteWorkloadMemberWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadMemberServiceDeleteWorkloadMemberWithResponse(ctx context.Context, projectName, workloadResourceId, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceDeleteWorkloadMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, workloadResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadMemberServiceDeleteWorkloadMemberWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadMemberServiceDeleteWorkloadMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadMemberServiceDeleteWorkloadMemberWithResponse indicates an expected call of WorkloadMemberServiceDeleteWorkloadMemberWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadMemberServiceDeleteWorkloadMemberWithResponse(ctx, projectName, workloadResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, workloadResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadMemberServiceDeleteWorkloadMemberWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadMemberServiceDeleteWorkloadMemberWithResponse), varargs...)
}

// WorkloadMemberServiceGetWorkloadMemberWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadMemberServiceGetWorkloadMemberWithResponse(ctx context.Context, projectName, workloadResourceId, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceGetWorkloadMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, workloadResourceId, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadMemberServiceGetWorkloadMemberWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadMemberServiceGetWorkloadMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadMemberServiceGetWorkloadMemberWithResponse indicates an expected call of WorkloadMemberServiceGetWorkloadMemberWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadMemberServiceGetWorkloadMemberWithResponse(ctx, projectName, workloadResourceId, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, workloadResourceId, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadMemberServiceGetWorkloadMemberWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadMemberServiceGetWorkloadMemberWithResponse), varargs...)
}

// WorkloadMemberServiceListWorkloadMembersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadMemberServiceListWorkloadMembersWithResponse(ctx context.Context, projectName, resourceId string, params *WorkloadMemberServiceListWorkloadMembersParams, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceListWorkloadMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadMemberServiceListWorkloadMembersWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadMemberServiceListWorkloadMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadMemberServiceListWorkloadMembersWithResponse indicates an expected call of WorkloadMemberServiceListWorkloadMembersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadMemberServiceListWorkloadMembersWithResponse(ctx, projectName, resourceId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadMemberServiceListWorkloadMembersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadMemberServiceListWorkloadMembersWithResponse), varargs...)
}

// WorkloadServiceCreateWorkloadWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadServiceCreateWorkloadWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadServiceCreateWorkloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceCreateWorkloadWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadServiceCreateWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceCreateWorkloadWithBodyWithResponse indicates an expected call of WorkloadServiceCreateWorkloadWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadServiceCreateWorkloadWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceCreateWorkloadWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadServiceCreateWorkloadWithBodyWithResponse), varargs...)
}

// WorkloadServiceCreateWorkloadWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadServiceCreateWorkloadWithResponse(ctx context.Context, projectName string, body WorkloadServiceCreateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadServiceCreateWorkloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceCreateWorkloadWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadServiceCreateWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceCreateWorkloadWithResponse indicates an expected call of WorkloadServiceCreateWorkloadWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadServiceCreateWorkloadWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceCreateWorkloadWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadServiceCreateWorkloadWithResponse), varargs...)
}

// WorkloadServiceDeleteWorkloadWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadServiceDeleteWorkloadWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadServiceDeleteWorkloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceDeleteWorkloadWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadServiceDeleteWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceDeleteWorkloadWithResponse indicates an expected call of WorkloadServiceDeleteWorkloadWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadServiceDeleteWorkloadWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceDeleteWorkloadWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadServiceDeleteWorkloadWithResponse), varargs...)
}

// WorkloadServiceGetWorkloadWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadServiceGetWorkloadWithResponse(ctx context.Context, projectName, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadServiceGetWorkloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceGetWorkloadWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadServiceGetWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceGetWorkloadWithResponse indicates an expected call of WorkloadServiceGetWorkloadWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadServiceGetWorkloadWithResponse(ctx, projectName, resourceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceGetWorkloadWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadServiceGetWorkloadWithResponse), varargs...)
}

// WorkloadServiceListWorkloadsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadServiceListWorkloadsWithResponse(ctx context.Context, projectName string, params *WorkloadServiceListWorkloadsParams, reqEditors ...RequestEditorFn) (*WorkloadServiceListWorkloadsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceListWorkloadsWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadServiceListWorkloadsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceListWorkloadsWithResponse indicates an expected call of WorkloadServiceListWorkloadsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadServiceListWorkloadsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceListWorkloadsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadServiceListWorkloadsWithResponse), varargs...)
}

// WorkloadServicePatchWorkloadWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadServicePatchWorkloadWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadServicePatchWorkloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServicePatchWorkloadWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadServicePatchWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServicePatchWorkloadWithBodyWithResponse indicates an expected call of WorkloadServicePatchWorkloadWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadServicePatchWorkloadWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServicePatchWorkloadWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadServicePatchWorkloadWithBodyWithResponse), varargs...)
}

// WorkloadServicePatchWorkloadWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadServicePatchWorkloadWithResponse(ctx context.Context, projectName, resourceId string, body WorkloadServicePatchWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadServicePatchWorkloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServicePatchWorkloadWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadServicePatchWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServicePatchWorkloadWithResponse indicates an expected call of WorkloadServicePatchWorkloadWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadServicePatchWorkloadWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServicePatchWorkloadWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadServicePatchWorkloadWithResponse), varargs...)
}

// WorkloadServiceUpdateWorkloadWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadServiceUpdateWorkloadWithBodyWithResponse(ctx context.Context, projectName, resourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadServiceUpdateWorkloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceUpdateWorkloadWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadServiceUpdateWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceUpdateWorkloadWithBodyWithResponse indicates an expected call of WorkloadServiceUpdateWorkloadWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadServiceUpdateWorkloadWithBodyWithResponse(ctx, projectName, resourceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceUpdateWorkloadWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadServiceUpdateWorkloadWithBodyWithResponse), varargs...)
}

// WorkloadServiceUpdateWorkloadWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadServiceUpdateWorkloadWithResponse(ctx context.Context, projectName, resourceId string, body WorkloadServiceUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadServiceUpdateWorkloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, resourceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadServiceUpdateWorkloadWithResponse", varargs...)
	ret0, _ := ret[0].(*WorkloadServiceUpdateWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadServiceUpdateWorkloadWithResponse indicates an expected call of WorkloadServiceUpdateWorkloadWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadServiceUpdateWorkloadWithResponse(ctx, projectName, resourceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, resourceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadServiceUpdateWorkloadWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadServiceUpdateWorkloadWithResponse), varargs...)
}
