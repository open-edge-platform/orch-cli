// Package infra provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package infra

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// HostServiceListHosts request
	HostServiceListHosts(ctx context.Context, projectName string, params *HostServiceListHostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HostServiceCreateHostWithBody request with any body
	HostServiceCreateHostWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HostServiceCreateHost(ctx context.Context, projectName string, body HostServiceCreateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HostServiceRegisterHostWithBody request with any body
	HostServiceRegisterHostWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HostServiceRegisterHost(ctx context.Context, projectName string, body HostServiceRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HostServiceGetHostsSummary request
	HostServiceGetHostsSummary(ctx context.Context, projectName string, params *HostServiceGetHostsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HostServiceDeleteHost request
	HostServiceDeleteHost(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HostServiceGetHost request
	HostServiceGetHost(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HostServicePatchHostWithBody request with any body
	HostServicePatchHostWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HostServicePatchHost(ctx context.Context, projectName string, resourceId string, body HostServicePatchHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HostServiceUpdateHostWithBody request with any body
	HostServiceUpdateHostWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HostServiceUpdateHost(ctx context.Context, projectName string, resourceId string, body HostServiceUpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HostServiceInvalidateHost request
	HostServiceInvalidateHost(ctx context.Context, projectName string, resourceId string, params *HostServiceInvalidateHostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HostServiceOnboardHost request
	HostServiceOnboardHost(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HostServicePatchRegisterHostWithBody request with any body
	HostServicePatchRegisterHostWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HostServicePatchRegisterHost(ctx context.Context, projectName string, resourceId string, body HostServicePatchRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceServiceListInstances request
	InstanceServiceListInstances(ctx context.Context, projectName string, params *InstanceServiceListInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceServiceCreateInstanceWithBody request with any body
	InstanceServiceCreateInstanceWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstanceServiceCreateInstance(ctx context.Context, projectName string, body InstanceServiceCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceServiceDeleteInstance request
	InstanceServiceDeleteInstance(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceServiceGetInstance request
	InstanceServiceGetInstance(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceServicePatchInstanceWithBody request with any body
	InstanceServicePatchInstanceWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstanceServicePatchInstance(ctx context.Context, projectName string, resourceId string, body InstanceServicePatchInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceServiceUpdateInstanceWithBody request with any body
	InstanceServiceUpdateInstanceWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstanceServiceUpdateInstance(ctx context.Context, projectName string, resourceId string, body InstanceServiceUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceServiceInvalidateInstance request
	InstanceServiceInvalidateInstance(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperatingSystemServiceListOperatingSystems request
	OperatingSystemServiceListOperatingSystems(ctx context.Context, projectName string, params *OperatingSystemServiceListOperatingSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperatingSystemServiceCreateOperatingSystemWithBody request with any body
	OperatingSystemServiceCreateOperatingSystemWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperatingSystemServiceCreateOperatingSystem(ctx context.Context, projectName string, body OperatingSystemServiceCreateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperatingSystemServiceDeleteOperatingSystem request
	OperatingSystemServiceDeleteOperatingSystem(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperatingSystemServiceGetOperatingSystem request
	OperatingSystemServiceGetOperatingSystem(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperatingSystemServicePatchOperatingSystemWithBody request with any body
	OperatingSystemServicePatchOperatingSystemWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperatingSystemServicePatchOperatingSystem(ctx context.Context, projectName string, resourceId string, body OperatingSystemServicePatchOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperatingSystemServiceUpdateOperatingSystemWithBody request with any body
	OperatingSystemServiceUpdateOperatingSystemWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperatingSystemServiceUpdateOperatingSystem(ctx context.Context, projectName string, resourceId string, body OperatingSystemServiceUpdateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceListSchedules request
	ScheduleServiceListSchedules(ctx context.Context, projectName string, params *ScheduleServiceListSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadServiceListWorkloads request
	WorkloadServiceListWorkloads(ctx context.Context, projectName string, params *WorkloadServiceListWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadServiceCreateWorkloadWithBody request with any body
	WorkloadServiceCreateWorkloadWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadServiceCreateWorkload(ctx context.Context, projectName string, body WorkloadServiceCreateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadServiceDeleteWorkload request
	WorkloadServiceDeleteWorkload(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadServiceGetWorkload request
	WorkloadServiceGetWorkload(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadServicePatchWorkloadWithBody request with any body
	WorkloadServicePatchWorkloadWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadServicePatchWorkload(ctx context.Context, projectName string, resourceId string, body WorkloadServicePatchWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadServiceUpdateWorkloadWithBody request with any body
	WorkloadServiceUpdateWorkloadWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadServiceUpdateWorkload(ctx context.Context, projectName string, resourceId string, body WorkloadServiceUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadMemberServiceListWorkloadMembers request
	WorkloadMemberServiceListWorkloadMembers(ctx context.Context, projectName string, resourceId string, params *WorkloadMemberServiceListWorkloadMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadMemberServiceCreateWorkloadMemberWithBody request with any body
	WorkloadMemberServiceCreateWorkloadMemberWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadMemberServiceCreateWorkloadMember(ctx context.Context, projectName string, resourceId string, body WorkloadMemberServiceCreateWorkloadMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadMemberServiceDeleteWorkloadMember request
	WorkloadMemberServiceDeleteWorkloadMember(ctx context.Context, projectName string, workloadResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadMemberServiceGetWorkloadMember request
	WorkloadMemberServiceGetWorkloadMember(ctx context.Context, projectName string, workloadResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomConfigServiceListCustomConfigs request
	CustomConfigServiceListCustomConfigs(ctx context.Context, projectName string, params *CustomConfigServiceListCustomConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomConfigServiceCreateCustomConfigWithBody request with any body
	CustomConfigServiceCreateCustomConfigWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomConfigServiceCreateCustomConfig(ctx context.Context, projectName string, body CustomConfigServiceCreateCustomConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomConfigServiceDeleteCustomConfig request
	CustomConfigServiceDeleteCustomConfig(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomConfigServiceGetCustomConfig request
	CustomConfigServiceGetCustomConfig(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocalAccountServiceListLocalAccounts request
	LocalAccountServiceListLocalAccounts(ctx context.Context, projectName string, params *LocalAccountServiceListLocalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocalAccountServiceCreateLocalAccountWithBody request with any body
	LocalAccountServiceCreateLocalAccountWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LocalAccountServiceCreateLocalAccount(ctx context.Context, projectName string, body LocalAccountServiceCreateLocalAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocalAccountServiceDeleteLocalAccount request
	LocalAccountServiceDeleteLocalAccount(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocalAccountServiceGetLocalAccount request
	LocalAccountServiceGetLocalAccount(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocationServiceListLocations request
	LocationServiceListLocations(ctx context.Context, projectName string, params *LocationServiceListLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OSUpdatePolicyListOSUpdatePolicy request
	OSUpdatePolicyListOSUpdatePolicy(ctx context.Context, projectName string, params *OSUpdatePolicyListOSUpdatePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OSUpdatePolicyCreateOSUpdatePolicyWithBody request with any body
	OSUpdatePolicyCreateOSUpdatePolicyWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OSUpdatePolicyCreateOSUpdatePolicy(ctx context.Context, projectName string, body OSUpdatePolicyCreateOSUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OSUpdatePolicyDeleteOSUpdatePolicy request
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OSUpdatePolicyGetOSUpdatePolicy request
	OSUpdatePolicyGetOSUpdatePolicy(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OSUpdateRunListOSUpdateRun request
	OSUpdateRunListOSUpdateRun(ctx context.Context, projectName string, params *OSUpdateRunListOSUpdateRunParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OSUpdateRunDeleteOSUpdateRun request
	OSUpdateRunDeleteOSUpdateRun(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OSUpdateRunGetOSUpdateRun request
	OSUpdateRunGetOSUpdateRun(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProviderServiceListProviders request
	ProviderServiceListProviders(ctx context.Context, projectName string, params *ProviderServiceListProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProviderServiceCreateProviderWithBody request with any body
	ProviderServiceCreateProviderWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProviderServiceCreateProvider(ctx context.Context, projectName string, body ProviderServiceCreateProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProviderServiceDeleteProvider request
	ProviderServiceDeleteProvider(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProviderServiceGetProvider request
	ProviderServiceGetProvider(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegionServiceListRegions request
	RegionServiceListRegions(ctx context.Context, projectName string, params *RegionServiceListRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegionServiceCreateRegionWithBody request with any body
	RegionServiceCreateRegionWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegionServiceCreateRegion(ctx context.Context, projectName string, body RegionServiceCreateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SiteServiceDeleteSite request
	SiteServiceDeleteSite(ctx context.Context, projectName string, regionResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SiteServiceGetSite request
	SiteServiceGetSite(ctx context.Context, projectName string, regionResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SiteServicePatchSiteWithBody request with any body
	SiteServicePatchSiteWithBody(ctx context.Context, projectName string, regionResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SiteServicePatchSite(ctx context.Context, projectName string, regionResourceId string, resourceId string, body SiteServicePatchSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SiteServiceUpdateSiteWithBody request with any body
	SiteServiceUpdateSiteWithBody(ctx context.Context, projectName string, regionResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SiteServiceUpdateSite(ctx context.Context, projectName string, regionResourceId string, resourceId string, body SiteServiceUpdateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegionServiceDeleteRegion request
	RegionServiceDeleteRegion(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegionServiceGetRegion request
	RegionServiceGetRegion(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegionServicePatchRegionWithBody request with any body
	RegionServicePatchRegionWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegionServicePatchRegion(ctx context.Context, projectName string, resourceId string, body RegionServicePatchRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegionServiceUpdateRegionWithBody request with any body
	RegionServiceUpdateRegionWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegionServiceUpdateRegion(ctx context.Context, projectName string, resourceId string, body RegionServiceUpdateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SiteServiceListSites request
	SiteServiceListSites(ctx context.Context, projectName string, resourceId string, params *SiteServiceListSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SiteServiceCreateSiteWithBody request with any body
	SiteServiceCreateSiteWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SiteServiceCreateSite(ctx context.Context, projectName string, resourceId string, body SiteServiceCreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceListRepeatedSchedules request
	ScheduleServiceListRepeatedSchedules(ctx context.Context, projectName string, params *ScheduleServiceListRepeatedSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceCreateRepeatedScheduleWithBody request with any body
	ScheduleServiceCreateRepeatedScheduleWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduleServiceCreateRepeatedSchedule(ctx context.Context, projectName string, body ScheduleServiceCreateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceDeleteRepeatedSchedule request
	ScheduleServiceDeleteRepeatedSchedule(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceGetRepeatedSchedule request
	ScheduleServiceGetRepeatedSchedule(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServicePatchRepeatedScheduleWithBody request with any body
	ScheduleServicePatchRepeatedScheduleWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduleServicePatchRepeatedSchedule(ctx context.Context, projectName string, resourceId string, body ScheduleServicePatchRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceUpdateRepeatedScheduleWithBody request with any body
	ScheduleServiceUpdateRepeatedScheduleWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduleServiceUpdateRepeatedSchedule(ctx context.Context, projectName string, resourceId string, body ScheduleServiceUpdateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceListSingleSchedules request
	ScheduleServiceListSingleSchedules(ctx context.Context, projectName string, params *ScheduleServiceListSingleSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceCreateSingleScheduleWithBody request with any body
	ScheduleServiceCreateSingleScheduleWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduleServiceCreateSingleSchedule(ctx context.Context, projectName string, body ScheduleServiceCreateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceDeleteSingleSchedule request
	ScheduleServiceDeleteSingleSchedule(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceGetSingleSchedule request
	ScheduleServiceGetSingleSchedule(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServicePatchSingleScheduleWithBody request with any body
	ScheduleServicePatchSingleScheduleWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduleServicePatchSingleSchedule(ctx context.Context, projectName string, resourceId string, body ScheduleServicePatchSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleServiceUpdateSingleScheduleWithBody request with any body
	ScheduleServiceUpdateSingleScheduleWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduleServiceUpdateSingleSchedule(ctx context.Context, projectName string, resourceId string, body ScheduleServiceUpdateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryLogsGroupServiceListTelemetryLogsGroups request
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx context.Context, projectName string, params *TelemetryLogsGroupServiceListTelemetryLogsGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody request with any body
	TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx context.Context, projectName string, body TelemetryLogsGroupServiceCreateTelemetryLogsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile request
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryLogsProfileServiceGetTelemetryLogsProfile request
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody request with any body
	TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, body TelemetryLogsProfileServicePatchTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody request with any body
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, body TelemetryLogsProfileServiceUpdateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup request
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryLogsGroupServiceGetTelemetryLogsGroup request
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryLogsProfileServiceListTelemetryLogsProfiles request
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx context.Context, projectName string, resourceId string, params *TelemetryLogsProfileServiceListTelemetryLogsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody request with any body
	TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx context.Context, projectName string, resourceId string, body TelemetryLogsProfileServiceCreateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryMetricsGroupServiceListTelemetryMetricsGroups request
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx context.Context, projectName string, params *TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody request with any body
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx context.Context, projectName string, body TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile request
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile request
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody request with any body
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, body TelemetryMetricsProfileServicePatchTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody request with any body
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, body TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup request
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup request
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles request
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx context.Context, projectName string, resourceId string, params *TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody request with any body
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx context.Context, projectName string, resourceId string, body TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) HostServiceListHosts(ctx context.Context, projectName string, params *HostServiceListHostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceListHostsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceCreateHostWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceCreateHostRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceCreateHost(ctx context.Context, projectName string, body HostServiceCreateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceCreateHostRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceRegisterHostWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceRegisterHostRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceRegisterHost(ctx context.Context, projectName string, body HostServiceRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceRegisterHostRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceGetHostsSummary(ctx context.Context, projectName string, params *HostServiceGetHostsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceGetHostsSummaryRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceDeleteHost(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceDeleteHostRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceGetHost(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceGetHostRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServicePatchHostWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServicePatchHostRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServicePatchHost(ctx context.Context, projectName string, resourceId string, body HostServicePatchHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServicePatchHostRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceUpdateHostWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceUpdateHostRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceUpdateHost(ctx context.Context, projectName string, resourceId string, body HostServiceUpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceUpdateHostRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceInvalidateHost(ctx context.Context, projectName string, resourceId string, params *HostServiceInvalidateHostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceInvalidateHostRequest(c.Server, projectName, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServiceOnboardHost(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServiceOnboardHostRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServicePatchRegisterHostWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServicePatchRegisterHostRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HostServicePatchRegisterHost(ctx context.Context, projectName string, resourceId string, body HostServicePatchRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHostServicePatchRegisterHostRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceServiceListInstances(ctx context.Context, projectName string, params *InstanceServiceListInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceServiceListInstancesRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceServiceCreateInstanceWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceServiceCreateInstanceRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceServiceCreateInstance(ctx context.Context, projectName string, body InstanceServiceCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceServiceCreateInstanceRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceServiceDeleteInstance(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceServiceDeleteInstanceRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceServiceGetInstance(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceServiceGetInstanceRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceServicePatchInstanceWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceServicePatchInstanceRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceServicePatchInstance(ctx context.Context, projectName string, resourceId string, body InstanceServicePatchInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceServicePatchInstanceRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceServiceUpdateInstanceWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceServiceUpdateInstanceRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceServiceUpdateInstance(ctx context.Context, projectName string, resourceId string, body InstanceServiceUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceServiceUpdateInstanceRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceServiceInvalidateInstance(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceServiceInvalidateInstanceRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperatingSystemServiceListOperatingSystems(ctx context.Context, projectName string, params *OperatingSystemServiceListOperatingSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperatingSystemServiceListOperatingSystemsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperatingSystemServiceCreateOperatingSystemWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperatingSystemServiceCreateOperatingSystemRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperatingSystemServiceCreateOperatingSystem(ctx context.Context, projectName string, body OperatingSystemServiceCreateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperatingSystemServiceCreateOperatingSystemRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperatingSystemServiceDeleteOperatingSystem(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperatingSystemServiceDeleteOperatingSystemRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperatingSystemServiceGetOperatingSystem(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperatingSystemServiceGetOperatingSystemRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperatingSystemServicePatchOperatingSystemWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperatingSystemServicePatchOperatingSystemRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperatingSystemServicePatchOperatingSystem(ctx context.Context, projectName string, resourceId string, body OperatingSystemServicePatchOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperatingSystemServicePatchOperatingSystemRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperatingSystemServiceUpdateOperatingSystemWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperatingSystemServiceUpdateOperatingSystemRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperatingSystemServiceUpdateOperatingSystem(ctx context.Context, projectName string, resourceId string, body OperatingSystemServiceUpdateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperatingSystemServiceUpdateOperatingSystemRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceListSchedules(ctx context.Context, projectName string, params *ScheduleServiceListSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceListSchedulesRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadServiceListWorkloads(ctx context.Context, projectName string, params *WorkloadServiceListWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadServiceListWorkloadsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadServiceCreateWorkloadWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadServiceCreateWorkloadRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadServiceCreateWorkload(ctx context.Context, projectName string, body WorkloadServiceCreateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadServiceCreateWorkloadRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadServiceDeleteWorkload(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadServiceDeleteWorkloadRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadServiceGetWorkload(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadServiceGetWorkloadRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadServicePatchWorkloadWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadServicePatchWorkloadRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadServicePatchWorkload(ctx context.Context, projectName string, resourceId string, body WorkloadServicePatchWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadServicePatchWorkloadRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadServiceUpdateWorkloadWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadServiceUpdateWorkloadRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadServiceUpdateWorkload(ctx context.Context, projectName string, resourceId string, body WorkloadServiceUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadServiceUpdateWorkloadRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadMemberServiceListWorkloadMembers(ctx context.Context, projectName string, resourceId string, params *WorkloadMemberServiceListWorkloadMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadMemberServiceListWorkloadMembersRequest(c.Server, projectName, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadMemberServiceCreateWorkloadMemberWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadMemberServiceCreateWorkloadMemberRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadMemberServiceCreateWorkloadMember(ctx context.Context, projectName string, resourceId string, body WorkloadMemberServiceCreateWorkloadMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadMemberServiceCreateWorkloadMemberRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadMemberServiceDeleteWorkloadMember(ctx context.Context, projectName string, workloadResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadMemberServiceDeleteWorkloadMemberRequest(c.Server, projectName, workloadResourceId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadMemberServiceGetWorkloadMember(ctx context.Context, projectName string, workloadResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadMemberServiceGetWorkloadMemberRequest(c.Server, projectName, workloadResourceId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomConfigServiceListCustomConfigs(ctx context.Context, projectName string, params *CustomConfigServiceListCustomConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomConfigServiceListCustomConfigsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomConfigServiceCreateCustomConfigWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomConfigServiceCreateCustomConfigRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomConfigServiceCreateCustomConfig(ctx context.Context, projectName string, body CustomConfigServiceCreateCustomConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomConfigServiceCreateCustomConfigRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomConfigServiceDeleteCustomConfig(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomConfigServiceDeleteCustomConfigRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomConfigServiceGetCustomConfig(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomConfigServiceGetCustomConfigRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocalAccountServiceListLocalAccounts(ctx context.Context, projectName string, params *LocalAccountServiceListLocalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocalAccountServiceListLocalAccountsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocalAccountServiceCreateLocalAccountWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocalAccountServiceCreateLocalAccountRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocalAccountServiceCreateLocalAccount(ctx context.Context, projectName string, body LocalAccountServiceCreateLocalAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocalAccountServiceCreateLocalAccountRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocalAccountServiceDeleteLocalAccount(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocalAccountServiceDeleteLocalAccountRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocalAccountServiceGetLocalAccount(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocalAccountServiceGetLocalAccountRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocationServiceListLocations(ctx context.Context, projectName string, params *LocationServiceListLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocationServiceListLocationsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OSUpdatePolicyListOSUpdatePolicy(ctx context.Context, projectName string, params *OSUpdatePolicyListOSUpdatePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOSUpdatePolicyListOSUpdatePolicyRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OSUpdatePolicyCreateOSUpdatePolicyWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOSUpdatePolicyCreateOSUpdatePolicyRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OSUpdatePolicyCreateOSUpdatePolicy(ctx context.Context, projectName string, body OSUpdatePolicyCreateOSUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOSUpdatePolicyCreateOSUpdatePolicyRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OSUpdatePolicyDeleteOSUpdatePolicy(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOSUpdatePolicyDeleteOSUpdatePolicyRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OSUpdatePolicyGetOSUpdatePolicy(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOSUpdatePolicyGetOSUpdatePolicyRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OSUpdateRunListOSUpdateRun(ctx context.Context, projectName string, params *OSUpdateRunListOSUpdateRunParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOSUpdateRunListOSUpdateRunRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OSUpdateRunDeleteOSUpdateRun(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOSUpdateRunDeleteOSUpdateRunRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OSUpdateRunGetOSUpdateRun(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOSUpdateRunGetOSUpdateRunRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProviderServiceListProviders(ctx context.Context, projectName string, params *ProviderServiceListProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProviderServiceListProvidersRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProviderServiceCreateProviderWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProviderServiceCreateProviderRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProviderServiceCreateProvider(ctx context.Context, projectName string, body ProviderServiceCreateProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProviderServiceCreateProviderRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProviderServiceDeleteProvider(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProviderServiceDeleteProviderRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProviderServiceGetProvider(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProviderServiceGetProviderRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegionServiceListRegions(ctx context.Context, projectName string, params *RegionServiceListRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegionServiceListRegionsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegionServiceCreateRegionWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegionServiceCreateRegionRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegionServiceCreateRegion(ctx context.Context, projectName string, body RegionServiceCreateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegionServiceCreateRegionRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiteServiceDeleteSite(ctx context.Context, projectName string, regionResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiteServiceDeleteSiteRequest(c.Server, projectName, regionResourceId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiteServiceGetSite(ctx context.Context, projectName string, regionResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiteServiceGetSiteRequest(c.Server, projectName, regionResourceId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiteServicePatchSiteWithBody(ctx context.Context, projectName string, regionResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiteServicePatchSiteRequestWithBody(c.Server, projectName, regionResourceId, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiteServicePatchSite(ctx context.Context, projectName string, regionResourceId string, resourceId string, body SiteServicePatchSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiteServicePatchSiteRequest(c.Server, projectName, regionResourceId, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiteServiceUpdateSiteWithBody(ctx context.Context, projectName string, regionResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiteServiceUpdateSiteRequestWithBody(c.Server, projectName, regionResourceId, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiteServiceUpdateSite(ctx context.Context, projectName string, regionResourceId string, resourceId string, body SiteServiceUpdateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiteServiceUpdateSiteRequest(c.Server, projectName, regionResourceId, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegionServiceDeleteRegion(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegionServiceDeleteRegionRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegionServiceGetRegion(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegionServiceGetRegionRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegionServicePatchRegionWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegionServicePatchRegionRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegionServicePatchRegion(ctx context.Context, projectName string, resourceId string, body RegionServicePatchRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegionServicePatchRegionRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegionServiceUpdateRegionWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegionServiceUpdateRegionRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegionServiceUpdateRegion(ctx context.Context, projectName string, resourceId string, body RegionServiceUpdateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegionServiceUpdateRegionRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiteServiceListSites(ctx context.Context, projectName string, resourceId string, params *SiteServiceListSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiteServiceListSitesRequest(c.Server, projectName, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiteServiceCreateSiteWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiteServiceCreateSiteRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiteServiceCreateSite(ctx context.Context, projectName string, resourceId string, body SiteServiceCreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiteServiceCreateSiteRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceListRepeatedSchedules(ctx context.Context, projectName string, params *ScheduleServiceListRepeatedSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceListRepeatedSchedulesRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceCreateRepeatedScheduleWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceCreateRepeatedScheduleRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceCreateRepeatedSchedule(ctx context.Context, projectName string, body ScheduleServiceCreateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceCreateRepeatedScheduleRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceDeleteRepeatedSchedule(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceDeleteRepeatedScheduleRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceGetRepeatedSchedule(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceGetRepeatedScheduleRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServicePatchRepeatedScheduleWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServicePatchRepeatedScheduleRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServicePatchRepeatedSchedule(ctx context.Context, projectName string, resourceId string, body ScheduleServicePatchRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServicePatchRepeatedScheduleRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceUpdateRepeatedScheduleWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceUpdateRepeatedScheduleRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceUpdateRepeatedSchedule(ctx context.Context, projectName string, resourceId string, body ScheduleServiceUpdateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceUpdateRepeatedScheduleRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceListSingleSchedules(ctx context.Context, projectName string, params *ScheduleServiceListSingleSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceListSingleSchedulesRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceCreateSingleScheduleWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceCreateSingleScheduleRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceCreateSingleSchedule(ctx context.Context, projectName string, body ScheduleServiceCreateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceCreateSingleScheduleRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceDeleteSingleSchedule(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceDeleteSingleScheduleRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceGetSingleSchedule(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceGetSingleScheduleRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServicePatchSingleScheduleWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServicePatchSingleScheduleRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServicePatchSingleSchedule(ctx context.Context, projectName string, resourceId string, body ScheduleServicePatchSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServicePatchSingleScheduleRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceUpdateSingleScheduleWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceUpdateSingleScheduleRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleServiceUpdateSingleSchedule(ctx context.Context, projectName string, resourceId string, body ScheduleServiceUpdateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleServiceUpdateSingleScheduleRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx context.Context, projectName string, params *TelemetryLogsGroupServiceListTelemetryLogsGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsGroupServiceListTelemetryLogsGroupsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsGroupServiceCreateTelemetryLogsGroupRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx context.Context, projectName string, body TelemetryLogsGroupServiceCreateTelemetryLogsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsGroupServiceCreateTelemetryLogsGroupRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsProfileServiceDeleteTelemetryLogsProfileRequest(c.Server, projectName, loggroupResourceId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsProfileServiceGetTelemetryLogsProfileRequest(c.Server, projectName, loggroupResourceId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsProfileServicePatchTelemetryLogsProfileRequestWithBody(c.Server, projectName, loggroupResourceId, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, body TelemetryLogsProfileServicePatchTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsProfileServicePatchTelemetryLogsProfileRequest(c.Server, projectName, loggroupResourceId, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsProfileServiceUpdateTelemetryLogsProfileRequestWithBody(c.Server, projectName, loggroupResourceId, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, body TelemetryLogsProfileServiceUpdateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsProfileServiceUpdateTelemetryLogsProfileRequest(c.Server, projectName, loggroupResourceId, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsGroupServiceDeleteTelemetryLogsGroupRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsGroupServiceGetTelemetryLogsGroupRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx context.Context, projectName string, resourceId string, params *TelemetryLogsProfileServiceListTelemetryLogsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsProfileServiceListTelemetryLogsProfilesRequest(c.Server, projectName, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsProfileServiceCreateTelemetryLogsProfileRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx context.Context, projectName string, resourceId string, body TelemetryLogsProfileServiceCreateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryLogsProfileServiceCreateTelemetryLogsProfileRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx context.Context, projectName string, params *TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsGroupServiceListTelemetryMetricsGroupsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx context.Context, projectName string, body TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileRequest(c.Server, projectName, metricgroupResourceId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsProfileServiceGetTelemetryMetricsProfileRequest(c.Server, projectName, metricgroupResourceId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsProfileServicePatchTelemetryMetricsProfileRequestWithBody(c.Server, projectName, metricgroupResourceId, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, body TelemetryMetricsProfileServicePatchTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsProfileServicePatchTelemetryMetricsProfileRequest(c.Server, projectName, metricgroupResourceId, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileRequestWithBody(c.Server, projectName, metricgroupResourceId, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, body TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileRequest(c.Server, projectName, metricgroupResourceId, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsGroupServiceGetTelemetryMetricsGroupRequest(c.Server, projectName, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx context.Context, projectName string, resourceId string, params *TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsProfileServiceListTelemetryMetricsProfilesRequest(c.Server, projectName, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileRequestWithBody(c.Server, projectName, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx context.Context, projectName string, resourceId string, body TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileRequest(c.Server, projectName, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewHostServiceListHostsRequest generates requests for HostServiceListHosts
func NewHostServiceListHostsRequest(server string, projectName string, params *HostServiceListHostsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHostServiceCreateHostRequest calls the generic HostServiceCreateHost builder with application/json body
func NewHostServiceCreateHostRequest(server string, projectName string, body HostServiceCreateHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHostServiceCreateHostRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewHostServiceCreateHostRequestWithBody generates requests for HostServiceCreateHost with any type of body
func NewHostServiceCreateHostRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHostServiceRegisterHostRequest calls the generic HostServiceRegisterHost builder with application/json body
func NewHostServiceRegisterHostRequest(server string, projectName string, body HostServiceRegisterHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHostServiceRegisterHostRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewHostServiceRegisterHostRequestWithBody generates requests for HostServiceRegisterHost with any type of body
func NewHostServiceRegisterHostRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/register", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHostServiceGetHostsSummaryRequest generates requests for HostServiceGetHostsSummary
func NewHostServiceGetHostsSummaryRequest(server string, projectName string, params *HostServiceGetHostsSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHostServiceDeleteHostRequest generates requests for HostServiceDeleteHost
func NewHostServiceDeleteHostRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHostServiceGetHostRequest generates requests for HostServiceGetHost
func NewHostServiceGetHostRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHostServicePatchHostRequest calls the generic HostServicePatchHost builder with application/json body
func NewHostServicePatchHostRequest(server string, projectName string, resourceId string, body HostServicePatchHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHostServicePatchHostRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewHostServicePatchHostRequestWithBody generates requests for HostServicePatchHost with any type of body
func NewHostServicePatchHostRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHostServiceUpdateHostRequest calls the generic HostServiceUpdateHost builder with application/json body
func NewHostServiceUpdateHostRequest(server string, projectName string, resourceId string, body HostServiceUpdateHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHostServiceUpdateHostRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewHostServiceUpdateHostRequestWithBody generates requests for HostServiceUpdateHost with any type of body
func NewHostServiceUpdateHostRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHostServiceInvalidateHostRequest generates requests for HostServiceInvalidateHost
func NewHostServiceInvalidateHostRequest(server string, projectName string, resourceId string, params *HostServiceInvalidateHostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s/invalidate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Note != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "note", runtime.ParamLocationQuery, *params.Note); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHostServiceOnboardHostRequest generates requests for HostServiceOnboardHost
func NewHostServiceOnboardHostRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s/onboard", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHostServicePatchRegisterHostRequest calls the generic HostServicePatchRegisterHost builder with application/json body
func NewHostServicePatchRegisterHostRequest(server string, projectName string, resourceId string, body HostServicePatchRegisterHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHostServicePatchRegisterHostRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewHostServicePatchRegisterHostRequestWithBody generates requests for HostServicePatchRegisterHost with any type of body
func NewHostServicePatchRegisterHostRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s/register", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstanceServiceListInstancesRequest generates requests for InstanceServiceListInstances
func NewInstanceServiceListInstancesRequest(server string, projectName string, params *InstanceServiceListInstancesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceServiceCreateInstanceRequest calls the generic InstanceServiceCreateInstance builder with application/json body
func NewInstanceServiceCreateInstanceRequest(server string, projectName string, body InstanceServiceCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstanceServiceCreateInstanceRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewInstanceServiceCreateInstanceRequestWithBody generates requests for InstanceServiceCreateInstance with any type of body
func NewInstanceServiceCreateInstanceRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstanceServiceDeleteInstanceRequest generates requests for InstanceServiceDeleteInstance
func NewInstanceServiceDeleteInstanceRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceServiceGetInstanceRequest generates requests for InstanceServiceGetInstance
func NewInstanceServiceGetInstanceRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceServicePatchInstanceRequest calls the generic InstanceServicePatchInstance builder with application/json body
func NewInstanceServicePatchInstanceRequest(server string, projectName string, resourceId string, body InstanceServicePatchInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstanceServicePatchInstanceRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewInstanceServicePatchInstanceRequestWithBody generates requests for InstanceServicePatchInstance with any type of body
func NewInstanceServicePatchInstanceRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstanceServiceUpdateInstanceRequest calls the generic InstanceServiceUpdateInstance builder with application/json body
func NewInstanceServiceUpdateInstanceRequest(server string, projectName string, resourceId string, body InstanceServiceUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstanceServiceUpdateInstanceRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewInstanceServiceUpdateInstanceRequestWithBody generates requests for InstanceServiceUpdateInstance with any type of body
func NewInstanceServiceUpdateInstanceRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstanceServiceInvalidateInstanceRequest generates requests for InstanceServiceInvalidateInstance
func NewInstanceServiceInvalidateInstanceRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances/%s/invalidate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOperatingSystemServiceListOperatingSystemsRequest generates requests for OperatingSystemServiceListOperatingSystems
func NewOperatingSystemServiceListOperatingSystemsRequest(server string, projectName string, params *OperatingSystemServiceListOperatingSystemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOperatingSystemServiceCreateOperatingSystemRequest calls the generic OperatingSystemServiceCreateOperatingSystem builder with application/json body
func NewOperatingSystemServiceCreateOperatingSystemRequest(server string, projectName string, body OperatingSystemServiceCreateOperatingSystemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperatingSystemServiceCreateOperatingSystemRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewOperatingSystemServiceCreateOperatingSystemRequestWithBody generates requests for OperatingSystemServiceCreateOperatingSystem with any type of body
func NewOperatingSystemServiceCreateOperatingSystemRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperatingSystemServiceDeleteOperatingSystemRequest generates requests for OperatingSystemServiceDeleteOperatingSystem
func NewOperatingSystemServiceDeleteOperatingSystemRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOperatingSystemServiceGetOperatingSystemRequest generates requests for OperatingSystemServiceGetOperatingSystem
func NewOperatingSystemServiceGetOperatingSystemRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOperatingSystemServicePatchOperatingSystemRequest calls the generic OperatingSystemServicePatchOperatingSystem builder with application/json body
func NewOperatingSystemServicePatchOperatingSystemRequest(server string, projectName string, resourceId string, body OperatingSystemServicePatchOperatingSystemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperatingSystemServicePatchOperatingSystemRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewOperatingSystemServicePatchOperatingSystemRequestWithBody generates requests for OperatingSystemServicePatchOperatingSystem with any type of body
func NewOperatingSystemServicePatchOperatingSystemRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperatingSystemServiceUpdateOperatingSystemRequest calls the generic OperatingSystemServiceUpdateOperatingSystem builder with application/json body
func NewOperatingSystemServiceUpdateOperatingSystemRequest(server string, projectName string, resourceId string, body OperatingSystemServiceUpdateOperatingSystemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperatingSystemServiceUpdateOperatingSystemRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewOperatingSystemServiceUpdateOperatingSystemRequestWithBody generates requests for OperatingSystemServiceUpdateOperatingSystem with any type of body
func NewOperatingSystemServiceUpdateOperatingSystemRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduleServiceListSchedulesRequest generates requests for ScheduleServiceListSchedules
func NewScheduleServiceListSchedulesRequest(server string, projectName string, params *ScheduleServiceListSchedulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/schedules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostId", runtime.ParamLocationQuery, *params.HostId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteId", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionId", runtime.ParamLocationQuery, *params.RegionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnixEpoch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unixEpoch", runtime.ParamLocationQuery, *params.UnixEpoch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadServiceListWorkloadsRequest generates requests for WorkloadServiceListWorkloads
func NewWorkloadServiceListWorkloadsRequest(server string, projectName string, params *WorkloadServiceListWorkloadsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadServiceCreateWorkloadRequest calls the generic WorkloadServiceCreateWorkload builder with application/json body
func NewWorkloadServiceCreateWorkloadRequest(server string, projectName string, body WorkloadServiceCreateWorkloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadServiceCreateWorkloadRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewWorkloadServiceCreateWorkloadRequestWithBody generates requests for WorkloadServiceCreateWorkload with any type of body
func NewWorkloadServiceCreateWorkloadRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadServiceDeleteWorkloadRequest generates requests for WorkloadServiceDeleteWorkload
func NewWorkloadServiceDeleteWorkloadRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadServiceGetWorkloadRequest generates requests for WorkloadServiceGetWorkload
func NewWorkloadServiceGetWorkloadRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadServicePatchWorkloadRequest calls the generic WorkloadServicePatchWorkload builder with application/json body
func NewWorkloadServicePatchWorkloadRequest(server string, projectName string, resourceId string, body WorkloadServicePatchWorkloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadServicePatchWorkloadRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewWorkloadServicePatchWorkloadRequestWithBody generates requests for WorkloadServicePatchWorkload with any type of body
func NewWorkloadServicePatchWorkloadRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadServiceUpdateWorkloadRequest calls the generic WorkloadServiceUpdateWorkload builder with application/json body
func NewWorkloadServiceUpdateWorkloadRequest(server string, projectName string, resourceId string, body WorkloadServiceUpdateWorkloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadServiceUpdateWorkloadRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewWorkloadServiceUpdateWorkloadRequestWithBody generates requests for WorkloadServiceUpdateWorkload with any type of body
func NewWorkloadServiceUpdateWorkloadRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadMemberServiceListWorkloadMembersRequest generates requests for WorkloadMemberServiceListWorkloadMembers
func NewWorkloadMemberServiceListWorkloadMembersRequest(server string, projectName string, resourceId string, params *WorkloadMemberServiceListWorkloadMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadMemberServiceCreateWorkloadMemberRequest calls the generic WorkloadMemberServiceCreateWorkloadMember builder with application/json body
func NewWorkloadMemberServiceCreateWorkloadMemberRequest(server string, projectName string, resourceId string, body WorkloadMemberServiceCreateWorkloadMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadMemberServiceCreateWorkloadMemberRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewWorkloadMemberServiceCreateWorkloadMemberRequestWithBody generates requests for WorkloadMemberServiceCreateWorkloadMember with any type of body
func NewWorkloadMemberServiceCreateWorkloadMemberRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadMemberServiceDeleteWorkloadMemberRequest generates requests for WorkloadMemberServiceDeleteWorkloadMember
func NewWorkloadMemberServiceDeleteWorkloadMemberRequest(server string, projectName string, workloadResourceId string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadResourceId", runtime.ParamLocationPath, workloadResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadMemberServiceGetWorkloadMemberRequest generates requests for WorkloadMemberServiceGetWorkloadMember
func NewWorkloadMemberServiceGetWorkloadMemberRequest(server string, projectName string, workloadResourceId string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadResourceId", runtime.ParamLocationPath, workloadResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomConfigServiceListCustomConfigsRequest generates requests for CustomConfigServiceListCustomConfigs
func NewCustomConfigServiceListCustomConfigsRequest(server string, projectName string, params *CustomConfigServiceListCustomConfigsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/customConfigs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomConfigServiceCreateCustomConfigRequest calls the generic CustomConfigServiceCreateCustomConfig builder with application/json body
func NewCustomConfigServiceCreateCustomConfigRequest(server string, projectName string, body CustomConfigServiceCreateCustomConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomConfigServiceCreateCustomConfigRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewCustomConfigServiceCreateCustomConfigRequestWithBody generates requests for CustomConfigServiceCreateCustomConfig with any type of body
func NewCustomConfigServiceCreateCustomConfigRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/customConfigs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomConfigServiceDeleteCustomConfigRequest generates requests for CustomConfigServiceDeleteCustomConfig
func NewCustomConfigServiceDeleteCustomConfigRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/customConfigs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomConfigServiceGetCustomConfigRequest generates requests for CustomConfigServiceGetCustomConfig
func NewCustomConfigServiceGetCustomConfigRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/customConfigs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocalAccountServiceListLocalAccountsRequest generates requests for LocalAccountServiceListLocalAccounts
func NewLocalAccountServiceListLocalAccountsRequest(server string, projectName string, params *LocalAccountServiceListLocalAccountsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/localAccounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocalAccountServiceCreateLocalAccountRequest calls the generic LocalAccountServiceCreateLocalAccount builder with application/json body
func NewLocalAccountServiceCreateLocalAccountRequest(server string, projectName string, body LocalAccountServiceCreateLocalAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLocalAccountServiceCreateLocalAccountRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewLocalAccountServiceCreateLocalAccountRequestWithBody generates requests for LocalAccountServiceCreateLocalAccount with any type of body
func NewLocalAccountServiceCreateLocalAccountRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/localAccounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLocalAccountServiceDeleteLocalAccountRequest generates requests for LocalAccountServiceDeleteLocalAccount
func NewLocalAccountServiceDeleteLocalAccountRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/localAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocalAccountServiceGetLocalAccountRequest generates requests for LocalAccountServiceGetLocalAccount
func NewLocalAccountServiceGetLocalAccountRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/localAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocationServiceListLocationsRequest generates requests for LocationServiceListLocations
func NewLocationServiceListLocationsRequest(server string, projectName string, params *LocationServiceListLocationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/locations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowSites != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showSites", runtime.ParamLocationQuery, *params.ShowSites); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowRegions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showRegions", runtime.ParamLocationQuery, *params.ShowRegions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOSUpdatePolicyListOSUpdatePolicyRequest generates requests for OSUpdatePolicyListOSUpdatePolicy
func NewOSUpdatePolicyListOSUpdatePolicyRequest(server string, projectName string, params *OSUpdatePolicyListOSUpdatePolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/os-update-policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOSUpdatePolicyCreateOSUpdatePolicyRequest calls the generic OSUpdatePolicyCreateOSUpdatePolicy builder with application/json body
func NewOSUpdatePolicyCreateOSUpdatePolicyRequest(server string, projectName string, body OSUpdatePolicyCreateOSUpdatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOSUpdatePolicyCreateOSUpdatePolicyRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewOSUpdatePolicyCreateOSUpdatePolicyRequestWithBody generates requests for OSUpdatePolicyCreateOSUpdatePolicy with any type of body
func NewOSUpdatePolicyCreateOSUpdatePolicyRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/os-update-policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOSUpdatePolicyDeleteOSUpdatePolicyRequest generates requests for OSUpdatePolicyDeleteOSUpdatePolicy
func NewOSUpdatePolicyDeleteOSUpdatePolicyRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/os-update-policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOSUpdatePolicyGetOSUpdatePolicyRequest generates requests for OSUpdatePolicyGetOSUpdatePolicy
func NewOSUpdatePolicyGetOSUpdatePolicyRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/os-update-policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOSUpdateRunListOSUpdateRunRequest generates requests for OSUpdateRunListOSUpdateRun
func NewOSUpdateRunListOSUpdateRunRequest(server string, projectName string, params *OSUpdateRunListOSUpdateRunParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/os-update-runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOSUpdateRunDeleteOSUpdateRunRequest generates requests for OSUpdateRunDeleteOSUpdateRun
func NewOSUpdateRunDeleteOSUpdateRunRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/os-update-runs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOSUpdateRunGetOSUpdateRunRequest generates requests for OSUpdateRunGetOSUpdateRun
func NewOSUpdateRunGetOSUpdateRunRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/os-update-runs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProviderServiceListProvidersRequest generates requests for ProviderServiceListProviders
func NewProviderServiceListProvidersRequest(server string, projectName string, params *ProviderServiceListProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProviderServiceCreateProviderRequest calls the generic ProviderServiceCreateProvider builder with application/json body
func NewProviderServiceCreateProviderRequest(server string, projectName string, body ProviderServiceCreateProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProviderServiceCreateProviderRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewProviderServiceCreateProviderRequestWithBody generates requests for ProviderServiceCreateProvider with any type of body
func NewProviderServiceCreateProviderRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProviderServiceDeleteProviderRequest generates requests for ProviderServiceDeleteProvider
func NewProviderServiceDeleteProviderRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/providers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProviderServiceGetProviderRequest generates requests for ProviderServiceGetProvider
func NewProviderServiceGetProviderRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/providers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegionServiceListRegionsRequest generates requests for RegionServiceListRegions
func NewRegionServiceListRegionsRequest(server string, projectName string, params *RegionServiceListRegionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowTotalSites != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showTotalSites", runtime.ParamLocationQuery, *params.ShowTotalSites); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegionServiceCreateRegionRequest calls the generic RegionServiceCreateRegion builder with application/json body
func NewRegionServiceCreateRegionRequest(server string, projectName string, body RegionServiceCreateRegionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegionServiceCreateRegionRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewRegionServiceCreateRegionRequestWithBody generates requests for RegionServiceCreateRegion with any type of body
func NewRegionServiceCreateRegionRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSiteServiceDeleteSiteRequest generates requests for SiteServiceDeleteSite
func NewSiteServiceDeleteSiteRequest(server string, projectName string, regionResourceId string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionResourceId", runtime.ParamLocationPath, regionResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSiteServiceGetSiteRequest generates requests for SiteServiceGetSite
func NewSiteServiceGetSiteRequest(server string, projectName string, regionResourceId string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionResourceId", runtime.ParamLocationPath, regionResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSiteServicePatchSiteRequest calls the generic SiteServicePatchSite builder with application/json body
func NewSiteServicePatchSiteRequest(server string, projectName string, regionResourceId string, resourceId string, body SiteServicePatchSiteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSiteServicePatchSiteRequestWithBody(server, projectName, regionResourceId, resourceId, "application/json", bodyReader)
}

// NewSiteServicePatchSiteRequestWithBody generates requests for SiteServicePatchSite with any type of body
func NewSiteServicePatchSiteRequestWithBody(server string, projectName string, regionResourceId string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionResourceId", runtime.ParamLocationPath, regionResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSiteServiceUpdateSiteRequest calls the generic SiteServiceUpdateSite builder with application/json body
func NewSiteServiceUpdateSiteRequest(server string, projectName string, regionResourceId string, resourceId string, body SiteServiceUpdateSiteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSiteServiceUpdateSiteRequestWithBody(server, projectName, regionResourceId, resourceId, "application/json", bodyReader)
}

// NewSiteServiceUpdateSiteRequestWithBody generates requests for SiteServiceUpdateSite with any type of body
func NewSiteServiceUpdateSiteRequestWithBody(server string, projectName string, regionResourceId string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionResourceId", runtime.ParamLocationPath, regionResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegionServiceDeleteRegionRequest generates requests for RegionServiceDeleteRegion
func NewRegionServiceDeleteRegionRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegionServiceGetRegionRequest generates requests for RegionServiceGetRegion
func NewRegionServiceGetRegionRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegionServicePatchRegionRequest calls the generic RegionServicePatchRegion builder with application/json body
func NewRegionServicePatchRegionRequest(server string, projectName string, resourceId string, body RegionServicePatchRegionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegionServicePatchRegionRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewRegionServicePatchRegionRequestWithBody generates requests for RegionServicePatchRegion with any type of body
func NewRegionServicePatchRegionRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegionServiceUpdateRegionRequest calls the generic RegionServiceUpdateRegion builder with application/json body
func NewRegionServiceUpdateRegionRequest(server string, projectName string, resourceId string, body RegionServiceUpdateRegionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegionServiceUpdateRegionRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewRegionServiceUpdateRegionRequestWithBody generates requests for RegionServiceUpdateRegion with any type of body
func NewRegionServiceUpdateRegionRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSiteServiceListSitesRequest generates requests for SiteServiceListSites
func NewSiteServiceListSitesRequest(server string, projectName string, resourceId string, params *SiteServiceListSitesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSiteServiceCreateSiteRequest calls the generic SiteServiceCreateSite builder with application/json body
func NewSiteServiceCreateSiteRequest(server string, projectName string, resourceId string, body SiteServiceCreateSiteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSiteServiceCreateSiteRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewSiteServiceCreateSiteRequestWithBody generates requests for SiteServiceCreateSite with any type of body
func NewSiteServiceCreateSiteRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduleServiceListRepeatedSchedulesRequest generates requests for ScheduleServiceListRepeatedSchedules
func NewScheduleServiceListRepeatedSchedulesRequest(server string, projectName string, params *ScheduleServiceListRepeatedSchedulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostId", runtime.ParamLocationQuery, *params.HostId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteId", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionId", runtime.ParamLocationQuery, *params.RegionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnixEpoch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unixEpoch", runtime.ParamLocationQuery, *params.UnixEpoch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduleServiceCreateRepeatedScheduleRequest calls the generic ScheduleServiceCreateRepeatedSchedule builder with application/json body
func NewScheduleServiceCreateRepeatedScheduleRequest(server string, projectName string, body ScheduleServiceCreateRepeatedScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduleServiceCreateRepeatedScheduleRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewScheduleServiceCreateRepeatedScheduleRequestWithBody generates requests for ScheduleServiceCreateRepeatedSchedule with any type of body
func NewScheduleServiceCreateRepeatedScheduleRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduleServiceDeleteRepeatedScheduleRequest generates requests for ScheduleServiceDeleteRepeatedSchedule
func NewScheduleServiceDeleteRepeatedScheduleRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduleServiceGetRepeatedScheduleRequest generates requests for ScheduleServiceGetRepeatedSchedule
func NewScheduleServiceGetRepeatedScheduleRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduleServicePatchRepeatedScheduleRequest calls the generic ScheduleServicePatchRepeatedSchedule builder with application/json body
func NewScheduleServicePatchRepeatedScheduleRequest(server string, projectName string, resourceId string, body ScheduleServicePatchRepeatedScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduleServicePatchRepeatedScheduleRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewScheduleServicePatchRepeatedScheduleRequestWithBody generates requests for ScheduleServicePatchRepeatedSchedule with any type of body
func NewScheduleServicePatchRepeatedScheduleRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduleServiceUpdateRepeatedScheduleRequest calls the generic ScheduleServiceUpdateRepeatedSchedule builder with application/json body
func NewScheduleServiceUpdateRepeatedScheduleRequest(server string, projectName string, resourceId string, body ScheduleServiceUpdateRepeatedScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduleServiceUpdateRepeatedScheduleRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewScheduleServiceUpdateRepeatedScheduleRequestWithBody generates requests for ScheduleServiceUpdateRepeatedSchedule with any type of body
func NewScheduleServiceUpdateRepeatedScheduleRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduleServiceListSingleSchedulesRequest generates requests for ScheduleServiceListSingleSchedules
func NewScheduleServiceListSingleSchedulesRequest(server string, projectName string, params *ScheduleServiceListSingleSchedulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostId", runtime.ParamLocationQuery, *params.HostId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteId", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionId", runtime.ParamLocationQuery, *params.RegionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnixEpoch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unixEpoch", runtime.ParamLocationQuery, *params.UnixEpoch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduleServiceCreateSingleScheduleRequest calls the generic ScheduleServiceCreateSingleSchedule builder with application/json body
func NewScheduleServiceCreateSingleScheduleRequest(server string, projectName string, body ScheduleServiceCreateSingleScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduleServiceCreateSingleScheduleRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewScheduleServiceCreateSingleScheduleRequestWithBody generates requests for ScheduleServiceCreateSingleSchedule with any type of body
func NewScheduleServiceCreateSingleScheduleRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduleServiceDeleteSingleScheduleRequest generates requests for ScheduleServiceDeleteSingleSchedule
func NewScheduleServiceDeleteSingleScheduleRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduleServiceGetSingleScheduleRequest generates requests for ScheduleServiceGetSingleSchedule
func NewScheduleServiceGetSingleScheduleRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduleServicePatchSingleScheduleRequest calls the generic ScheduleServicePatchSingleSchedule builder with application/json body
func NewScheduleServicePatchSingleScheduleRequest(server string, projectName string, resourceId string, body ScheduleServicePatchSingleScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduleServicePatchSingleScheduleRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewScheduleServicePatchSingleScheduleRequestWithBody generates requests for ScheduleServicePatchSingleSchedule with any type of body
func NewScheduleServicePatchSingleScheduleRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduleServiceUpdateSingleScheduleRequest calls the generic ScheduleServiceUpdateSingleSchedule builder with application/json body
func NewScheduleServiceUpdateSingleScheduleRequest(server string, projectName string, resourceId string, body ScheduleServiceUpdateSingleScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduleServiceUpdateSingleScheduleRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewScheduleServiceUpdateSingleScheduleRequestWithBody generates requests for ScheduleServiceUpdateSingleSchedule with any type of body
func NewScheduleServiceUpdateSingleScheduleRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTelemetryLogsGroupServiceListTelemetryLogsGroupsRequest generates requests for TelemetryLogsGroupServiceListTelemetryLogsGroups
func NewTelemetryLogsGroupServiceListTelemetryLogsGroupsRequest(server string, projectName string, params *TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryLogsGroupServiceCreateTelemetryLogsGroupRequest calls the generic TelemetryLogsGroupServiceCreateTelemetryLogsGroup builder with application/json body
func NewTelemetryLogsGroupServiceCreateTelemetryLogsGroupRequest(server string, projectName string, body TelemetryLogsGroupServiceCreateTelemetryLogsGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTelemetryLogsGroupServiceCreateTelemetryLogsGroupRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewTelemetryLogsGroupServiceCreateTelemetryLogsGroupRequestWithBody generates requests for TelemetryLogsGroupServiceCreateTelemetryLogsGroup with any type of body
func NewTelemetryLogsGroupServiceCreateTelemetryLogsGroupRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTelemetryLogsProfileServiceDeleteTelemetryLogsProfileRequest generates requests for TelemetryLogsProfileServiceDeleteTelemetryLogsProfile
func NewTelemetryLogsProfileServiceDeleteTelemetryLogsProfileRequest(server string, projectName string, loggroupResourceId string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "loggroupResourceId", runtime.ParamLocationPath, loggroupResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryLogsProfileServiceGetTelemetryLogsProfileRequest generates requests for TelemetryLogsProfileServiceGetTelemetryLogsProfile
func NewTelemetryLogsProfileServiceGetTelemetryLogsProfileRequest(server string, projectName string, loggroupResourceId string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "loggroupResourceId", runtime.ParamLocationPath, loggroupResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryLogsProfileServicePatchTelemetryLogsProfileRequest calls the generic TelemetryLogsProfileServicePatchTelemetryLogsProfile builder with application/json body
func NewTelemetryLogsProfileServicePatchTelemetryLogsProfileRequest(server string, projectName string, loggroupResourceId string, resourceId string, body TelemetryLogsProfileServicePatchTelemetryLogsProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTelemetryLogsProfileServicePatchTelemetryLogsProfileRequestWithBody(server, projectName, loggroupResourceId, resourceId, "application/json", bodyReader)
}

// NewTelemetryLogsProfileServicePatchTelemetryLogsProfileRequestWithBody generates requests for TelemetryLogsProfileServicePatchTelemetryLogsProfile with any type of body
func NewTelemetryLogsProfileServicePatchTelemetryLogsProfileRequestWithBody(server string, projectName string, loggroupResourceId string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "loggroupResourceId", runtime.ParamLocationPath, loggroupResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTelemetryLogsProfileServiceUpdateTelemetryLogsProfileRequest calls the generic TelemetryLogsProfileServiceUpdateTelemetryLogsProfile builder with application/json body
func NewTelemetryLogsProfileServiceUpdateTelemetryLogsProfileRequest(server string, projectName string, loggroupResourceId string, resourceId string, body TelemetryLogsProfileServiceUpdateTelemetryLogsProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTelemetryLogsProfileServiceUpdateTelemetryLogsProfileRequestWithBody(server, projectName, loggroupResourceId, resourceId, "application/json", bodyReader)
}

// NewTelemetryLogsProfileServiceUpdateTelemetryLogsProfileRequestWithBody generates requests for TelemetryLogsProfileServiceUpdateTelemetryLogsProfile with any type of body
func NewTelemetryLogsProfileServiceUpdateTelemetryLogsProfileRequestWithBody(server string, projectName string, loggroupResourceId string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "loggroupResourceId", runtime.ParamLocationPath, loggroupResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTelemetryLogsGroupServiceDeleteTelemetryLogsGroupRequest generates requests for TelemetryLogsGroupServiceDeleteTelemetryLogsGroup
func NewTelemetryLogsGroupServiceDeleteTelemetryLogsGroupRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryLogsGroupServiceGetTelemetryLogsGroupRequest generates requests for TelemetryLogsGroupServiceGetTelemetryLogsGroup
func NewTelemetryLogsGroupServiceGetTelemetryLogsGroupRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryLogsProfileServiceListTelemetryLogsProfilesRequest generates requests for TelemetryLogsProfileServiceListTelemetryLogsProfiles
func NewTelemetryLogsProfileServiceListTelemetryLogsProfilesRequest(server string, projectName string, resourceId string, params *TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceId", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteId", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionId", runtime.ParamLocationQuery, *params.RegionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowInherited != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showInherited", runtime.ParamLocationQuery, *params.ShowInherited); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryLogsProfileServiceCreateTelemetryLogsProfileRequest calls the generic TelemetryLogsProfileServiceCreateTelemetryLogsProfile builder with application/json body
func NewTelemetryLogsProfileServiceCreateTelemetryLogsProfileRequest(server string, projectName string, resourceId string, body TelemetryLogsProfileServiceCreateTelemetryLogsProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTelemetryLogsProfileServiceCreateTelemetryLogsProfileRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewTelemetryLogsProfileServiceCreateTelemetryLogsProfileRequestWithBody generates requests for TelemetryLogsProfileServiceCreateTelemetryLogsProfile with any type of body
func NewTelemetryLogsProfileServiceCreateTelemetryLogsProfileRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTelemetryMetricsGroupServiceListTelemetryMetricsGroupsRequest generates requests for TelemetryMetricsGroupServiceListTelemetryMetricsGroups
func NewTelemetryMetricsGroupServiceListTelemetryMetricsGroupsRequest(server string, projectName string, params *TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupRequest calls the generic TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup builder with application/json body
func NewTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupRequest(server string, projectName string, body TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupRequestWithBody generates requests for TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup with any type of body
func NewTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileRequest generates requests for TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile
func NewTelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileRequest(server string, projectName string, metricgroupResourceId string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metricgroupResourceId", runtime.ParamLocationPath, metricgroupResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryMetricsProfileServiceGetTelemetryMetricsProfileRequest generates requests for TelemetryMetricsProfileServiceGetTelemetryMetricsProfile
func NewTelemetryMetricsProfileServiceGetTelemetryMetricsProfileRequest(server string, projectName string, metricgroupResourceId string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metricgroupResourceId", runtime.ParamLocationPath, metricgroupResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryMetricsProfileServicePatchTelemetryMetricsProfileRequest calls the generic TelemetryMetricsProfileServicePatchTelemetryMetricsProfile builder with application/json body
func NewTelemetryMetricsProfileServicePatchTelemetryMetricsProfileRequest(server string, projectName string, metricgroupResourceId string, resourceId string, body TelemetryMetricsProfileServicePatchTelemetryMetricsProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTelemetryMetricsProfileServicePatchTelemetryMetricsProfileRequestWithBody(server, projectName, metricgroupResourceId, resourceId, "application/json", bodyReader)
}

// NewTelemetryMetricsProfileServicePatchTelemetryMetricsProfileRequestWithBody generates requests for TelemetryMetricsProfileServicePatchTelemetryMetricsProfile with any type of body
func NewTelemetryMetricsProfileServicePatchTelemetryMetricsProfileRequestWithBody(server string, projectName string, metricgroupResourceId string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metricgroupResourceId", runtime.ParamLocationPath, metricgroupResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileRequest calls the generic TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile builder with application/json body
func NewTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileRequest(server string, projectName string, metricgroupResourceId string, resourceId string, body TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileRequestWithBody(server, projectName, metricgroupResourceId, resourceId, "application/json", bodyReader)
}

// NewTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileRequestWithBody generates requests for TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile with any type of body
func NewTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileRequestWithBody(server string, projectName string, metricgroupResourceId string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metricgroupResourceId", runtime.ParamLocationPath, metricgroupResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupRequest generates requests for TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup
func NewTelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryMetricsGroupServiceGetTelemetryMetricsGroupRequest generates requests for TelemetryMetricsGroupServiceGetTelemetryMetricsGroup
func NewTelemetryMetricsGroupServiceGetTelemetryMetricsGroupRequest(server string, projectName string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryMetricsProfileServiceListTelemetryMetricsProfilesRequest generates requests for TelemetryMetricsProfileServiceListTelemetryMetricsProfiles
func NewTelemetryMetricsProfileServiceListTelemetryMetricsProfilesRequest(server string, projectName string, resourceId string, params *TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceId", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteId", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionId", runtime.ParamLocationQuery, *params.RegionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowInherited != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showInherited", runtime.ParamLocationQuery, *params.ShowInherited); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileRequest calls the generic TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile builder with application/json body
func NewTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileRequest(server string, projectName string, resourceId string, body TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileRequestWithBody(server, projectName, resourceId, "application/json", bodyReader)
}

// NewTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileRequestWithBody generates requests for TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile with any type of body
func NewTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileRequestWithBody(server string, projectName string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// HostServiceListHostsWithResponse request
	HostServiceListHostsWithResponse(ctx context.Context, projectName string, params *HostServiceListHostsParams, reqEditors ...RequestEditorFn) (*HostServiceListHostsResponse, error)

	// HostServiceCreateHostWithBodyWithResponse request with any body
	HostServiceCreateHostWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServiceCreateHostResponse, error)

	HostServiceCreateHostWithResponse(ctx context.Context, projectName string, body HostServiceCreateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServiceCreateHostResponse, error)

	// HostServiceRegisterHostWithBodyWithResponse request with any body
	HostServiceRegisterHostWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServiceRegisterHostResponse, error)

	HostServiceRegisterHostWithResponse(ctx context.Context, projectName string, body HostServiceRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServiceRegisterHostResponse, error)

	// HostServiceGetHostsSummaryWithResponse request
	HostServiceGetHostsSummaryWithResponse(ctx context.Context, projectName string, params *HostServiceGetHostsSummaryParams, reqEditors ...RequestEditorFn) (*HostServiceGetHostsSummaryResponse, error)

	// HostServiceDeleteHostWithResponse request
	HostServiceDeleteHostWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*HostServiceDeleteHostResponse, error)

	// HostServiceGetHostWithResponse request
	HostServiceGetHostWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*HostServiceGetHostResponse, error)

	// HostServicePatchHostWithBodyWithResponse request with any body
	HostServicePatchHostWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServicePatchHostResponse, error)

	HostServicePatchHostWithResponse(ctx context.Context, projectName string, resourceId string, body HostServicePatchHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServicePatchHostResponse, error)

	// HostServiceUpdateHostWithBodyWithResponse request with any body
	HostServiceUpdateHostWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServiceUpdateHostResponse, error)

	HostServiceUpdateHostWithResponse(ctx context.Context, projectName string, resourceId string, body HostServiceUpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServiceUpdateHostResponse, error)

	// HostServiceInvalidateHostWithResponse request
	HostServiceInvalidateHostWithResponse(ctx context.Context, projectName string, resourceId string, params *HostServiceInvalidateHostParams, reqEditors ...RequestEditorFn) (*HostServiceInvalidateHostResponse, error)

	// HostServiceOnboardHostWithResponse request
	HostServiceOnboardHostWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*HostServiceOnboardHostResponse, error)

	// HostServicePatchRegisterHostWithBodyWithResponse request with any body
	HostServicePatchRegisterHostWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServicePatchRegisterHostResponse, error)

	HostServicePatchRegisterHostWithResponse(ctx context.Context, projectName string, resourceId string, body HostServicePatchRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServicePatchRegisterHostResponse, error)

	// InstanceServiceListInstancesWithResponse request
	InstanceServiceListInstancesWithResponse(ctx context.Context, projectName string, params *InstanceServiceListInstancesParams, reqEditors ...RequestEditorFn) (*InstanceServiceListInstancesResponse, error)

	// InstanceServiceCreateInstanceWithBodyWithResponse request with any body
	InstanceServiceCreateInstanceWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceServiceCreateInstanceResponse, error)

	InstanceServiceCreateInstanceWithResponse(ctx context.Context, projectName string, body InstanceServiceCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceServiceCreateInstanceResponse, error)

	// InstanceServiceDeleteInstanceWithResponse request
	InstanceServiceDeleteInstanceWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*InstanceServiceDeleteInstanceResponse, error)

	// InstanceServiceGetInstanceWithResponse request
	InstanceServiceGetInstanceWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*InstanceServiceGetInstanceResponse, error)

	// InstanceServicePatchInstanceWithBodyWithResponse request with any body
	InstanceServicePatchInstanceWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceServicePatchInstanceResponse, error)

	InstanceServicePatchInstanceWithResponse(ctx context.Context, projectName string, resourceId string, body InstanceServicePatchInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceServicePatchInstanceResponse, error)

	// InstanceServiceUpdateInstanceWithBodyWithResponse request with any body
	InstanceServiceUpdateInstanceWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceServiceUpdateInstanceResponse, error)

	InstanceServiceUpdateInstanceWithResponse(ctx context.Context, projectName string, resourceId string, body InstanceServiceUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceServiceUpdateInstanceResponse, error)

	// InstanceServiceInvalidateInstanceWithResponse request
	InstanceServiceInvalidateInstanceWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*InstanceServiceInvalidateInstanceResponse, error)

	// OperatingSystemServiceListOperatingSystemsWithResponse request
	OperatingSystemServiceListOperatingSystemsWithResponse(ctx context.Context, projectName string, params *OperatingSystemServiceListOperatingSystemsParams, reqEditors ...RequestEditorFn) (*OperatingSystemServiceListOperatingSystemsResponse, error)

	// OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse request with any body
	OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperatingSystemServiceCreateOperatingSystemResponse, error)

	OperatingSystemServiceCreateOperatingSystemWithResponse(ctx context.Context, projectName string, body OperatingSystemServiceCreateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*OperatingSystemServiceCreateOperatingSystemResponse, error)

	// OperatingSystemServiceDeleteOperatingSystemWithResponse request
	OperatingSystemServiceDeleteOperatingSystemWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OperatingSystemServiceDeleteOperatingSystemResponse, error)

	// OperatingSystemServiceGetOperatingSystemWithResponse request
	OperatingSystemServiceGetOperatingSystemWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OperatingSystemServiceGetOperatingSystemResponse, error)

	// OperatingSystemServicePatchOperatingSystemWithBodyWithResponse request with any body
	OperatingSystemServicePatchOperatingSystemWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperatingSystemServicePatchOperatingSystemResponse, error)

	OperatingSystemServicePatchOperatingSystemWithResponse(ctx context.Context, projectName string, resourceId string, body OperatingSystemServicePatchOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*OperatingSystemServicePatchOperatingSystemResponse, error)

	// OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse request with any body
	OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperatingSystemServiceUpdateOperatingSystemResponse, error)

	OperatingSystemServiceUpdateOperatingSystemWithResponse(ctx context.Context, projectName string, resourceId string, body OperatingSystemServiceUpdateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*OperatingSystemServiceUpdateOperatingSystemResponse, error)

	// ScheduleServiceListSchedulesWithResponse request
	ScheduleServiceListSchedulesWithResponse(ctx context.Context, projectName string, params *ScheduleServiceListSchedulesParams, reqEditors ...RequestEditorFn) (*ScheduleServiceListSchedulesResponse, error)

	// WorkloadServiceListWorkloadsWithResponse request
	WorkloadServiceListWorkloadsWithResponse(ctx context.Context, projectName string, params *WorkloadServiceListWorkloadsParams, reqEditors ...RequestEditorFn) (*WorkloadServiceListWorkloadsResponse, error)

	// WorkloadServiceCreateWorkloadWithBodyWithResponse request with any body
	WorkloadServiceCreateWorkloadWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadServiceCreateWorkloadResponse, error)

	WorkloadServiceCreateWorkloadWithResponse(ctx context.Context, projectName string, body WorkloadServiceCreateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadServiceCreateWorkloadResponse, error)

	// WorkloadServiceDeleteWorkloadWithResponse request
	WorkloadServiceDeleteWorkloadWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadServiceDeleteWorkloadResponse, error)

	// WorkloadServiceGetWorkloadWithResponse request
	WorkloadServiceGetWorkloadWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadServiceGetWorkloadResponse, error)

	// WorkloadServicePatchWorkloadWithBodyWithResponse request with any body
	WorkloadServicePatchWorkloadWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadServicePatchWorkloadResponse, error)

	WorkloadServicePatchWorkloadWithResponse(ctx context.Context, projectName string, resourceId string, body WorkloadServicePatchWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadServicePatchWorkloadResponse, error)

	// WorkloadServiceUpdateWorkloadWithBodyWithResponse request with any body
	WorkloadServiceUpdateWorkloadWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadServiceUpdateWorkloadResponse, error)

	WorkloadServiceUpdateWorkloadWithResponse(ctx context.Context, projectName string, resourceId string, body WorkloadServiceUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadServiceUpdateWorkloadResponse, error)

	// WorkloadMemberServiceListWorkloadMembersWithResponse request
	WorkloadMemberServiceListWorkloadMembersWithResponse(ctx context.Context, projectName string, resourceId string, params *WorkloadMemberServiceListWorkloadMembersParams, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceListWorkloadMembersResponse, error)

	// WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse request with any body
	WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceCreateWorkloadMemberResponse, error)

	WorkloadMemberServiceCreateWorkloadMemberWithResponse(ctx context.Context, projectName string, resourceId string, body WorkloadMemberServiceCreateWorkloadMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceCreateWorkloadMemberResponse, error)

	// WorkloadMemberServiceDeleteWorkloadMemberWithResponse request
	WorkloadMemberServiceDeleteWorkloadMemberWithResponse(ctx context.Context, projectName string, workloadResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceDeleteWorkloadMemberResponse, error)

	// WorkloadMemberServiceGetWorkloadMemberWithResponse request
	WorkloadMemberServiceGetWorkloadMemberWithResponse(ctx context.Context, projectName string, workloadResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceGetWorkloadMemberResponse, error)

	// CustomConfigServiceListCustomConfigsWithResponse request
	CustomConfigServiceListCustomConfigsWithResponse(ctx context.Context, projectName string, params *CustomConfigServiceListCustomConfigsParams, reqEditors ...RequestEditorFn) (*CustomConfigServiceListCustomConfigsResponse, error)

	// CustomConfigServiceCreateCustomConfigWithBodyWithResponse request with any body
	CustomConfigServiceCreateCustomConfigWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomConfigServiceCreateCustomConfigResponse, error)

	CustomConfigServiceCreateCustomConfigWithResponse(ctx context.Context, projectName string, body CustomConfigServiceCreateCustomConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomConfigServiceCreateCustomConfigResponse, error)

	// CustomConfigServiceDeleteCustomConfigWithResponse request
	CustomConfigServiceDeleteCustomConfigWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*CustomConfigServiceDeleteCustomConfigResponse, error)

	// CustomConfigServiceGetCustomConfigWithResponse request
	CustomConfigServiceGetCustomConfigWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*CustomConfigServiceGetCustomConfigResponse, error)

	// LocalAccountServiceListLocalAccountsWithResponse request
	LocalAccountServiceListLocalAccountsWithResponse(ctx context.Context, projectName string, params *LocalAccountServiceListLocalAccountsParams, reqEditors ...RequestEditorFn) (*LocalAccountServiceListLocalAccountsResponse, error)

	// LocalAccountServiceCreateLocalAccountWithBodyWithResponse request with any body
	LocalAccountServiceCreateLocalAccountWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LocalAccountServiceCreateLocalAccountResponse, error)

	LocalAccountServiceCreateLocalAccountWithResponse(ctx context.Context, projectName string, body LocalAccountServiceCreateLocalAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*LocalAccountServiceCreateLocalAccountResponse, error)

	// LocalAccountServiceDeleteLocalAccountWithResponse request
	LocalAccountServiceDeleteLocalAccountWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*LocalAccountServiceDeleteLocalAccountResponse, error)

	// LocalAccountServiceGetLocalAccountWithResponse request
	LocalAccountServiceGetLocalAccountWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*LocalAccountServiceGetLocalAccountResponse, error)

	// LocationServiceListLocationsWithResponse request
	LocationServiceListLocationsWithResponse(ctx context.Context, projectName string, params *LocationServiceListLocationsParams, reqEditors ...RequestEditorFn) (*LocationServiceListLocationsResponse, error)

	// OSUpdatePolicyListOSUpdatePolicyWithResponse request
	OSUpdatePolicyListOSUpdatePolicyWithResponse(ctx context.Context, projectName string, params *OSUpdatePolicyListOSUpdatePolicyParams, reqEditors ...RequestEditorFn) (*OSUpdatePolicyListOSUpdatePolicyResponse, error)

	// OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse request with any body
	OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OSUpdatePolicyCreateOSUpdatePolicyResponse, error)

	OSUpdatePolicyCreateOSUpdatePolicyWithResponse(ctx context.Context, projectName string, body OSUpdatePolicyCreateOSUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*OSUpdatePolicyCreateOSUpdatePolicyResponse, error)

	// OSUpdatePolicyDeleteOSUpdatePolicyWithResponse request
	OSUpdatePolicyDeleteOSUpdatePolicyWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdatePolicyDeleteOSUpdatePolicyResponse, error)

	// OSUpdatePolicyGetOSUpdatePolicyWithResponse request
	OSUpdatePolicyGetOSUpdatePolicyWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdatePolicyGetOSUpdatePolicyResponse, error)

	// OSUpdateRunListOSUpdateRunWithResponse request
	OSUpdateRunListOSUpdateRunWithResponse(ctx context.Context, projectName string, params *OSUpdateRunListOSUpdateRunParams, reqEditors ...RequestEditorFn) (*OSUpdateRunListOSUpdateRunResponse, error)

	// OSUpdateRunDeleteOSUpdateRunWithResponse request
	OSUpdateRunDeleteOSUpdateRunWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdateRunDeleteOSUpdateRunResponse, error)

	// OSUpdateRunGetOSUpdateRunWithResponse request
	OSUpdateRunGetOSUpdateRunWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdateRunGetOSUpdateRunResponse, error)

	// ProviderServiceListProvidersWithResponse request
	ProviderServiceListProvidersWithResponse(ctx context.Context, projectName string, params *ProviderServiceListProvidersParams, reqEditors ...RequestEditorFn) (*ProviderServiceListProvidersResponse, error)

	// ProviderServiceCreateProviderWithBodyWithResponse request with any body
	ProviderServiceCreateProviderWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProviderServiceCreateProviderResponse, error)

	ProviderServiceCreateProviderWithResponse(ctx context.Context, projectName string, body ProviderServiceCreateProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*ProviderServiceCreateProviderResponse, error)

	// ProviderServiceDeleteProviderWithResponse request
	ProviderServiceDeleteProviderWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ProviderServiceDeleteProviderResponse, error)

	// ProviderServiceGetProviderWithResponse request
	ProviderServiceGetProviderWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ProviderServiceGetProviderResponse, error)

	// RegionServiceListRegionsWithResponse request
	RegionServiceListRegionsWithResponse(ctx context.Context, projectName string, params *RegionServiceListRegionsParams, reqEditors ...RequestEditorFn) (*RegionServiceListRegionsResponse, error)

	// RegionServiceCreateRegionWithBodyWithResponse request with any body
	RegionServiceCreateRegionWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegionServiceCreateRegionResponse, error)

	RegionServiceCreateRegionWithResponse(ctx context.Context, projectName string, body RegionServiceCreateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegionServiceCreateRegionResponse, error)

	// SiteServiceDeleteSiteWithResponse request
	SiteServiceDeleteSiteWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*SiteServiceDeleteSiteResponse, error)

	// SiteServiceGetSiteWithResponse request
	SiteServiceGetSiteWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*SiteServiceGetSiteResponse, error)

	// SiteServicePatchSiteWithBodyWithResponse request with any body
	SiteServicePatchSiteWithBodyWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SiteServicePatchSiteResponse, error)

	SiteServicePatchSiteWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, body SiteServicePatchSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*SiteServicePatchSiteResponse, error)

	// SiteServiceUpdateSiteWithBodyWithResponse request with any body
	SiteServiceUpdateSiteWithBodyWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SiteServiceUpdateSiteResponse, error)

	SiteServiceUpdateSiteWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, body SiteServiceUpdateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*SiteServiceUpdateSiteResponse, error)

	// RegionServiceDeleteRegionWithResponse request
	RegionServiceDeleteRegionWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*RegionServiceDeleteRegionResponse, error)

	// RegionServiceGetRegionWithResponse request
	RegionServiceGetRegionWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*RegionServiceGetRegionResponse, error)

	// RegionServicePatchRegionWithBodyWithResponse request with any body
	RegionServicePatchRegionWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegionServicePatchRegionResponse, error)

	RegionServicePatchRegionWithResponse(ctx context.Context, projectName string, resourceId string, body RegionServicePatchRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegionServicePatchRegionResponse, error)

	// RegionServiceUpdateRegionWithBodyWithResponse request with any body
	RegionServiceUpdateRegionWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegionServiceUpdateRegionResponse, error)

	RegionServiceUpdateRegionWithResponse(ctx context.Context, projectName string, resourceId string, body RegionServiceUpdateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegionServiceUpdateRegionResponse, error)

	// SiteServiceListSitesWithResponse request
	SiteServiceListSitesWithResponse(ctx context.Context, projectName string, resourceId string, params *SiteServiceListSitesParams, reqEditors ...RequestEditorFn) (*SiteServiceListSitesResponse, error)

	// SiteServiceCreateSiteWithBodyWithResponse request with any body
	SiteServiceCreateSiteWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SiteServiceCreateSiteResponse, error)

	SiteServiceCreateSiteWithResponse(ctx context.Context, projectName string, resourceId string, body SiteServiceCreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*SiteServiceCreateSiteResponse, error)

	// ScheduleServiceListRepeatedSchedulesWithResponse request
	ScheduleServiceListRepeatedSchedulesWithResponse(ctx context.Context, projectName string, params *ScheduleServiceListRepeatedSchedulesParams, reqEditors ...RequestEditorFn) (*ScheduleServiceListRepeatedSchedulesResponse, error)

	// ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse request with any body
	ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateRepeatedScheduleResponse, error)

	ScheduleServiceCreateRepeatedScheduleWithResponse(ctx context.Context, projectName string, body ScheduleServiceCreateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateRepeatedScheduleResponse, error)

	// ScheduleServiceDeleteRepeatedScheduleWithResponse request
	ScheduleServiceDeleteRepeatedScheduleWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceDeleteRepeatedScheduleResponse, error)

	// ScheduleServiceGetRepeatedScheduleWithResponse request
	ScheduleServiceGetRepeatedScheduleWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceGetRepeatedScheduleResponse, error)

	// ScheduleServicePatchRepeatedScheduleWithBodyWithResponse request with any body
	ScheduleServicePatchRepeatedScheduleWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServicePatchRepeatedScheduleResponse, error)

	ScheduleServicePatchRepeatedScheduleWithResponse(ctx context.Context, projectName string, resourceId string, body ScheduleServicePatchRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServicePatchRepeatedScheduleResponse, error)

	// ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse request with any body
	ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateRepeatedScheduleResponse, error)

	ScheduleServiceUpdateRepeatedScheduleWithResponse(ctx context.Context, projectName string, resourceId string, body ScheduleServiceUpdateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateRepeatedScheduleResponse, error)

	// ScheduleServiceListSingleSchedulesWithResponse request
	ScheduleServiceListSingleSchedulesWithResponse(ctx context.Context, projectName string, params *ScheduleServiceListSingleSchedulesParams, reqEditors ...RequestEditorFn) (*ScheduleServiceListSingleSchedulesResponse, error)

	// ScheduleServiceCreateSingleScheduleWithBodyWithResponse request with any body
	ScheduleServiceCreateSingleScheduleWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateSingleScheduleResponse, error)

	ScheduleServiceCreateSingleScheduleWithResponse(ctx context.Context, projectName string, body ScheduleServiceCreateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateSingleScheduleResponse, error)

	// ScheduleServiceDeleteSingleScheduleWithResponse request
	ScheduleServiceDeleteSingleScheduleWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceDeleteSingleScheduleResponse, error)

	// ScheduleServiceGetSingleScheduleWithResponse request
	ScheduleServiceGetSingleScheduleWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceGetSingleScheduleResponse, error)

	// ScheduleServicePatchSingleScheduleWithBodyWithResponse request with any body
	ScheduleServicePatchSingleScheduleWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServicePatchSingleScheduleResponse, error)

	ScheduleServicePatchSingleScheduleWithResponse(ctx context.Context, projectName string, resourceId string, body ScheduleServicePatchSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServicePatchSingleScheduleResponse, error)

	// ScheduleServiceUpdateSingleScheduleWithBodyWithResponse request with any body
	ScheduleServiceUpdateSingleScheduleWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateSingleScheduleResponse, error)

	ScheduleServiceUpdateSingleScheduleWithResponse(ctx context.Context, projectName string, resourceId string, body ScheduleServiceUpdateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateSingleScheduleResponse, error)

	// TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse request
	TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse(ctx context.Context, projectName string, params *TelemetryLogsGroupServiceListTelemetryLogsGroupsParams, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceListTelemetryLogsGroupsResponse, error)

	// TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse request with any body
	TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse, error)

	TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse(ctx context.Context, projectName string, body TelemetryLogsGroupServiceCreateTelemetryLogsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse, error)

	// TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse request
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse, error)

	// TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse request
	TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceGetTelemetryLogsProfileResponse, error)

	// TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse request with any body
	TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse, error)

	TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, body TelemetryLogsProfileServicePatchTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse, error)

	// TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse request with any body
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse, error)

	TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, body TelemetryLogsProfileServiceUpdateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse, error)

	// TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse request
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse, error)

	// TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse request
	TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceGetTelemetryLogsGroupResponse, error)

	// TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse request
	TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse(ctx context.Context, projectName string, resourceId string, params *TelemetryLogsProfileServiceListTelemetryLogsProfilesParams, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceListTelemetryLogsProfilesResponse, error)

	// TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse request with any body
	TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse, error)

	TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse(ctx context.Context, projectName string, resourceId string, body TelemetryLogsProfileServiceCreateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse, error)

	// TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse request
	TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse(ctx context.Context, projectName string, params *TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse, error)

	// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse request with any body
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse, error)

	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse(ctx context.Context, projectName string, body TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse, error)

	// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse request
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse, error)

	// TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse request
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse, error)

	// TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse request with any body
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse, error)

	TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, body TelemetryMetricsProfileServicePatchTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse, error)

	// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse request with any body
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse, error)

	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, body TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse, error)

	// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse request
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse, error)

	// TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse request
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse, error)

	// TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse request
	TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse(ctx context.Context, projectName string, resourceId string, params *TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse, error)

	// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse request with any body
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse, error)

	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse(ctx context.Context, projectName string, resourceId string, body TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse, error)
}

type HostServiceListHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListHostsResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServiceListHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServiceListHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HostServiceCreateHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServiceCreateHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServiceCreateHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HostServiceRegisterHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServiceRegisterHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServiceRegisterHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HostServiceGetHostsSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetHostSummaryResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServiceGetHostsSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServiceGetHostsSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HostServiceDeleteHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteHostResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServiceDeleteHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServiceDeleteHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HostServiceGetHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServiceGetHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServiceGetHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HostServicePatchHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServicePatchHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServicePatchHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HostServiceUpdateHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServiceUpdateHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServiceUpdateHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HostServiceInvalidateHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvalidateHostResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServiceInvalidateHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServiceInvalidateHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HostServiceOnboardHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardHostResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServiceOnboardHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServiceOnboardHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HostServicePatchRegisterHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r HostServicePatchRegisterHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HostServicePatchRegisterHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceServiceListInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListInstancesResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r InstanceServiceListInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceServiceListInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceServiceCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r InstanceServiceCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceServiceCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceServiceDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteInstanceResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r InstanceServiceDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceServiceDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceServiceGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r InstanceServiceGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceServiceGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceServicePatchInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r InstanceServicePatchInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceServicePatchInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceServiceUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r InstanceServiceUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceServiceUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceServiceInvalidateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvalidateInstanceResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r InstanceServiceInvalidateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceServiceInvalidateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperatingSystemServiceListOperatingSystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListOperatingSystemsResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OperatingSystemServiceListOperatingSystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperatingSystemServiceListOperatingSystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperatingSystemServiceCreateOperatingSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OperatingSystemServiceCreateOperatingSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperatingSystemServiceCreateOperatingSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperatingSystemServiceDeleteOperatingSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteOperatingSystemResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OperatingSystemServiceDeleteOperatingSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperatingSystemServiceDeleteOperatingSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperatingSystemServiceGetOperatingSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OperatingSystemServiceGetOperatingSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperatingSystemServiceGetOperatingSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperatingSystemServicePatchOperatingSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OperatingSystemServicePatchOperatingSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperatingSystemServicePatchOperatingSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperatingSystemServiceUpdateOperatingSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OperatingSystemServiceUpdateOperatingSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperatingSystemServiceUpdateOperatingSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceListSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSchedulesResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceListSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceListSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadServiceListWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListWorkloadsResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r WorkloadServiceListWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadServiceListWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadServiceCreateWorkloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r WorkloadServiceCreateWorkloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadServiceCreateWorkloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadServiceDeleteWorkloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteWorkloadResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r WorkloadServiceDeleteWorkloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadServiceDeleteWorkloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadServiceGetWorkloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r WorkloadServiceGetWorkloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadServiceGetWorkloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadServicePatchWorkloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r WorkloadServicePatchWorkloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadServicePatchWorkloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadServiceUpdateWorkloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r WorkloadServiceUpdateWorkloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadServiceUpdateWorkloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadMemberServiceListWorkloadMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListWorkloadMembersResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r WorkloadMemberServiceListWorkloadMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadMemberServiceListWorkloadMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadMemberServiceCreateWorkloadMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadMember
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r WorkloadMemberServiceCreateWorkloadMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadMemberServiceCreateWorkloadMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadMemberServiceDeleteWorkloadMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteWorkloadMemberResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r WorkloadMemberServiceDeleteWorkloadMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadMemberServiceDeleteWorkloadMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadMemberServiceGetWorkloadMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadMember
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r WorkloadMemberServiceGetWorkloadMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadMemberServiceGetWorkloadMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomConfigServiceListCustomConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCustomConfigsResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r CustomConfigServiceListCustomConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomConfigServiceListCustomConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomConfigServiceCreateCustomConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomConfigResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r CustomConfigServiceCreateCustomConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomConfigServiceCreateCustomConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomConfigServiceDeleteCustomConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteCustomConfigResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r CustomConfigServiceDeleteCustomConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomConfigServiceDeleteCustomConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomConfigServiceGetCustomConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomConfigResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r CustomConfigServiceGetCustomConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomConfigServiceGetCustomConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocalAccountServiceListLocalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListLocalAccountsResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r LocalAccountServiceListLocalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocalAccountServiceListLocalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocalAccountServiceCreateLocalAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocalAccountResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r LocalAccountServiceCreateLocalAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocalAccountServiceCreateLocalAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocalAccountServiceDeleteLocalAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteLocalAccountResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r LocalAccountServiceDeleteLocalAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocalAccountServiceDeleteLocalAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocalAccountServiceGetLocalAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocalAccountResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r LocalAccountServiceGetLocalAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocalAccountServiceGetLocalAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocationServiceListLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListLocationsResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r LocationServiceListLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocationServiceListLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OSUpdatePolicyListOSUpdatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListOSUpdatePolicyResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OSUpdatePolicyListOSUpdatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OSUpdatePolicyListOSUpdatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OSUpdatePolicyCreateOSUpdatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OSUpdatePolicy
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OSUpdatePolicyCreateOSUpdatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OSUpdatePolicyCreateOSUpdatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OSUpdatePolicyDeleteOSUpdatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteOSUpdatePolicyResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OSUpdatePolicyDeleteOSUpdatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OSUpdatePolicyDeleteOSUpdatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OSUpdatePolicyGetOSUpdatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OSUpdatePolicy
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OSUpdatePolicyGetOSUpdatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OSUpdatePolicyGetOSUpdatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OSUpdateRunListOSUpdateRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListOSUpdateRunResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OSUpdateRunListOSUpdateRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OSUpdateRunListOSUpdateRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OSUpdateRunDeleteOSUpdateRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteOSUpdateRunResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OSUpdateRunDeleteOSUpdateRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OSUpdateRunDeleteOSUpdateRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OSUpdateRunGetOSUpdateRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OSUpdateRun
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r OSUpdateRunGetOSUpdateRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OSUpdateRunGetOSUpdateRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProviderServiceListProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListProvidersResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ProviderServiceListProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProviderServiceListProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProviderServiceCreateProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProviderResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ProviderServiceCreateProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProviderServiceCreateProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProviderServiceDeleteProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteProviderResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ProviderServiceDeleteProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProviderServiceDeleteProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProviderServiceGetProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProviderResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ProviderServiceGetProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProviderServiceGetProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegionServiceListRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRegionsResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r RegionServiceListRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegionServiceListRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegionServiceCreateRegionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegionResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r RegionServiceCreateRegionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegionServiceCreateRegionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SiteServiceDeleteSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteSiteResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r SiteServiceDeleteSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SiteServiceDeleteSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SiteServiceGetSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SiteResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r SiteServiceGetSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SiteServiceGetSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SiteServicePatchSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SiteResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r SiteServicePatchSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SiteServicePatchSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SiteServiceUpdateSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SiteResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r SiteServiceUpdateSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SiteServiceUpdateSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegionServiceDeleteRegionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteRegionResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r RegionServiceDeleteRegionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegionServiceDeleteRegionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegionServiceGetRegionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegionResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r RegionServiceGetRegionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegionServiceGetRegionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegionServicePatchRegionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegionResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r RegionServicePatchRegionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegionServicePatchRegionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegionServiceUpdateRegionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegionResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r RegionServiceUpdateRegionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegionServiceUpdateRegionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SiteServiceListSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSitesResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r SiteServiceListSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SiteServiceListSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SiteServiceCreateSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SiteResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r SiteServiceCreateSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SiteServiceCreateSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceListRepeatedSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRepeatedSchedulesResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceListRepeatedSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceListRepeatedSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceCreateRepeatedScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedScheduleResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceCreateRepeatedScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceCreateRepeatedScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceDeleteRepeatedScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteRepeatedScheduleResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceDeleteRepeatedScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceDeleteRepeatedScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceGetRepeatedScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedScheduleResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceGetRepeatedScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceGetRepeatedScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServicePatchRepeatedScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedScheduleResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServicePatchRepeatedScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServicePatchRepeatedScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceUpdateRepeatedScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedScheduleResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceUpdateRepeatedScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceUpdateRepeatedScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceListSingleSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSingleSchedulesResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceListSingleSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceListSingleSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceCreateSingleScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleScheduleResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceCreateSingleScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceCreateSingleScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceDeleteSingleScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteSingleScheduleResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceDeleteSingleScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceDeleteSingleScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceGetSingleScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleScheduleResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceGetSingleScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceGetSingleScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServicePatchSingleScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleScheduleResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServicePatchSingleScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServicePatchSingleScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleServiceUpdateSingleScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleScheduleResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r ScheduleServiceUpdateSingleScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleServiceUpdateSingleScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryLogsGroupServiceListTelemetryLogsGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTelemetryLogsGroupsResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryLogsGroupServiceListTelemetryLogsGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryLogsGroupServiceListTelemetryLogsGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsGroupResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteTelemetryLogsProfileResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryLogsProfileServiceGetTelemetryLogsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfileResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryLogsProfileServiceGetTelemetryLogsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryLogsProfileServiceGetTelemetryLogsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfileResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfileResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteTelemetryLogsGroupResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryLogsGroupServiceGetTelemetryLogsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsGroupResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryLogsGroupServiceGetTelemetryLogsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryLogsGroupServiceGetTelemetryLogsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryLogsProfileServiceListTelemetryLogsProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTelemetryLogsProfilesResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryLogsProfileServiceListTelemetryLogsProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryLogsProfileServiceListTelemetryLogsProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfileResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTelemetryMetricsGroupsResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsGroupResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteTelemetryMetricsProfileResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfileResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfileResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfileResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteTelemetryMetricsGroupResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsGroupResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTelemetryMetricsProfilesResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfileResource
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HostServiceListHostsWithResponse request returning *HostServiceListHostsResponse
func (c *ClientWithResponses) HostServiceListHostsWithResponse(ctx context.Context, projectName string, params *HostServiceListHostsParams, reqEditors ...RequestEditorFn) (*HostServiceListHostsResponse, error) {
	rsp, err := c.HostServiceListHosts(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceListHostsResponse(rsp)
}

// HostServiceCreateHostWithBodyWithResponse request with arbitrary body returning *HostServiceCreateHostResponse
func (c *ClientWithResponses) HostServiceCreateHostWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServiceCreateHostResponse, error) {
	rsp, err := c.HostServiceCreateHostWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceCreateHostResponse(rsp)
}

func (c *ClientWithResponses) HostServiceCreateHostWithResponse(ctx context.Context, projectName string, body HostServiceCreateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServiceCreateHostResponse, error) {
	rsp, err := c.HostServiceCreateHost(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceCreateHostResponse(rsp)
}

// HostServiceRegisterHostWithBodyWithResponse request with arbitrary body returning *HostServiceRegisterHostResponse
func (c *ClientWithResponses) HostServiceRegisterHostWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServiceRegisterHostResponse, error) {
	rsp, err := c.HostServiceRegisterHostWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceRegisterHostResponse(rsp)
}

func (c *ClientWithResponses) HostServiceRegisterHostWithResponse(ctx context.Context, projectName string, body HostServiceRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServiceRegisterHostResponse, error) {
	rsp, err := c.HostServiceRegisterHost(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceRegisterHostResponse(rsp)
}

// HostServiceGetHostsSummaryWithResponse request returning *HostServiceGetHostsSummaryResponse
func (c *ClientWithResponses) HostServiceGetHostsSummaryWithResponse(ctx context.Context, projectName string, params *HostServiceGetHostsSummaryParams, reqEditors ...RequestEditorFn) (*HostServiceGetHostsSummaryResponse, error) {
	rsp, err := c.HostServiceGetHostsSummary(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceGetHostsSummaryResponse(rsp)
}

// HostServiceDeleteHostWithResponse request returning *HostServiceDeleteHostResponse
func (c *ClientWithResponses) HostServiceDeleteHostWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*HostServiceDeleteHostResponse, error) {
	rsp, err := c.HostServiceDeleteHost(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceDeleteHostResponse(rsp)
}

// HostServiceGetHostWithResponse request returning *HostServiceGetHostResponse
func (c *ClientWithResponses) HostServiceGetHostWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*HostServiceGetHostResponse, error) {
	rsp, err := c.HostServiceGetHost(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceGetHostResponse(rsp)
}

// HostServicePatchHostWithBodyWithResponse request with arbitrary body returning *HostServicePatchHostResponse
func (c *ClientWithResponses) HostServicePatchHostWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServicePatchHostResponse, error) {
	rsp, err := c.HostServicePatchHostWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServicePatchHostResponse(rsp)
}

func (c *ClientWithResponses) HostServicePatchHostWithResponse(ctx context.Context, projectName string, resourceId string, body HostServicePatchHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServicePatchHostResponse, error) {
	rsp, err := c.HostServicePatchHost(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServicePatchHostResponse(rsp)
}

// HostServiceUpdateHostWithBodyWithResponse request with arbitrary body returning *HostServiceUpdateHostResponse
func (c *ClientWithResponses) HostServiceUpdateHostWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServiceUpdateHostResponse, error) {
	rsp, err := c.HostServiceUpdateHostWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceUpdateHostResponse(rsp)
}

func (c *ClientWithResponses) HostServiceUpdateHostWithResponse(ctx context.Context, projectName string, resourceId string, body HostServiceUpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServiceUpdateHostResponse, error) {
	rsp, err := c.HostServiceUpdateHost(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceUpdateHostResponse(rsp)
}

// HostServiceInvalidateHostWithResponse request returning *HostServiceInvalidateHostResponse
func (c *ClientWithResponses) HostServiceInvalidateHostWithResponse(ctx context.Context, projectName string, resourceId string, params *HostServiceInvalidateHostParams, reqEditors ...RequestEditorFn) (*HostServiceInvalidateHostResponse, error) {
	rsp, err := c.HostServiceInvalidateHost(ctx, projectName, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceInvalidateHostResponse(rsp)
}

// HostServiceOnboardHostWithResponse request returning *HostServiceOnboardHostResponse
func (c *ClientWithResponses) HostServiceOnboardHostWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*HostServiceOnboardHostResponse, error) {
	rsp, err := c.HostServiceOnboardHost(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServiceOnboardHostResponse(rsp)
}

// HostServicePatchRegisterHostWithBodyWithResponse request with arbitrary body returning *HostServicePatchRegisterHostResponse
func (c *ClientWithResponses) HostServicePatchRegisterHostWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HostServicePatchRegisterHostResponse, error) {
	rsp, err := c.HostServicePatchRegisterHostWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServicePatchRegisterHostResponse(rsp)
}

func (c *ClientWithResponses) HostServicePatchRegisterHostWithResponse(ctx context.Context, projectName string, resourceId string, body HostServicePatchRegisterHostJSONRequestBody, reqEditors ...RequestEditorFn) (*HostServicePatchRegisterHostResponse, error) {
	rsp, err := c.HostServicePatchRegisterHost(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHostServicePatchRegisterHostResponse(rsp)
}

// InstanceServiceListInstancesWithResponse request returning *InstanceServiceListInstancesResponse
func (c *ClientWithResponses) InstanceServiceListInstancesWithResponse(ctx context.Context, projectName string, params *InstanceServiceListInstancesParams, reqEditors ...RequestEditorFn) (*InstanceServiceListInstancesResponse, error) {
	rsp, err := c.InstanceServiceListInstances(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceServiceListInstancesResponse(rsp)
}

// InstanceServiceCreateInstanceWithBodyWithResponse request with arbitrary body returning *InstanceServiceCreateInstanceResponse
func (c *ClientWithResponses) InstanceServiceCreateInstanceWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceServiceCreateInstanceResponse, error) {
	rsp, err := c.InstanceServiceCreateInstanceWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceServiceCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) InstanceServiceCreateInstanceWithResponse(ctx context.Context, projectName string, body InstanceServiceCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceServiceCreateInstanceResponse, error) {
	rsp, err := c.InstanceServiceCreateInstance(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceServiceCreateInstanceResponse(rsp)
}

// InstanceServiceDeleteInstanceWithResponse request returning *InstanceServiceDeleteInstanceResponse
func (c *ClientWithResponses) InstanceServiceDeleteInstanceWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*InstanceServiceDeleteInstanceResponse, error) {
	rsp, err := c.InstanceServiceDeleteInstance(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceServiceDeleteInstanceResponse(rsp)
}

// InstanceServiceGetInstanceWithResponse request returning *InstanceServiceGetInstanceResponse
func (c *ClientWithResponses) InstanceServiceGetInstanceWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*InstanceServiceGetInstanceResponse, error) {
	rsp, err := c.InstanceServiceGetInstance(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceServiceGetInstanceResponse(rsp)
}

// InstanceServicePatchInstanceWithBodyWithResponse request with arbitrary body returning *InstanceServicePatchInstanceResponse
func (c *ClientWithResponses) InstanceServicePatchInstanceWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceServicePatchInstanceResponse, error) {
	rsp, err := c.InstanceServicePatchInstanceWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceServicePatchInstanceResponse(rsp)
}

func (c *ClientWithResponses) InstanceServicePatchInstanceWithResponse(ctx context.Context, projectName string, resourceId string, body InstanceServicePatchInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceServicePatchInstanceResponse, error) {
	rsp, err := c.InstanceServicePatchInstance(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceServicePatchInstanceResponse(rsp)
}

// InstanceServiceUpdateInstanceWithBodyWithResponse request with arbitrary body returning *InstanceServiceUpdateInstanceResponse
func (c *ClientWithResponses) InstanceServiceUpdateInstanceWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceServiceUpdateInstanceResponse, error) {
	rsp, err := c.InstanceServiceUpdateInstanceWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceServiceUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) InstanceServiceUpdateInstanceWithResponse(ctx context.Context, projectName string, resourceId string, body InstanceServiceUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceServiceUpdateInstanceResponse, error) {
	rsp, err := c.InstanceServiceUpdateInstance(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceServiceUpdateInstanceResponse(rsp)
}

// InstanceServiceInvalidateInstanceWithResponse request returning *InstanceServiceInvalidateInstanceResponse
func (c *ClientWithResponses) InstanceServiceInvalidateInstanceWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*InstanceServiceInvalidateInstanceResponse, error) {
	rsp, err := c.InstanceServiceInvalidateInstance(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceServiceInvalidateInstanceResponse(rsp)
}

// OperatingSystemServiceListOperatingSystemsWithResponse request returning *OperatingSystemServiceListOperatingSystemsResponse
func (c *ClientWithResponses) OperatingSystemServiceListOperatingSystemsWithResponse(ctx context.Context, projectName string, params *OperatingSystemServiceListOperatingSystemsParams, reqEditors ...RequestEditorFn) (*OperatingSystemServiceListOperatingSystemsResponse, error) {
	rsp, err := c.OperatingSystemServiceListOperatingSystems(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperatingSystemServiceListOperatingSystemsResponse(rsp)
}

// OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse request with arbitrary body returning *OperatingSystemServiceCreateOperatingSystemResponse
func (c *ClientWithResponses) OperatingSystemServiceCreateOperatingSystemWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperatingSystemServiceCreateOperatingSystemResponse, error) {
	rsp, err := c.OperatingSystemServiceCreateOperatingSystemWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperatingSystemServiceCreateOperatingSystemResponse(rsp)
}

func (c *ClientWithResponses) OperatingSystemServiceCreateOperatingSystemWithResponse(ctx context.Context, projectName string, body OperatingSystemServiceCreateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*OperatingSystemServiceCreateOperatingSystemResponse, error) {
	rsp, err := c.OperatingSystemServiceCreateOperatingSystem(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperatingSystemServiceCreateOperatingSystemResponse(rsp)
}

// OperatingSystemServiceDeleteOperatingSystemWithResponse request returning *OperatingSystemServiceDeleteOperatingSystemResponse
func (c *ClientWithResponses) OperatingSystemServiceDeleteOperatingSystemWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OperatingSystemServiceDeleteOperatingSystemResponse, error) {
	rsp, err := c.OperatingSystemServiceDeleteOperatingSystem(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperatingSystemServiceDeleteOperatingSystemResponse(rsp)
}

// OperatingSystemServiceGetOperatingSystemWithResponse request returning *OperatingSystemServiceGetOperatingSystemResponse
func (c *ClientWithResponses) OperatingSystemServiceGetOperatingSystemWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OperatingSystemServiceGetOperatingSystemResponse, error) {
	rsp, err := c.OperatingSystemServiceGetOperatingSystem(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperatingSystemServiceGetOperatingSystemResponse(rsp)
}

// OperatingSystemServicePatchOperatingSystemWithBodyWithResponse request with arbitrary body returning *OperatingSystemServicePatchOperatingSystemResponse
func (c *ClientWithResponses) OperatingSystemServicePatchOperatingSystemWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperatingSystemServicePatchOperatingSystemResponse, error) {
	rsp, err := c.OperatingSystemServicePatchOperatingSystemWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperatingSystemServicePatchOperatingSystemResponse(rsp)
}

func (c *ClientWithResponses) OperatingSystemServicePatchOperatingSystemWithResponse(ctx context.Context, projectName string, resourceId string, body OperatingSystemServicePatchOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*OperatingSystemServicePatchOperatingSystemResponse, error) {
	rsp, err := c.OperatingSystemServicePatchOperatingSystem(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperatingSystemServicePatchOperatingSystemResponse(rsp)
}

// OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse request with arbitrary body returning *OperatingSystemServiceUpdateOperatingSystemResponse
func (c *ClientWithResponses) OperatingSystemServiceUpdateOperatingSystemWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperatingSystemServiceUpdateOperatingSystemResponse, error) {
	rsp, err := c.OperatingSystemServiceUpdateOperatingSystemWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperatingSystemServiceUpdateOperatingSystemResponse(rsp)
}

func (c *ClientWithResponses) OperatingSystemServiceUpdateOperatingSystemWithResponse(ctx context.Context, projectName string, resourceId string, body OperatingSystemServiceUpdateOperatingSystemJSONRequestBody, reqEditors ...RequestEditorFn) (*OperatingSystemServiceUpdateOperatingSystemResponse, error) {
	rsp, err := c.OperatingSystemServiceUpdateOperatingSystem(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperatingSystemServiceUpdateOperatingSystemResponse(rsp)
}

// ScheduleServiceListSchedulesWithResponse request returning *ScheduleServiceListSchedulesResponse
func (c *ClientWithResponses) ScheduleServiceListSchedulesWithResponse(ctx context.Context, projectName string, params *ScheduleServiceListSchedulesParams, reqEditors ...RequestEditorFn) (*ScheduleServiceListSchedulesResponse, error) {
	rsp, err := c.ScheduleServiceListSchedules(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceListSchedulesResponse(rsp)
}

// WorkloadServiceListWorkloadsWithResponse request returning *WorkloadServiceListWorkloadsResponse
func (c *ClientWithResponses) WorkloadServiceListWorkloadsWithResponse(ctx context.Context, projectName string, params *WorkloadServiceListWorkloadsParams, reqEditors ...RequestEditorFn) (*WorkloadServiceListWorkloadsResponse, error) {
	rsp, err := c.WorkloadServiceListWorkloads(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadServiceListWorkloadsResponse(rsp)
}

// WorkloadServiceCreateWorkloadWithBodyWithResponse request with arbitrary body returning *WorkloadServiceCreateWorkloadResponse
func (c *ClientWithResponses) WorkloadServiceCreateWorkloadWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadServiceCreateWorkloadResponse, error) {
	rsp, err := c.WorkloadServiceCreateWorkloadWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadServiceCreateWorkloadResponse(rsp)
}

func (c *ClientWithResponses) WorkloadServiceCreateWorkloadWithResponse(ctx context.Context, projectName string, body WorkloadServiceCreateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadServiceCreateWorkloadResponse, error) {
	rsp, err := c.WorkloadServiceCreateWorkload(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadServiceCreateWorkloadResponse(rsp)
}

// WorkloadServiceDeleteWorkloadWithResponse request returning *WorkloadServiceDeleteWorkloadResponse
func (c *ClientWithResponses) WorkloadServiceDeleteWorkloadWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadServiceDeleteWorkloadResponse, error) {
	rsp, err := c.WorkloadServiceDeleteWorkload(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadServiceDeleteWorkloadResponse(rsp)
}

// WorkloadServiceGetWorkloadWithResponse request returning *WorkloadServiceGetWorkloadResponse
func (c *ClientWithResponses) WorkloadServiceGetWorkloadWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadServiceGetWorkloadResponse, error) {
	rsp, err := c.WorkloadServiceGetWorkload(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadServiceGetWorkloadResponse(rsp)
}

// WorkloadServicePatchWorkloadWithBodyWithResponse request with arbitrary body returning *WorkloadServicePatchWorkloadResponse
func (c *ClientWithResponses) WorkloadServicePatchWorkloadWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadServicePatchWorkloadResponse, error) {
	rsp, err := c.WorkloadServicePatchWorkloadWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadServicePatchWorkloadResponse(rsp)
}

func (c *ClientWithResponses) WorkloadServicePatchWorkloadWithResponse(ctx context.Context, projectName string, resourceId string, body WorkloadServicePatchWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadServicePatchWorkloadResponse, error) {
	rsp, err := c.WorkloadServicePatchWorkload(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadServicePatchWorkloadResponse(rsp)
}

// WorkloadServiceUpdateWorkloadWithBodyWithResponse request with arbitrary body returning *WorkloadServiceUpdateWorkloadResponse
func (c *ClientWithResponses) WorkloadServiceUpdateWorkloadWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadServiceUpdateWorkloadResponse, error) {
	rsp, err := c.WorkloadServiceUpdateWorkloadWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadServiceUpdateWorkloadResponse(rsp)
}

func (c *ClientWithResponses) WorkloadServiceUpdateWorkloadWithResponse(ctx context.Context, projectName string, resourceId string, body WorkloadServiceUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadServiceUpdateWorkloadResponse, error) {
	rsp, err := c.WorkloadServiceUpdateWorkload(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadServiceUpdateWorkloadResponse(rsp)
}

// WorkloadMemberServiceListWorkloadMembersWithResponse request returning *WorkloadMemberServiceListWorkloadMembersResponse
func (c *ClientWithResponses) WorkloadMemberServiceListWorkloadMembersWithResponse(ctx context.Context, projectName string, resourceId string, params *WorkloadMemberServiceListWorkloadMembersParams, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceListWorkloadMembersResponse, error) {
	rsp, err := c.WorkloadMemberServiceListWorkloadMembers(ctx, projectName, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadMemberServiceListWorkloadMembersResponse(rsp)
}

// WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse request with arbitrary body returning *WorkloadMemberServiceCreateWorkloadMemberResponse
func (c *ClientWithResponses) WorkloadMemberServiceCreateWorkloadMemberWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceCreateWorkloadMemberResponse, error) {
	rsp, err := c.WorkloadMemberServiceCreateWorkloadMemberWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadMemberServiceCreateWorkloadMemberResponse(rsp)
}

func (c *ClientWithResponses) WorkloadMemberServiceCreateWorkloadMemberWithResponse(ctx context.Context, projectName string, resourceId string, body WorkloadMemberServiceCreateWorkloadMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceCreateWorkloadMemberResponse, error) {
	rsp, err := c.WorkloadMemberServiceCreateWorkloadMember(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadMemberServiceCreateWorkloadMemberResponse(rsp)
}

// WorkloadMemberServiceDeleteWorkloadMemberWithResponse request returning *WorkloadMemberServiceDeleteWorkloadMemberResponse
func (c *ClientWithResponses) WorkloadMemberServiceDeleteWorkloadMemberWithResponse(ctx context.Context, projectName string, workloadResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceDeleteWorkloadMemberResponse, error) {
	rsp, err := c.WorkloadMemberServiceDeleteWorkloadMember(ctx, projectName, workloadResourceId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadMemberServiceDeleteWorkloadMemberResponse(rsp)
}

// WorkloadMemberServiceGetWorkloadMemberWithResponse request returning *WorkloadMemberServiceGetWorkloadMemberResponse
func (c *ClientWithResponses) WorkloadMemberServiceGetWorkloadMemberWithResponse(ctx context.Context, projectName string, workloadResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*WorkloadMemberServiceGetWorkloadMemberResponse, error) {
	rsp, err := c.WorkloadMemberServiceGetWorkloadMember(ctx, projectName, workloadResourceId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadMemberServiceGetWorkloadMemberResponse(rsp)
}

// CustomConfigServiceListCustomConfigsWithResponse request returning *CustomConfigServiceListCustomConfigsResponse
func (c *ClientWithResponses) CustomConfigServiceListCustomConfigsWithResponse(ctx context.Context, projectName string, params *CustomConfigServiceListCustomConfigsParams, reqEditors ...RequestEditorFn) (*CustomConfigServiceListCustomConfigsResponse, error) {
	rsp, err := c.CustomConfigServiceListCustomConfigs(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomConfigServiceListCustomConfigsResponse(rsp)
}

// CustomConfigServiceCreateCustomConfigWithBodyWithResponse request with arbitrary body returning *CustomConfigServiceCreateCustomConfigResponse
func (c *ClientWithResponses) CustomConfigServiceCreateCustomConfigWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomConfigServiceCreateCustomConfigResponse, error) {
	rsp, err := c.CustomConfigServiceCreateCustomConfigWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomConfigServiceCreateCustomConfigResponse(rsp)
}

func (c *ClientWithResponses) CustomConfigServiceCreateCustomConfigWithResponse(ctx context.Context, projectName string, body CustomConfigServiceCreateCustomConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomConfigServiceCreateCustomConfigResponse, error) {
	rsp, err := c.CustomConfigServiceCreateCustomConfig(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomConfigServiceCreateCustomConfigResponse(rsp)
}

// CustomConfigServiceDeleteCustomConfigWithResponse request returning *CustomConfigServiceDeleteCustomConfigResponse
func (c *ClientWithResponses) CustomConfigServiceDeleteCustomConfigWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*CustomConfigServiceDeleteCustomConfigResponse, error) {
	rsp, err := c.CustomConfigServiceDeleteCustomConfig(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomConfigServiceDeleteCustomConfigResponse(rsp)
}

// CustomConfigServiceGetCustomConfigWithResponse request returning *CustomConfigServiceGetCustomConfigResponse
func (c *ClientWithResponses) CustomConfigServiceGetCustomConfigWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*CustomConfigServiceGetCustomConfigResponse, error) {
	rsp, err := c.CustomConfigServiceGetCustomConfig(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomConfigServiceGetCustomConfigResponse(rsp)
}

// LocalAccountServiceListLocalAccountsWithResponse request returning *LocalAccountServiceListLocalAccountsResponse
func (c *ClientWithResponses) LocalAccountServiceListLocalAccountsWithResponse(ctx context.Context, projectName string, params *LocalAccountServiceListLocalAccountsParams, reqEditors ...RequestEditorFn) (*LocalAccountServiceListLocalAccountsResponse, error) {
	rsp, err := c.LocalAccountServiceListLocalAccounts(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocalAccountServiceListLocalAccountsResponse(rsp)
}

// LocalAccountServiceCreateLocalAccountWithBodyWithResponse request with arbitrary body returning *LocalAccountServiceCreateLocalAccountResponse
func (c *ClientWithResponses) LocalAccountServiceCreateLocalAccountWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LocalAccountServiceCreateLocalAccountResponse, error) {
	rsp, err := c.LocalAccountServiceCreateLocalAccountWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocalAccountServiceCreateLocalAccountResponse(rsp)
}

func (c *ClientWithResponses) LocalAccountServiceCreateLocalAccountWithResponse(ctx context.Context, projectName string, body LocalAccountServiceCreateLocalAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*LocalAccountServiceCreateLocalAccountResponse, error) {
	rsp, err := c.LocalAccountServiceCreateLocalAccount(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocalAccountServiceCreateLocalAccountResponse(rsp)
}

// LocalAccountServiceDeleteLocalAccountWithResponse request returning *LocalAccountServiceDeleteLocalAccountResponse
func (c *ClientWithResponses) LocalAccountServiceDeleteLocalAccountWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*LocalAccountServiceDeleteLocalAccountResponse, error) {
	rsp, err := c.LocalAccountServiceDeleteLocalAccount(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocalAccountServiceDeleteLocalAccountResponse(rsp)
}

// LocalAccountServiceGetLocalAccountWithResponse request returning *LocalAccountServiceGetLocalAccountResponse
func (c *ClientWithResponses) LocalAccountServiceGetLocalAccountWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*LocalAccountServiceGetLocalAccountResponse, error) {
	rsp, err := c.LocalAccountServiceGetLocalAccount(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocalAccountServiceGetLocalAccountResponse(rsp)
}

// LocationServiceListLocationsWithResponse request returning *LocationServiceListLocationsResponse
func (c *ClientWithResponses) LocationServiceListLocationsWithResponse(ctx context.Context, projectName string, params *LocationServiceListLocationsParams, reqEditors ...RequestEditorFn) (*LocationServiceListLocationsResponse, error) {
	rsp, err := c.LocationServiceListLocations(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocationServiceListLocationsResponse(rsp)
}

// OSUpdatePolicyListOSUpdatePolicyWithResponse request returning *OSUpdatePolicyListOSUpdatePolicyResponse
func (c *ClientWithResponses) OSUpdatePolicyListOSUpdatePolicyWithResponse(ctx context.Context, projectName string, params *OSUpdatePolicyListOSUpdatePolicyParams, reqEditors ...RequestEditorFn) (*OSUpdatePolicyListOSUpdatePolicyResponse, error) {
	rsp, err := c.OSUpdatePolicyListOSUpdatePolicy(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOSUpdatePolicyListOSUpdatePolicyResponse(rsp)
}

// OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse request with arbitrary body returning *OSUpdatePolicyCreateOSUpdatePolicyResponse
func (c *ClientWithResponses) OSUpdatePolicyCreateOSUpdatePolicyWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OSUpdatePolicyCreateOSUpdatePolicyResponse, error) {
	rsp, err := c.OSUpdatePolicyCreateOSUpdatePolicyWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOSUpdatePolicyCreateOSUpdatePolicyResponse(rsp)
}

func (c *ClientWithResponses) OSUpdatePolicyCreateOSUpdatePolicyWithResponse(ctx context.Context, projectName string, body OSUpdatePolicyCreateOSUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*OSUpdatePolicyCreateOSUpdatePolicyResponse, error) {
	rsp, err := c.OSUpdatePolicyCreateOSUpdatePolicy(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOSUpdatePolicyCreateOSUpdatePolicyResponse(rsp)
}

// OSUpdatePolicyDeleteOSUpdatePolicyWithResponse request returning *OSUpdatePolicyDeleteOSUpdatePolicyResponse
func (c *ClientWithResponses) OSUpdatePolicyDeleteOSUpdatePolicyWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdatePolicyDeleteOSUpdatePolicyResponse, error) {
	rsp, err := c.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOSUpdatePolicyDeleteOSUpdatePolicyResponse(rsp)
}

// OSUpdatePolicyGetOSUpdatePolicyWithResponse request returning *OSUpdatePolicyGetOSUpdatePolicyResponse
func (c *ClientWithResponses) OSUpdatePolicyGetOSUpdatePolicyWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdatePolicyGetOSUpdatePolicyResponse, error) {
	rsp, err := c.OSUpdatePolicyGetOSUpdatePolicy(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOSUpdatePolicyGetOSUpdatePolicyResponse(rsp)
}

// OSUpdateRunListOSUpdateRunWithResponse request returning *OSUpdateRunListOSUpdateRunResponse
func (c *ClientWithResponses) OSUpdateRunListOSUpdateRunWithResponse(ctx context.Context, projectName string, params *OSUpdateRunListOSUpdateRunParams, reqEditors ...RequestEditorFn) (*OSUpdateRunListOSUpdateRunResponse, error) {
	rsp, err := c.OSUpdateRunListOSUpdateRun(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOSUpdateRunListOSUpdateRunResponse(rsp)
}

// OSUpdateRunDeleteOSUpdateRunWithResponse request returning *OSUpdateRunDeleteOSUpdateRunResponse
func (c *ClientWithResponses) OSUpdateRunDeleteOSUpdateRunWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdateRunDeleteOSUpdateRunResponse, error) {
	rsp, err := c.OSUpdateRunDeleteOSUpdateRun(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOSUpdateRunDeleteOSUpdateRunResponse(rsp)
}

// OSUpdateRunGetOSUpdateRunWithResponse request returning *OSUpdateRunGetOSUpdateRunResponse
func (c *ClientWithResponses) OSUpdateRunGetOSUpdateRunWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*OSUpdateRunGetOSUpdateRunResponse, error) {
	rsp, err := c.OSUpdateRunGetOSUpdateRun(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOSUpdateRunGetOSUpdateRunResponse(rsp)
}

// ProviderServiceListProvidersWithResponse request returning *ProviderServiceListProvidersResponse
func (c *ClientWithResponses) ProviderServiceListProvidersWithResponse(ctx context.Context, projectName string, params *ProviderServiceListProvidersParams, reqEditors ...RequestEditorFn) (*ProviderServiceListProvidersResponse, error) {
	rsp, err := c.ProviderServiceListProviders(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProviderServiceListProvidersResponse(rsp)
}

// ProviderServiceCreateProviderWithBodyWithResponse request with arbitrary body returning *ProviderServiceCreateProviderResponse
func (c *ClientWithResponses) ProviderServiceCreateProviderWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProviderServiceCreateProviderResponse, error) {
	rsp, err := c.ProviderServiceCreateProviderWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProviderServiceCreateProviderResponse(rsp)
}

func (c *ClientWithResponses) ProviderServiceCreateProviderWithResponse(ctx context.Context, projectName string, body ProviderServiceCreateProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*ProviderServiceCreateProviderResponse, error) {
	rsp, err := c.ProviderServiceCreateProvider(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProviderServiceCreateProviderResponse(rsp)
}

// ProviderServiceDeleteProviderWithResponse request returning *ProviderServiceDeleteProviderResponse
func (c *ClientWithResponses) ProviderServiceDeleteProviderWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ProviderServiceDeleteProviderResponse, error) {
	rsp, err := c.ProviderServiceDeleteProvider(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProviderServiceDeleteProviderResponse(rsp)
}

// ProviderServiceGetProviderWithResponse request returning *ProviderServiceGetProviderResponse
func (c *ClientWithResponses) ProviderServiceGetProviderWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ProviderServiceGetProviderResponse, error) {
	rsp, err := c.ProviderServiceGetProvider(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProviderServiceGetProviderResponse(rsp)
}

// RegionServiceListRegionsWithResponse request returning *RegionServiceListRegionsResponse
func (c *ClientWithResponses) RegionServiceListRegionsWithResponse(ctx context.Context, projectName string, params *RegionServiceListRegionsParams, reqEditors ...RequestEditorFn) (*RegionServiceListRegionsResponse, error) {
	rsp, err := c.RegionServiceListRegions(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegionServiceListRegionsResponse(rsp)
}

// RegionServiceCreateRegionWithBodyWithResponse request with arbitrary body returning *RegionServiceCreateRegionResponse
func (c *ClientWithResponses) RegionServiceCreateRegionWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegionServiceCreateRegionResponse, error) {
	rsp, err := c.RegionServiceCreateRegionWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegionServiceCreateRegionResponse(rsp)
}

func (c *ClientWithResponses) RegionServiceCreateRegionWithResponse(ctx context.Context, projectName string, body RegionServiceCreateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegionServiceCreateRegionResponse, error) {
	rsp, err := c.RegionServiceCreateRegion(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegionServiceCreateRegionResponse(rsp)
}

// SiteServiceDeleteSiteWithResponse request returning *SiteServiceDeleteSiteResponse
func (c *ClientWithResponses) SiteServiceDeleteSiteWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*SiteServiceDeleteSiteResponse, error) {
	rsp, err := c.SiteServiceDeleteSite(ctx, projectName, regionResourceId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiteServiceDeleteSiteResponse(rsp)
}

// SiteServiceGetSiteWithResponse request returning *SiteServiceGetSiteResponse
func (c *ClientWithResponses) SiteServiceGetSiteWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*SiteServiceGetSiteResponse, error) {
	rsp, err := c.SiteServiceGetSite(ctx, projectName, regionResourceId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiteServiceGetSiteResponse(rsp)
}

// SiteServicePatchSiteWithBodyWithResponse request with arbitrary body returning *SiteServicePatchSiteResponse
func (c *ClientWithResponses) SiteServicePatchSiteWithBodyWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SiteServicePatchSiteResponse, error) {
	rsp, err := c.SiteServicePatchSiteWithBody(ctx, projectName, regionResourceId, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiteServicePatchSiteResponse(rsp)
}

func (c *ClientWithResponses) SiteServicePatchSiteWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, body SiteServicePatchSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*SiteServicePatchSiteResponse, error) {
	rsp, err := c.SiteServicePatchSite(ctx, projectName, regionResourceId, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiteServicePatchSiteResponse(rsp)
}

// SiteServiceUpdateSiteWithBodyWithResponse request with arbitrary body returning *SiteServiceUpdateSiteResponse
func (c *ClientWithResponses) SiteServiceUpdateSiteWithBodyWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SiteServiceUpdateSiteResponse, error) {
	rsp, err := c.SiteServiceUpdateSiteWithBody(ctx, projectName, regionResourceId, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiteServiceUpdateSiteResponse(rsp)
}

func (c *ClientWithResponses) SiteServiceUpdateSiteWithResponse(ctx context.Context, projectName string, regionResourceId string, resourceId string, body SiteServiceUpdateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*SiteServiceUpdateSiteResponse, error) {
	rsp, err := c.SiteServiceUpdateSite(ctx, projectName, regionResourceId, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiteServiceUpdateSiteResponse(rsp)
}

// RegionServiceDeleteRegionWithResponse request returning *RegionServiceDeleteRegionResponse
func (c *ClientWithResponses) RegionServiceDeleteRegionWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*RegionServiceDeleteRegionResponse, error) {
	rsp, err := c.RegionServiceDeleteRegion(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegionServiceDeleteRegionResponse(rsp)
}

// RegionServiceGetRegionWithResponse request returning *RegionServiceGetRegionResponse
func (c *ClientWithResponses) RegionServiceGetRegionWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*RegionServiceGetRegionResponse, error) {
	rsp, err := c.RegionServiceGetRegion(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegionServiceGetRegionResponse(rsp)
}

// RegionServicePatchRegionWithBodyWithResponse request with arbitrary body returning *RegionServicePatchRegionResponse
func (c *ClientWithResponses) RegionServicePatchRegionWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegionServicePatchRegionResponse, error) {
	rsp, err := c.RegionServicePatchRegionWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegionServicePatchRegionResponse(rsp)
}

func (c *ClientWithResponses) RegionServicePatchRegionWithResponse(ctx context.Context, projectName string, resourceId string, body RegionServicePatchRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegionServicePatchRegionResponse, error) {
	rsp, err := c.RegionServicePatchRegion(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegionServicePatchRegionResponse(rsp)
}

// RegionServiceUpdateRegionWithBodyWithResponse request with arbitrary body returning *RegionServiceUpdateRegionResponse
func (c *ClientWithResponses) RegionServiceUpdateRegionWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegionServiceUpdateRegionResponse, error) {
	rsp, err := c.RegionServiceUpdateRegionWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegionServiceUpdateRegionResponse(rsp)
}

func (c *ClientWithResponses) RegionServiceUpdateRegionWithResponse(ctx context.Context, projectName string, resourceId string, body RegionServiceUpdateRegionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegionServiceUpdateRegionResponse, error) {
	rsp, err := c.RegionServiceUpdateRegion(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegionServiceUpdateRegionResponse(rsp)
}

// SiteServiceListSitesWithResponse request returning *SiteServiceListSitesResponse
func (c *ClientWithResponses) SiteServiceListSitesWithResponse(ctx context.Context, projectName string, resourceId string, params *SiteServiceListSitesParams, reqEditors ...RequestEditorFn) (*SiteServiceListSitesResponse, error) {
	rsp, err := c.SiteServiceListSites(ctx, projectName, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiteServiceListSitesResponse(rsp)
}

// SiteServiceCreateSiteWithBodyWithResponse request with arbitrary body returning *SiteServiceCreateSiteResponse
func (c *ClientWithResponses) SiteServiceCreateSiteWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SiteServiceCreateSiteResponse, error) {
	rsp, err := c.SiteServiceCreateSiteWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiteServiceCreateSiteResponse(rsp)
}

func (c *ClientWithResponses) SiteServiceCreateSiteWithResponse(ctx context.Context, projectName string, resourceId string, body SiteServiceCreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*SiteServiceCreateSiteResponse, error) {
	rsp, err := c.SiteServiceCreateSite(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiteServiceCreateSiteResponse(rsp)
}

// ScheduleServiceListRepeatedSchedulesWithResponse request returning *ScheduleServiceListRepeatedSchedulesResponse
func (c *ClientWithResponses) ScheduleServiceListRepeatedSchedulesWithResponse(ctx context.Context, projectName string, params *ScheduleServiceListRepeatedSchedulesParams, reqEditors ...RequestEditorFn) (*ScheduleServiceListRepeatedSchedulesResponse, error) {
	rsp, err := c.ScheduleServiceListRepeatedSchedules(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceListRepeatedSchedulesResponse(rsp)
}

// ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse request with arbitrary body returning *ScheduleServiceCreateRepeatedScheduleResponse
func (c *ClientWithResponses) ScheduleServiceCreateRepeatedScheduleWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateRepeatedScheduleResponse, error) {
	rsp, err := c.ScheduleServiceCreateRepeatedScheduleWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceCreateRepeatedScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduleServiceCreateRepeatedScheduleWithResponse(ctx context.Context, projectName string, body ScheduleServiceCreateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateRepeatedScheduleResponse, error) {
	rsp, err := c.ScheduleServiceCreateRepeatedSchedule(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceCreateRepeatedScheduleResponse(rsp)
}

// ScheduleServiceDeleteRepeatedScheduleWithResponse request returning *ScheduleServiceDeleteRepeatedScheduleResponse
func (c *ClientWithResponses) ScheduleServiceDeleteRepeatedScheduleWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceDeleteRepeatedScheduleResponse, error) {
	rsp, err := c.ScheduleServiceDeleteRepeatedSchedule(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceDeleteRepeatedScheduleResponse(rsp)
}

// ScheduleServiceGetRepeatedScheduleWithResponse request returning *ScheduleServiceGetRepeatedScheduleResponse
func (c *ClientWithResponses) ScheduleServiceGetRepeatedScheduleWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceGetRepeatedScheduleResponse, error) {
	rsp, err := c.ScheduleServiceGetRepeatedSchedule(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceGetRepeatedScheduleResponse(rsp)
}

// ScheduleServicePatchRepeatedScheduleWithBodyWithResponse request with arbitrary body returning *ScheduleServicePatchRepeatedScheduleResponse
func (c *ClientWithResponses) ScheduleServicePatchRepeatedScheduleWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServicePatchRepeatedScheduleResponse, error) {
	rsp, err := c.ScheduleServicePatchRepeatedScheduleWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServicePatchRepeatedScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduleServicePatchRepeatedScheduleWithResponse(ctx context.Context, projectName string, resourceId string, body ScheduleServicePatchRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServicePatchRepeatedScheduleResponse, error) {
	rsp, err := c.ScheduleServicePatchRepeatedSchedule(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServicePatchRepeatedScheduleResponse(rsp)
}

// ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse request with arbitrary body returning *ScheduleServiceUpdateRepeatedScheduleResponse
func (c *ClientWithResponses) ScheduleServiceUpdateRepeatedScheduleWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateRepeatedScheduleResponse, error) {
	rsp, err := c.ScheduleServiceUpdateRepeatedScheduleWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceUpdateRepeatedScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduleServiceUpdateRepeatedScheduleWithResponse(ctx context.Context, projectName string, resourceId string, body ScheduleServiceUpdateRepeatedScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateRepeatedScheduleResponse, error) {
	rsp, err := c.ScheduleServiceUpdateRepeatedSchedule(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceUpdateRepeatedScheduleResponse(rsp)
}

// ScheduleServiceListSingleSchedulesWithResponse request returning *ScheduleServiceListSingleSchedulesResponse
func (c *ClientWithResponses) ScheduleServiceListSingleSchedulesWithResponse(ctx context.Context, projectName string, params *ScheduleServiceListSingleSchedulesParams, reqEditors ...RequestEditorFn) (*ScheduleServiceListSingleSchedulesResponse, error) {
	rsp, err := c.ScheduleServiceListSingleSchedules(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceListSingleSchedulesResponse(rsp)
}

// ScheduleServiceCreateSingleScheduleWithBodyWithResponse request with arbitrary body returning *ScheduleServiceCreateSingleScheduleResponse
func (c *ClientWithResponses) ScheduleServiceCreateSingleScheduleWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateSingleScheduleResponse, error) {
	rsp, err := c.ScheduleServiceCreateSingleScheduleWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceCreateSingleScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduleServiceCreateSingleScheduleWithResponse(ctx context.Context, projectName string, body ScheduleServiceCreateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceCreateSingleScheduleResponse, error) {
	rsp, err := c.ScheduleServiceCreateSingleSchedule(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceCreateSingleScheduleResponse(rsp)
}

// ScheduleServiceDeleteSingleScheduleWithResponse request returning *ScheduleServiceDeleteSingleScheduleResponse
func (c *ClientWithResponses) ScheduleServiceDeleteSingleScheduleWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceDeleteSingleScheduleResponse, error) {
	rsp, err := c.ScheduleServiceDeleteSingleSchedule(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceDeleteSingleScheduleResponse(rsp)
}

// ScheduleServiceGetSingleScheduleWithResponse request returning *ScheduleServiceGetSingleScheduleResponse
func (c *ClientWithResponses) ScheduleServiceGetSingleScheduleWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*ScheduleServiceGetSingleScheduleResponse, error) {
	rsp, err := c.ScheduleServiceGetSingleSchedule(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceGetSingleScheduleResponse(rsp)
}

// ScheduleServicePatchSingleScheduleWithBodyWithResponse request with arbitrary body returning *ScheduleServicePatchSingleScheduleResponse
func (c *ClientWithResponses) ScheduleServicePatchSingleScheduleWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServicePatchSingleScheduleResponse, error) {
	rsp, err := c.ScheduleServicePatchSingleScheduleWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServicePatchSingleScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduleServicePatchSingleScheduleWithResponse(ctx context.Context, projectName string, resourceId string, body ScheduleServicePatchSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServicePatchSingleScheduleResponse, error) {
	rsp, err := c.ScheduleServicePatchSingleSchedule(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServicePatchSingleScheduleResponse(rsp)
}

// ScheduleServiceUpdateSingleScheduleWithBodyWithResponse request with arbitrary body returning *ScheduleServiceUpdateSingleScheduleResponse
func (c *ClientWithResponses) ScheduleServiceUpdateSingleScheduleWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateSingleScheduleResponse, error) {
	rsp, err := c.ScheduleServiceUpdateSingleScheduleWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceUpdateSingleScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduleServiceUpdateSingleScheduleWithResponse(ctx context.Context, projectName string, resourceId string, body ScheduleServiceUpdateSingleScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleServiceUpdateSingleScheduleResponse, error) {
	rsp, err := c.ScheduleServiceUpdateSingleSchedule(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleServiceUpdateSingleScheduleResponse(rsp)
}

// TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse request returning *TelemetryLogsGroupServiceListTelemetryLogsGroupsResponse
func (c *ClientWithResponses) TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse(ctx context.Context, projectName string, params *TelemetryLogsGroupServiceListTelemetryLogsGroupsParams, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceListTelemetryLogsGroupsResponse, error) {
	rsp, err := c.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsGroupServiceListTelemetryLogsGroupsResponse(rsp)
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse request with arbitrary body returning *TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse
func (c *ClientWithResponses) TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse, error) {
	rsp, err := c.TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse(rsp)
}

func (c *ClientWithResponses) TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse(ctx context.Context, projectName string, body TelemetryLogsGroupServiceCreateTelemetryLogsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse, error) {
	rsp, err := c.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse(rsp)
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse request returning *TelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse
func (c *ClientWithResponses) TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse, error) {
	rsp, err := c.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, projectName, loggroupResourceId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse(rsp)
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse request returning *TelemetryLogsProfileServiceGetTelemetryLogsProfileResponse
func (c *ClientWithResponses) TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceGetTelemetryLogsProfileResponse, error) {
	rsp, err := c.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, projectName, loggroupResourceId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsProfileServiceGetTelemetryLogsProfileResponse(rsp)
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse request with arbitrary body returning *TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse
func (c *ClientWithResponses) TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBodyWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse, error) {
	rsp, err := c.TelemetryLogsProfileServicePatchTelemetryLogsProfileWithBody(ctx, projectName, loggroupResourceId, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsProfileServicePatchTelemetryLogsProfileResponse(rsp)
}

func (c *ClientWithResponses) TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, body TelemetryLogsProfileServicePatchTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse, error) {
	rsp, err := c.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, projectName, loggroupResourceId, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsProfileServicePatchTelemetryLogsProfileResponse(rsp)
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse request with arbitrary body returning *TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse
func (c *ClientWithResponses) TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBodyWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse, error) {
	rsp, err := c.TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithBody(ctx, projectName, loggroupResourceId, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse(rsp)
}

func (c *ClientWithResponses) TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse(ctx context.Context, projectName string, loggroupResourceId string, resourceId string, body TelemetryLogsProfileServiceUpdateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse, error) {
	rsp, err := c.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, projectName, loggroupResourceId, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse(rsp)
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse request returning *TelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse
func (c *ClientWithResponses) TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse, error) {
	rsp, err := c.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse(rsp)
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse request returning *TelemetryLogsGroupServiceGetTelemetryLogsGroupResponse
func (c *ClientWithResponses) TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryLogsGroupServiceGetTelemetryLogsGroupResponse, error) {
	rsp, err := c.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsGroupServiceGetTelemetryLogsGroupResponse(rsp)
}

// TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse request returning *TelemetryLogsProfileServiceListTelemetryLogsProfilesResponse
func (c *ClientWithResponses) TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse(ctx context.Context, projectName string, resourceId string, params *TelemetryLogsProfileServiceListTelemetryLogsProfilesParams, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceListTelemetryLogsProfilesResponse, error) {
	rsp, err := c.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, projectName, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsProfileServiceListTelemetryLogsProfilesResponse(rsp)
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse request with arbitrary body returning *TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse
func (c *ClientWithResponses) TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse, error) {
	rsp, err := c.TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse(rsp)
}

func (c *ClientWithResponses) TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse(ctx context.Context, projectName string, resourceId string, body TelemetryLogsProfileServiceCreateTelemetryLogsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse, error) {
	rsp, err := c.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse(rsp)
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse request returning *TelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse
func (c *ClientWithResponses) TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse(ctx context.Context, projectName string, params *TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse, error) {
	rsp, err := c.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse(rsp)
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse request with arbitrary body returning *TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse
func (c *ClientWithResponses) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse, error) {
	rsp, err := c.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse(rsp)
}

func (c *ClientWithResponses) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse(ctx context.Context, projectName string, body TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse, error) {
	rsp, err := c.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse(rsp)
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse request returning *TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse
func (c *ClientWithResponses) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse, error) {
	rsp, err := c.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, projectName, metricgroupResourceId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse(rsp)
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse request returning *TelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse
func (c *ClientWithResponses) TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse, error) {
	rsp, err := c.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, projectName, metricgroupResourceId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse(rsp)
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse request with arbitrary body returning *TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse
func (c *ClientWithResponses) TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBodyWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse, error) {
	rsp, err := c.TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithBody(ctx, projectName, metricgroupResourceId, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse(rsp)
}

func (c *ClientWithResponses) TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, body TelemetryMetricsProfileServicePatchTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse, error) {
	rsp, err := c.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, projectName, metricgroupResourceId, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse(rsp)
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse request with arbitrary body returning *TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse
func (c *ClientWithResponses) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBodyWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse, error) {
	rsp, err := c.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithBody(ctx, projectName, metricgroupResourceId, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse(rsp)
}

func (c *ClientWithResponses) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse(ctx context.Context, projectName string, metricgroupResourceId string, resourceId string, body TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse, error) {
	rsp, err := c.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, projectName, metricgroupResourceId, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse(rsp)
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse request returning *TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse
func (c *ClientWithResponses) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse, error) {
	rsp, err := c.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse(rsp)
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse request returning *TelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse
func (c *ClientWithResponses) TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse(ctx context.Context, projectName string, resourceId string, reqEditors ...RequestEditorFn) (*TelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse, error) {
	rsp, err := c.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, projectName, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse(rsp)
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse request returning *TelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse
func (c *ClientWithResponses) TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse(ctx context.Context, projectName string, resourceId string, params *TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse, error) {
	rsp, err := c.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, projectName, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse(rsp)
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse request with arbitrary body returning *TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse
func (c *ClientWithResponses) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBodyWithResponse(ctx context.Context, projectName string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse, error) {
	rsp, err := c.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithBody(ctx, projectName, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse(rsp)
}

func (c *ClientWithResponses) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse(ctx context.Context, projectName string, resourceId string, body TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse, error) {
	rsp, err := c.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx, projectName, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse(rsp)
}

// ParseHostServiceListHostsResponse parses an HTTP response from a HostServiceListHostsWithResponse call
func ParseHostServiceListHostsResponse(rsp *http.Response) (*HostServiceListHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServiceListHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListHostsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHostServiceCreateHostResponse parses an HTTP response from a HostServiceCreateHostWithResponse call
func ParseHostServiceCreateHostResponse(rsp *http.Response) (*HostServiceCreateHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServiceCreateHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHostServiceRegisterHostResponse parses an HTTP response from a HostServiceRegisterHostWithResponse call
func ParseHostServiceRegisterHostResponse(rsp *http.Response) (*HostServiceRegisterHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServiceRegisterHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHostServiceGetHostsSummaryResponse parses an HTTP response from a HostServiceGetHostsSummaryWithResponse call
func ParseHostServiceGetHostsSummaryResponse(rsp *http.Response) (*HostServiceGetHostsSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServiceGetHostsSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetHostSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHostServiceDeleteHostResponse parses an HTTP response from a HostServiceDeleteHostWithResponse call
func ParseHostServiceDeleteHostResponse(rsp *http.Response) (*HostServiceDeleteHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServiceDeleteHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteHostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHostServiceGetHostResponse parses an HTTP response from a HostServiceGetHostWithResponse call
func ParseHostServiceGetHostResponse(rsp *http.Response) (*HostServiceGetHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServiceGetHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHostServicePatchHostResponse parses an HTTP response from a HostServicePatchHostWithResponse call
func ParseHostServicePatchHostResponse(rsp *http.Response) (*HostServicePatchHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServicePatchHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHostServiceUpdateHostResponse parses an HTTP response from a HostServiceUpdateHostWithResponse call
func ParseHostServiceUpdateHostResponse(rsp *http.Response) (*HostServiceUpdateHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServiceUpdateHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHostServiceInvalidateHostResponse parses an HTTP response from a HostServiceInvalidateHostWithResponse call
func ParseHostServiceInvalidateHostResponse(rsp *http.Response) (*HostServiceInvalidateHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServiceInvalidateHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvalidateHostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHostServiceOnboardHostResponse parses an HTTP response from a HostServiceOnboardHostWithResponse call
func ParseHostServiceOnboardHostResponse(rsp *http.Response) (*HostServiceOnboardHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServiceOnboardHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardHostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHostServicePatchRegisterHostResponse parses an HTTP response from a HostServicePatchRegisterHostWithResponse call
func ParseHostServicePatchRegisterHostResponse(rsp *http.Response) (*HostServicePatchRegisterHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HostServicePatchRegisterHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInstanceServiceListInstancesResponse parses an HTTP response from a InstanceServiceListInstancesWithResponse call
func ParseInstanceServiceListInstancesResponse(rsp *http.Response) (*InstanceServiceListInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceServiceListInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListInstancesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInstanceServiceCreateInstanceResponse parses an HTTP response from a InstanceServiceCreateInstanceWithResponse call
func ParseInstanceServiceCreateInstanceResponse(rsp *http.Response) (*InstanceServiceCreateInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceServiceCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInstanceServiceDeleteInstanceResponse parses an HTTP response from a InstanceServiceDeleteInstanceWithResponse call
func ParseInstanceServiceDeleteInstanceResponse(rsp *http.Response) (*InstanceServiceDeleteInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceServiceDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteInstanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInstanceServiceGetInstanceResponse parses an HTTP response from a InstanceServiceGetInstanceWithResponse call
func ParseInstanceServiceGetInstanceResponse(rsp *http.Response) (*InstanceServiceGetInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceServiceGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInstanceServicePatchInstanceResponse parses an HTTP response from a InstanceServicePatchInstanceWithResponse call
func ParseInstanceServicePatchInstanceResponse(rsp *http.Response) (*InstanceServicePatchInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceServicePatchInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInstanceServiceUpdateInstanceResponse parses an HTTP response from a InstanceServiceUpdateInstanceWithResponse call
func ParseInstanceServiceUpdateInstanceResponse(rsp *http.Response) (*InstanceServiceUpdateInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceServiceUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInstanceServiceInvalidateInstanceResponse parses an HTTP response from a InstanceServiceInvalidateInstanceWithResponse call
func ParseInstanceServiceInvalidateInstanceResponse(rsp *http.Response) (*InstanceServiceInvalidateInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceServiceInvalidateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvalidateInstanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOperatingSystemServiceListOperatingSystemsResponse parses an HTTP response from a OperatingSystemServiceListOperatingSystemsWithResponse call
func ParseOperatingSystemServiceListOperatingSystemsResponse(rsp *http.Response) (*OperatingSystemServiceListOperatingSystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperatingSystemServiceListOperatingSystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListOperatingSystemsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOperatingSystemServiceCreateOperatingSystemResponse parses an HTTP response from a OperatingSystemServiceCreateOperatingSystemWithResponse call
func ParseOperatingSystemServiceCreateOperatingSystemResponse(rsp *http.Response) (*OperatingSystemServiceCreateOperatingSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperatingSystemServiceCreateOperatingSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOperatingSystemServiceDeleteOperatingSystemResponse parses an HTTP response from a OperatingSystemServiceDeleteOperatingSystemWithResponse call
func ParseOperatingSystemServiceDeleteOperatingSystemResponse(rsp *http.Response) (*OperatingSystemServiceDeleteOperatingSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperatingSystemServiceDeleteOperatingSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteOperatingSystemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOperatingSystemServiceGetOperatingSystemResponse parses an HTTP response from a OperatingSystemServiceGetOperatingSystemWithResponse call
func ParseOperatingSystemServiceGetOperatingSystemResponse(rsp *http.Response) (*OperatingSystemServiceGetOperatingSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperatingSystemServiceGetOperatingSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOperatingSystemServicePatchOperatingSystemResponse parses an HTTP response from a OperatingSystemServicePatchOperatingSystemWithResponse call
func ParseOperatingSystemServicePatchOperatingSystemResponse(rsp *http.Response) (*OperatingSystemServicePatchOperatingSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperatingSystemServicePatchOperatingSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOperatingSystemServiceUpdateOperatingSystemResponse parses an HTTP response from a OperatingSystemServiceUpdateOperatingSystemWithResponse call
func ParseOperatingSystemServiceUpdateOperatingSystemResponse(rsp *http.Response) (*OperatingSystemServiceUpdateOperatingSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperatingSystemServiceUpdateOperatingSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceListSchedulesResponse parses an HTTP response from a ScheduleServiceListSchedulesWithResponse call
func ParseScheduleServiceListSchedulesResponse(rsp *http.Response) (*ScheduleServiceListSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceListSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkloadServiceListWorkloadsResponse parses an HTTP response from a WorkloadServiceListWorkloadsWithResponse call
func ParseWorkloadServiceListWorkloadsResponse(rsp *http.Response) (*WorkloadServiceListWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadServiceListWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkloadServiceCreateWorkloadResponse parses an HTTP response from a WorkloadServiceCreateWorkloadWithResponse call
func ParseWorkloadServiceCreateWorkloadResponse(rsp *http.Response) (*WorkloadServiceCreateWorkloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadServiceCreateWorkloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkloadServiceDeleteWorkloadResponse parses an HTTP response from a WorkloadServiceDeleteWorkloadWithResponse call
func ParseWorkloadServiceDeleteWorkloadResponse(rsp *http.Response) (*WorkloadServiceDeleteWorkloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadServiceDeleteWorkloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteWorkloadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkloadServiceGetWorkloadResponse parses an HTTP response from a WorkloadServiceGetWorkloadWithResponse call
func ParseWorkloadServiceGetWorkloadResponse(rsp *http.Response) (*WorkloadServiceGetWorkloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadServiceGetWorkloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkloadServicePatchWorkloadResponse parses an HTTP response from a WorkloadServicePatchWorkloadWithResponse call
func ParseWorkloadServicePatchWorkloadResponse(rsp *http.Response) (*WorkloadServicePatchWorkloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadServicePatchWorkloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkloadServiceUpdateWorkloadResponse parses an HTTP response from a WorkloadServiceUpdateWorkloadWithResponse call
func ParseWorkloadServiceUpdateWorkloadResponse(rsp *http.Response) (*WorkloadServiceUpdateWorkloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadServiceUpdateWorkloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkloadMemberServiceListWorkloadMembersResponse parses an HTTP response from a WorkloadMemberServiceListWorkloadMembersWithResponse call
func ParseWorkloadMemberServiceListWorkloadMembersResponse(rsp *http.Response) (*WorkloadMemberServiceListWorkloadMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadMemberServiceListWorkloadMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListWorkloadMembersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkloadMemberServiceCreateWorkloadMemberResponse parses an HTTP response from a WorkloadMemberServiceCreateWorkloadMemberWithResponse call
func ParseWorkloadMemberServiceCreateWorkloadMemberResponse(rsp *http.Response) (*WorkloadMemberServiceCreateWorkloadMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadMemberServiceCreateWorkloadMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkloadMemberServiceDeleteWorkloadMemberResponse parses an HTTP response from a WorkloadMemberServiceDeleteWorkloadMemberWithResponse call
func ParseWorkloadMemberServiceDeleteWorkloadMemberResponse(rsp *http.Response) (*WorkloadMemberServiceDeleteWorkloadMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadMemberServiceDeleteWorkloadMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteWorkloadMemberResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkloadMemberServiceGetWorkloadMemberResponse parses an HTTP response from a WorkloadMemberServiceGetWorkloadMemberWithResponse call
func ParseWorkloadMemberServiceGetWorkloadMemberResponse(rsp *http.Response) (*WorkloadMemberServiceGetWorkloadMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadMemberServiceGetWorkloadMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomConfigServiceListCustomConfigsResponse parses an HTTP response from a CustomConfigServiceListCustomConfigsWithResponse call
func ParseCustomConfigServiceListCustomConfigsResponse(rsp *http.Response) (*CustomConfigServiceListCustomConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomConfigServiceListCustomConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCustomConfigsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomConfigServiceCreateCustomConfigResponse parses an HTTP response from a CustomConfigServiceCreateCustomConfigWithResponse call
func ParseCustomConfigServiceCreateCustomConfigResponse(rsp *http.Response) (*CustomConfigServiceCreateCustomConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomConfigServiceCreateCustomConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomConfigServiceDeleteCustomConfigResponse parses an HTTP response from a CustomConfigServiceDeleteCustomConfigWithResponse call
func ParseCustomConfigServiceDeleteCustomConfigResponse(rsp *http.Response) (*CustomConfigServiceDeleteCustomConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomConfigServiceDeleteCustomConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteCustomConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomConfigServiceGetCustomConfigResponse parses an HTTP response from a CustomConfigServiceGetCustomConfigWithResponse call
func ParseCustomConfigServiceGetCustomConfigResponse(rsp *http.Response) (*CustomConfigServiceGetCustomConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomConfigServiceGetCustomConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLocalAccountServiceListLocalAccountsResponse parses an HTTP response from a LocalAccountServiceListLocalAccountsWithResponse call
func ParseLocalAccountServiceListLocalAccountsResponse(rsp *http.Response) (*LocalAccountServiceListLocalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocalAccountServiceListLocalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListLocalAccountsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLocalAccountServiceCreateLocalAccountResponse parses an HTTP response from a LocalAccountServiceCreateLocalAccountWithResponse call
func ParseLocalAccountServiceCreateLocalAccountResponse(rsp *http.Response) (*LocalAccountServiceCreateLocalAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocalAccountServiceCreateLocalAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocalAccountResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLocalAccountServiceDeleteLocalAccountResponse parses an HTTP response from a LocalAccountServiceDeleteLocalAccountWithResponse call
func ParseLocalAccountServiceDeleteLocalAccountResponse(rsp *http.Response) (*LocalAccountServiceDeleteLocalAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocalAccountServiceDeleteLocalAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteLocalAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLocalAccountServiceGetLocalAccountResponse parses an HTTP response from a LocalAccountServiceGetLocalAccountWithResponse call
func ParseLocalAccountServiceGetLocalAccountResponse(rsp *http.Response) (*LocalAccountServiceGetLocalAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocalAccountServiceGetLocalAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocalAccountResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLocationServiceListLocationsResponse parses an HTTP response from a LocationServiceListLocationsWithResponse call
func ParseLocationServiceListLocationsResponse(rsp *http.Response) (*LocationServiceListLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocationServiceListLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListLocationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOSUpdatePolicyListOSUpdatePolicyResponse parses an HTTP response from a OSUpdatePolicyListOSUpdatePolicyWithResponse call
func ParseOSUpdatePolicyListOSUpdatePolicyResponse(rsp *http.Response) (*OSUpdatePolicyListOSUpdatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OSUpdatePolicyListOSUpdatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListOSUpdatePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOSUpdatePolicyCreateOSUpdatePolicyResponse parses an HTTP response from a OSUpdatePolicyCreateOSUpdatePolicyWithResponse call
func ParseOSUpdatePolicyCreateOSUpdatePolicyResponse(rsp *http.Response) (*OSUpdatePolicyCreateOSUpdatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OSUpdatePolicyCreateOSUpdatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OSUpdatePolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOSUpdatePolicyDeleteOSUpdatePolicyResponse parses an HTTP response from a OSUpdatePolicyDeleteOSUpdatePolicyWithResponse call
func ParseOSUpdatePolicyDeleteOSUpdatePolicyResponse(rsp *http.Response) (*OSUpdatePolicyDeleteOSUpdatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OSUpdatePolicyDeleteOSUpdatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteOSUpdatePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOSUpdatePolicyGetOSUpdatePolicyResponse parses an HTTP response from a OSUpdatePolicyGetOSUpdatePolicyWithResponse call
func ParseOSUpdatePolicyGetOSUpdatePolicyResponse(rsp *http.Response) (*OSUpdatePolicyGetOSUpdatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OSUpdatePolicyGetOSUpdatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OSUpdatePolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOSUpdateRunListOSUpdateRunResponse parses an HTTP response from a OSUpdateRunListOSUpdateRunWithResponse call
func ParseOSUpdateRunListOSUpdateRunResponse(rsp *http.Response) (*OSUpdateRunListOSUpdateRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OSUpdateRunListOSUpdateRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListOSUpdateRunResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOSUpdateRunDeleteOSUpdateRunResponse parses an HTTP response from a OSUpdateRunDeleteOSUpdateRunWithResponse call
func ParseOSUpdateRunDeleteOSUpdateRunResponse(rsp *http.Response) (*OSUpdateRunDeleteOSUpdateRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OSUpdateRunDeleteOSUpdateRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteOSUpdateRunResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOSUpdateRunGetOSUpdateRunResponse parses an HTTP response from a OSUpdateRunGetOSUpdateRunWithResponse call
func ParseOSUpdateRunGetOSUpdateRunResponse(rsp *http.Response) (*OSUpdateRunGetOSUpdateRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OSUpdateRunGetOSUpdateRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OSUpdateRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProviderServiceListProvidersResponse parses an HTTP response from a ProviderServiceListProvidersWithResponse call
func ParseProviderServiceListProvidersResponse(rsp *http.Response) (*ProviderServiceListProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProviderServiceListProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListProvidersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProviderServiceCreateProviderResponse parses an HTTP response from a ProviderServiceCreateProviderWithResponse call
func ParseProviderServiceCreateProviderResponse(rsp *http.Response) (*ProviderServiceCreateProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProviderServiceCreateProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProviderResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProviderServiceDeleteProviderResponse parses an HTTP response from a ProviderServiceDeleteProviderWithResponse call
func ParseProviderServiceDeleteProviderResponse(rsp *http.Response) (*ProviderServiceDeleteProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProviderServiceDeleteProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteProviderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProviderServiceGetProviderResponse parses an HTTP response from a ProviderServiceGetProviderWithResponse call
func ParseProviderServiceGetProviderResponse(rsp *http.Response) (*ProviderServiceGetProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProviderServiceGetProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProviderResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRegionServiceListRegionsResponse parses an HTTP response from a RegionServiceListRegionsWithResponse call
func ParseRegionServiceListRegionsResponse(rsp *http.Response) (*RegionServiceListRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegionServiceListRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRegionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRegionServiceCreateRegionResponse parses an HTTP response from a RegionServiceCreateRegionWithResponse call
func ParseRegionServiceCreateRegionResponse(rsp *http.Response) (*RegionServiceCreateRegionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegionServiceCreateRegionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSiteServiceDeleteSiteResponse parses an HTTP response from a SiteServiceDeleteSiteWithResponse call
func ParseSiteServiceDeleteSiteResponse(rsp *http.Response) (*SiteServiceDeleteSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SiteServiceDeleteSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteSiteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSiteServiceGetSiteResponse parses an HTTP response from a SiteServiceGetSiteWithResponse call
func ParseSiteServiceGetSiteResponse(rsp *http.Response) (*SiteServiceGetSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SiteServiceGetSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SiteResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSiteServicePatchSiteResponse parses an HTTP response from a SiteServicePatchSiteWithResponse call
func ParseSiteServicePatchSiteResponse(rsp *http.Response) (*SiteServicePatchSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SiteServicePatchSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SiteResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSiteServiceUpdateSiteResponse parses an HTTP response from a SiteServiceUpdateSiteWithResponse call
func ParseSiteServiceUpdateSiteResponse(rsp *http.Response) (*SiteServiceUpdateSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SiteServiceUpdateSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SiteResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRegionServiceDeleteRegionResponse parses an HTTP response from a RegionServiceDeleteRegionWithResponse call
func ParseRegionServiceDeleteRegionResponse(rsp *http.Response) (*RegionServiceDeleteRegionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegionServiceDeleteRegionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteRegionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRegionServiceGetRegionResponse parses an HTTP response from a RegionServiceGetRegionWithResponse call
func ParseRegionServiceGetRegionResponse(rsp *http.Response) (*RegionServiceGetRegionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegionServiceGetRegionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRegionServicePatchRegionResponse parses an HTTP response from a RegionServicePatchRegionWithResponse call
func ParseRegionServicePatchRegionResponse(rsp *http.Response) (*RegionServicePatchRegionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegionServicePatchRegionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRegionServiceUpdateRegionResponse parses an HTTP response from a RegionServiceUpdateRegionWithResponse call
func ParseRegionServiceUpdateRegionResponse(rsp *http.Response) (*RegionServiceUpdateRegionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegionServiceUpdateRegionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSiteServiceListSitesResponse parses an HTTP response from a SiteServiceListSitesWithResponse call
func ParseSiteServiceListSitesResponse(rsp *http.Response) (*SiteServiceListSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SiteServiceListSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSitesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSiteServiceCreateSiteResponse parses an HTTP response from a SiteServiceCreateSiteWithResponse call
func ParseSiteServiceCreateSiteResponse(rsp *http.Response) (*SiteServiceCreateSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SiteServiceCreateSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SiteResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceListRepeatedSchedulesResponse parses an HTTP response from a ScheduleServiceListRepeatedSchedulesWithResponse call
func ParseScheduleServiceListRepeatedSchedulesResponse(rsp *http.Response) (*ScheduleServiceListRepeatedSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceListRepeatedSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRepeatedSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceCreateRepeatedScheduleResponse parses an HTTP response from a ScheduleServiceCreateRepeatedScheduleWithResponse call
func ParseScheduleServiceCreateRepeatedScheduleResponse(rsp *http.Response) (*ScheduleServiceCreateRepeatedScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceCreateRepeatedScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedScheduleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceDeleteRepeatedScheduleResponse parses an HTTP response from a ScheduleServiceDeleteRepeatedScheduleWithResponse call
func ParseScheduleServiceDeleteRepeatedScheduleResponse(rsp *http.Response) (*ScheduleServiceDeleteRepeatedScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceDeleteRepeatedScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteRepeatedScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceGetRepeatedScheduleResponse parses an HTTP response from a ScheduleServiceGetRepeatedScheduleWithResponse call
func ParseScheduleServiceGetRepeatedScheduleResponse(rsp *http.Response) (*ScheduleServiceGetRepeatedScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceGetRepeatedScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedScheduleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServicePatchRepeatedScheduleResponse parses an HTTP response from a ScheduleServicePatchRepeatedScheduleWithResponse call
func ParseScheduleServicePatchRepeatedScheduleResponse(rsp *http.Response) (*ScheduleServicePatchRepeatedScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServicePatchRepeatedScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedScheduleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceUpdateRepeatedScheduleResponse parses an HTTP response from a ScheduleServiceUpdateRepeatedScheduleWithResponse call
func ParseScheduleServiceUpdateRepeatedScheduleResponse(rsp *http.Response) (*ScheduleServiceUpdateRepeatedScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceUpdateRepeatedScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedScheduleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceListSingleSchedulesResponse parses an HTTP response from a ScheduleServiceListSingleSchedulesWithResponse call
func ParseScheduleServiceListSingleSchedulesResponse(rsp *http.Response) (*ScheduleServiceListSingleSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceListSingleSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSingleSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceCreateSingleScheduleResponse parses an HTTP response from a ScheduleServiceCreateSingleScheduleWithResponse call
func ParseScheduleServiceCreateSingleScheduleResponse(rsp *http.Response) (*ScheduleServiceCreateSingleScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceCreateSingleScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleScheduleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceDeleteSingleScheduleResponse parses an HTTP response from a ScheduleServiceDeleteSingleScheduleWithResponse call
func ParseScheduleServiceDeleteSingleScheduleResponse(rsp *http.Response) (*ScheduleServiceDeleteSingleScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceDeleteSingleScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteSingleScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceGetSingleScheduleResponse parses an HTTP response from a ScheduleServiceGetSingleScheduleWithResponse call
func ParseScheduleServiceGetSingleScheduleResponse(rsp *http.Response) (*ScheduleServiceGetSingleScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceGetSingleScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleScheduleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServicePatchSingleScheduleResponse parses an HTTP response from a ScheduleServicePatchSingleScheduleWithResponse call
func ParseScheduleServicePatchSingleScheduleResponse(rsp *http.Response) (*ScheduleServicePatchSingleScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServicePatchSingleScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleScheduleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScheduleServiceUpdateSingleScheduleResponse parses an HTTP response from a ScheduleServiceUpdateSingleScheduleWithResponse call
func ParseScheduleServiceUpdateSingleScheduleResponse(rsp *http.Response) (*ScheduleServiceUpdateSingleScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleServiceUpdateSingleScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleScheduleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryLogsGroupServiceListTelemetryLogsGroupsResponse parses an HTTP response from a TelemetryLogsGroupServiceListTelemetryLogsGroupsWithResponse call
func ParseTelemetryLogsGroupServiceListTelemetryLogsGroupsResponse(rsp *http.Response) (*TelemetryLogsGroupServiceListTelemetryLogsGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryLogsGroupServiceListTelemetryLogsGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTelemetryLogsGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse parses an HTTP response from a TelemetryLogsGroupServiceCreateTelemetryLogsGroupWithResponse call
func ParseTelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse(rsp *http.Response) (*TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryLogsGroupServiceCreateTelemetryLogsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsGroupResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse parses an HTTP response from a TelemetryLogsProfileServiceDeleteTelemetryLogsProfileWithResponse call
func ParseTelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse(rsp *http.Response) (*TelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryLogsProfileServiceDeleteTelemetryLogsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteTelemetryLogsProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryLogsProfileServiceGetTelemetryLogsProfileResponse parses an HTTP response from a TelemetryLogsProfileServiceGetTelemetryLogsProfileWithResponse call
func ParseTelemetryLogsProfileServiceGetTelemetryLogsProfileResponse(rsp *http.Response) (*TelemetryLogsProfileServiceGetTelemetryLogsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryLogsProfileServiceGetTelemetryLogsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryLogsProfileServicePatchTelemetryLogsProfileResponse parses an HTTP response from a TelemetryLogsProfileServicePatchTelemetryLogsProfileWithResponse call
func ParseTelemetryLogsProfileServicePatchTelemetryLogsProfileResponse(rsp *http.Response) (*TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryLogsProfileServicePatchTelemetryLogsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse parses an HTTP response from a TelemetryLogsProfileServiceUpdateTelemetryLogsProfileWithResponse call
func ParseTelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse(rsp *http.Response) (*TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryLogsProfileServiceUpdateTelemetryLogsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse parses an HTTP response from a TelemetryLogsGroupServiceDeleteTelemetryLogsGroupWithResponse call
func ParseTelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse(rsp *http.Response) (*TelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryLogsGroupServiceDeleteTelemetryLogsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteTelemetryLogsGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryLogsGroupServiceGetTelemetryLogsGroupResponse parses an HTTP response from a TelemetryLogsGroupServiceGetTelemetryLogsGroupWithResponse call
func ParseTelemetryLogsGroupServiceGetTelemetryLogsGroupResponse(rsp *http.Response) (*TelemetryLogsGroupServiceGetTelemetryLogsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryLogsGroupServiceGetTelemetryLogsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsGroupResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryLogsProfileServiceListTelemetryLogsProfilesResponse parses an HTTP response from a TelemetryLogsProfileServiceListTelemetryLogsProfilesWithResponse call
func ParseTelemetryLogsProfileServiceListTelemetryLogsProfilesResponse(rsp *http.Response) (*TelemetryLogsProfileServiceListTelemetryLogsProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryLogsProfileServiceListTelemetryLogsProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTelemetryLogsProfilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse parses an HTTP response from a TelemetryLogsProfileServiceCreateTelemetryLogsProfileWithResponse call
func ParseTelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse(rsp *http.Response) (*TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryLogsProfileServiceCreateTelemetryLogsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse parses an HTTP response from a TelemetryMetricsGroupServiceListTelemetryMetricsGroupsWithResponse call
func ParseTelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse(rsp *http.Response) (*TelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryMetricsGroupServiceListTelemetryMetricsGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTelemetryMetricsGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse parses an HTTP response from a TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupWithResponse call
func ParseTelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse(rsp *http.Response) (*TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryMetricsGroupServiceCreateTelemetryMetricsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsGroupResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse parses an HTTP response from a TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileWithResponse call
func ParseTelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse(rsp *http.Response) (*TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteTelemetryMetricsProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse parses an HTTP response from a TelemetryMetricsProfileServiceGetTelemetryMetricsProfileWithResponse call
func ParseTelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse(rsp *http.Response) (*TelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryMetricsProfileServiceGetTelemetryMetricsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse parses an HTTP response from a TelemetryMetricsProfileServicePatchTelemetryMetricsProfileWithResponse call
func ParseTelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse(rsp *http.Response) (*TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryMetricsProfileServicePatchTelemetryMetricsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse parses an HTTP response from a TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileWithResponse call
func ParseTelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse(rsp *http.Response) (*TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse parses an HTTP response from a TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupWithResponse call
func ParseTelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse(rsp *http.Response) (*TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteTelemetryMetricsGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse parses an HTTP response from a TelemetryMetricsGroupServiceGetTelemetryMetricsGroupWithResponse call
func ParseTelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse(rsp *http.Response) (*TelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryMetricsGroupServiceGetTelemetryMetricsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsGroupResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse parses an HTTP response from a TelemetryMetricsProfileServiceListTelemetryMetricsProfilesWithResponse call
func ParseTelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse(rsp *http.Response) (*TelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryMetricsProfileServiceListTelemetryMetricsProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTelemetryMetricsProfilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse parses an HTTP response from a TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileWithResponse call
func ParseTelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse(rsp *http.Response) (*TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TelemetryMetricsProfileServiceCreateTelemetryMetricsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
