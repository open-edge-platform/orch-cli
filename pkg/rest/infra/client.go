// Package infra provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package infra

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1ProjectsProjectNameCompute request
	GetV1ProjectsProjectNameCompute(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeHosts request
	GetV1ProjectsProjectNameComputeHosts(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeHostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameComputeHostsWithBody request with any body
	PostV1ProjectsProjectNameComputeHostsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameComputeHosts(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameComputeHostsRegisterWithBody request with any body
	PostV1ProjectsProjectNameComputeHostsRegisterWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameComputeHostsRegister(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeHostsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeHostsSummary request
	GetV1ProjectsProjectNameComputeHostsSummary(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeHostsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameComputeHostsHostIDWithBody request with any body
	DeleteV1ProjectsProjectNameComputeHostsHostIDWithBody(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV1ProjectsProjectNameComputeHostsHostID(ctx context.Context, projectName string, hostID string, body DeleteV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeHostsHostID request
	GetV1ProjectsProjectNameComputeHostsHostID(ctx context.Context, projectName string, hostID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameComputeHostsHostIDWithBody request with any body
	PatchV1ProjectsProjectNameComputeHostsHostIDWithBody(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameComputeHostsHostID(ctx context.Context, projectName string, hostID string, body PatchV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameComputeHostsHostIDWithBody request with any body
	PutV1ProjectsProjectNameComputeHostsHostIDWithBody(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectNameComputeHostsHostID(ctx context.Context, projectName string, hostID string, body PutV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithBody request with any body
	PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithBody(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectNameComputeHostsHostIDInvalidate(ctx context.Context, projectName string, hostID string, body PutV1ProjectsProjectNameComputeHostsHostIDInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameComputeHostsHostIDOnboard request
	PatchV1ProjectsProjectNameComputeHostsHostIDOnboard(ctx context.Context, projectName string, hostID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithBody request with any body
	PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithBody(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameComputeHostsHostIDRegister(ctx context.Context, projectName string, hostID string, body PatchV1ProjectsProjectNameComputeHostsHostIDRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeInstances request
	GetV1ProjectsProjectNameComputeInstances(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameComputeInstancesWithBody request with any body
	PostV1ProjectsProjectNameComputeInstancesWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameComputeInstances(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameComputeInstancesInstanceID request
	DeleteV1ProjectsProjectNameComputeInstancesInstanceID(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeInstancesInstanceID request
	GetV1ProjectsProjectNameComputeInstancesInstanceID(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithBody request with any body
	PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithBody(ctx context.Context, projectName string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameComputeInstancesInstanceID(ctx context.Context, projectName string, instanceID string, body PatchV1ProjectsProjectNameComputeInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidate request
	PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidate(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeOs request
	GetV1ProjectsProjectNameComputeOs(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeOsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameComputeOsWithBody request with any body
	PostV1ProjectsProjectNameComputeOsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameComputeOs(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeOsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameComputeOsOSResourceID request
	DeleteV1ProjectsProjectNameComputeOsOSResourceID(ctx context.Context, projectName string, osResourceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeOsOSResourceID request
	GetV1ProjectsProjectNameComputeOsOSResourceID(ctx context.Context, projectName string, osResourceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameComputeOsOSResourceIDWithBody request with any body
	PatchV1ProjectsProjectNameComputeOsOSResourceIDWithBody(ctx context.Context, projectName string, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameComputeOsOSResourceID(ctx context.Context, projectName string, osResourceID string, body PatchV1ProjectsProjectNameComputeOsOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameComputeOsOSResourceIDWithBody request with any body
	PutV1ProjectsProjectNameComputeOsOSResourceIDWithBody(ctx context.Context, projectName string, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectNameComputeOsOSResourceID(ctx context.Context, projectName string, osResourceID string, body PutV1ProjectsProjectNameComputeOsOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeSchedules request
	GetV1ProjectsProjectNameComputeSchedules(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeWorkloads request
	GetV1ProjectsProjectNameComputeWorkloads(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameComputeWorkloadsWithBody request with any body
	PostV1ProjectsProjectNameComputeWorkloadsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameComputeWorkloads(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadID request
	DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx context.Context, projectName string, workloadID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeWorkloadsWorkloadID request
	GetV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx context.Context, projectName string, workloadID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBody request with any body
	PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBody(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx context.Context, projectName string, workloadID string, body PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBody request with any body
	PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBody(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx context.Context, projectName string, workloadID string, body PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembers request
	GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembers(ctx context.Context, projectName string, workloadID string, params *GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithBody request with any body
	PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithBody(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembers(ctx context.Context, projectName string, workloadID string, body PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberID request
	DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberID(ctx context.Context, projectName string, workloadID string, workloadMemberID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberID request
	GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberID(ctx context.Context, projectName string, workloadID string, workloadMemberID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameLocalAccounts request
	GetV1ProjectsProjectNameLocalAccounts(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameLocalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameLocalAccountsWithBody request with any body
	PostV1ProjectsProjectNameLocalAccountsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameLocalAccounts(ctx context.Context, projectName string, body PostV1ProjectsProjectNameLocalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameLocalAccountsLocalAccountID request
	DeleteV1ProjectsProjectNameLocalAccountsLocalAccountID(ctx context.Context, projectName string, localAccountID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameLocalAccountsLocalAccountID request
	GetV1ProjectsProjectNameLocalAccountsLocalAccountID(ctx context.Context, projectName string, localAccountID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameLocations request
	GetV1ProjectsProjectNameLocations(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameProviders request
	GetV1ProjectsProjectNameProviders(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameProvidersWithBody request with any body
	PostV1ProjectsProjectNameProvidersWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameProviders(ctx context.Context, projectName string, body PostV1ProjectsProjectNameProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameProvidersProviderID request
	DeleteV1ProjectsProjectNameProvidersProviderID(ctx context.Context, projectName string, providerID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameProvidersProviderID request
	GetV1ProjectsProjectNameProvidersProviderID(ctx context.Context, projectName string, providerID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameRegions request
	GetV1ProjectsProjectNameRegions(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameRegionsWithBody request with any body
	PostV1ProjectsProjectNameRegionsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameRegions(ctx context.Context, projectName string, body PostV1ProjectsProjectNameRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameRegionsRegionID request
	DeleteV1ProjectsProjectNameRegionsRegionID(ctx context.Context, projectName string, regionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameRegionsRegionID request
	GetV1ProjectsProjectNameRegionsRegionID(ctx context.Context, projectName string, regionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameRegionsRegionIDWithBody request with any body
	PatchV1ProjectsProjectNameRegionsRegionIDWithBody(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameRegionsRegionID(ctx context.Context, projectName string, regionID string, body PatchV1ProjectsProjectNameRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameRegionsRegionIDWithBody request with any body
	PutV1ProjectsProjectNameRegionsRegionIDWithBody(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectNameRegionsRegionID(ctx context.Context, projectName string, regionID string, body PutV1ProjectsProjectNameRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameRegionsRegionIDSites request
	GetV1ProjectsProjectNameRegionsRegionIDSites(ctx context.Context, projectName string, regionID string, params *GetV1ProjectsProjectNameRegionsRegionIDSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameRegionsRegionIDSitesWithBody request with any body
	PostV1ProjectsProjectNameRegionsRegionIDSitesWithBody(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameRegionsRegionIDSites(ctx context.Context, projectName string, regionID string, body PostV1ProjectsProjectNameRegionsRegionIDSitesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteID request
	DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx context.Context, projectName string, regionID string, siteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameRegionsRegionIDSitesSiteID request
	GetV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx context.Context, projectName string, regionID string, siteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBody request with any body
	PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBody(ctx context.Context, projectName string, regionID string, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx context.Context, projectName string, regionID string, siteID string, body PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBody request with any body
	PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBody(ctx context.Context, projectName string, regionID string, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx context.Context, projectName string, regionID string, siteID string, body PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameSchedulesRepeated request
	GetV1ProjectsProjectNameSchedulesRepeated(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameSchedulesRepeatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameSchedulesRepeatedWithBody request with any body
	PostV1ProjectsProjectNameSchedulesRepeatedWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameSchedulesRepeated(ctx context.Context, projectName string, body PostV1ProjectsProjectNameSchedulesRepeatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID request
	DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx context.Context, projectName string, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID request
	GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx context.Context, projectName string, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBody request with any body
	PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBody(ctx context.Context, projectName string, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx context.Context, projectName string, repeatedScheduleID string, body PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBody request with any body
	PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBody(ctx context.Context, projectName string, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx context.Context, projectName string, repeatedScheduleID string, body PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameSchedulesSingle request
	GetV1ProjectsProjectNameSchedulesSingle(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameSchedulesSingleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameSchedulesSingleWithBody request with any body
	PostV1ProjectsProjectNameSchedulesSingleWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameSchedulesSingle(ctx context.Context, projectName string, body PostV1ProjectsProjectNameSchedulesSingleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleID request
	DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx context.Context, projectName string, singleScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameSchedulesSingleSingleScheduleID request
	GetV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx context.Context, projectName string, singleScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBody request with any body
	PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBody(ctx context.Context, projectName string, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx context.Context, projectName string, singleScheduleID string, body PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBody request with any body
	PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBody(ctx context.Context, projectName string, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx context.Context, projectName string, singleScheduleID string, body PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameTelemetryLoggroups request
	GetV1ProjectsProjectNameTelemetryLoggroups(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameTelemetryLoggroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameTelemetryLoggroupsWithBody request with any body
	PostV1ProjectsProjectNameTelemetryLoggroupsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameTelemetryLoggroups(ctx context.Context, projectName string, body PostV1ProjectsProjectNameTelemetryLoggroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupId request
	DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupId(ctx context.Context, projectName string, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupId request
	GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupId(ctx context.Context, projectName string, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofiles request
	GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofiles(ctx context.Context, projectName string, telemetryLogsGroupId string, params *GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithBody request with any body
	PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithBody(ctx context.Context, projectName string, telemetryLogsGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofiles(ctx context.Context, projectName string, telemetryLogsGroupId string, body PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId request
	DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId request
	GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBody request with any body
	PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBody(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, body PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBody request with any body
	PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBody(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, body PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameTelemetryMetricgroups request
	GetV1ProjectsProjectNameTelemetryMetricgroups(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameTelemetryMetricgroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameTelemetryMetricgroupsWithBody request with any body
	PostV1ProjectsProjectNameTelemetryMetricgroupsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameTelemetryMetricgroups(ctx context.Context, projectName string, body PostV1ProjectsProjectNameTelemetryMetricgroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupId request
	DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupId(ctx context.Context, projectName string, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupId request
	GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupId(ctx context.Context, projectName string, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofiles request
	GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofiles(ctx context.Context, projectName string, telemetryMetricsGroupId string, params *GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithBody request with any body
	PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithBody(ctx context.Context, projectName string, telemetryMetricsGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofiles(ctx context.Context, projectName string, telemetryMetricsGroupId string, body PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId request
	DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId request
	GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBody request with any body
	PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBody(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, body PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBody request with any body
	PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBody(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, body PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1ProjectsProjectNameCompute(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeHosts(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeHostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeHostsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeHostsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeHostsRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeHosts(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeHostsRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeHostsRegisterWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeHostsRegisterRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeHostsRegister(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeHostsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeHostsRegisterRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeHostsSummary(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeHostsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeHostsSummaryRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameComputeHostsHostIDWithBody(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameComputeHostsHostIDRequestWithBody(c.Server, projectName, hostID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameComputeHostsHostID(ctx context.Context, projectName string, hostID string, body DeleteV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameComputeHostsHostIDRequest(c.Server, projectName, hostID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeHostsHostID(ctx context.Context, projectName string, hostID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeHostsHostIDRequest(c.Server, projectName, hostID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeHostsHostIDWithBody(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeHostsHostIDRequestWithBody(c.Server, projectName, hostID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeHostsHostID(ctx context.Context, projectName string, hostID string, body PatchV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeHostsHostIDRequest(c.Server, projectName, hostID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameComputeHostsHostIDWithBody(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameComputeHostsHostIDRequestWithBody(c.Server, projectName, hostID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameComputeHostsHostID(ctx context.Context, projectName string, hostID string, body PutV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameComputeHostsHostIDRequest(c.Server, projectName, hostID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithBody(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameComputeHostsHostIDInvalidateRequestWithBody(c.Server, projectName, hostID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameComputeHostsHostIDInvalidate(ctx context.Context, projectName string, hostID string, body PutV1ProjectsProjectNameComputeHostsHostIDInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameComputeHostsHostIDInvalidateRequest(c.Server, projectName, hostID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeHostsHostIDOnboard(ctx context.Context, projectName string, hostID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeHostsHostIDOnboardRequest(c.Server, projectName, hostID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithBody(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeHostsHostIDRegisterRequestWithBody(c.Server, projectName, hostID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeHostsHostIDRegister(ctx context.Context, projectName string, hostID string, body PatchV1ProjectsProjectNameComputeHostsHostIDRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeHostsHostIDRegisterRequest(c.Server, projectName, hostID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeInstances(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeInstancesRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeInstancesWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeInstancesRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeInstances(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeInstancesRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameComputeInstancesInstanceID(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameComputeInstancesInstanceIDRequest(c.Server, projectName, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeInstancesInstanceID(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeInstancesInstanceIDRequest(c.Server, projectName, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithBody(ctx context.Context, projectName string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeInstancesInstanceIDRequestWithBody(c.Server, projectName, instanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeInstancesInstanceID(ctx context.Context, projectName string, instanceID string, body PatchV1ProjectsProjectNameComputeInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeInstancesInstanceIDRequest(c.Server, projectName, instanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidate(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateRequest(c.Server, projectName, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeOs(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeOsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeOsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeOsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeOsRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeOs(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeOsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeOsRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameComputeOsOSResourceID(ctx context.Context, projectName string, osResourceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameComputeOsOSResourceIDRequest(c.Server, projectName, osResourceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeOsOSResourceID(ctx context.Context, projectName string, osResourceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeOsOSResourceIDRequest(c.Server, projectName, osResourceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeOsOSResourceIDWithBody(ctx context.Context, projectName string, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeOsOSResourceIDRequestWithBody(c.Server, projectName, osResourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeOsOSResourceID(ctx context.Context, projectName string, osResourceID string, body PatchV1ProjectsProjectNameComputeOsOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeOsOSResourceIDRequest(c.Server, projectName, osResourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameComputeOsOSResourceIDWithBody(ctx context.Context, projectName string, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameComputeOsOSResourceIDRequestWithBody(c.Server, projectName, osResourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameComputeOsOSResourceID(ctx context.Context, projectName string, osResourceID string, body PutV1ProjectsProjectNameComputeOsOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameComputeOsOSResourceIDRequest(c.Server, projectName, osResourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeSchedules(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeSchedulesRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeWorkloads(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeWorkloadsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeWorkloadsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeWorkloadsRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeWorkloads(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeWorkloadsRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx context.Context, projectName string, workloadID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest(c.Server, projectName, workloadID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx context.Context, projectName string, workloadID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest(c.Server, projectName, workloadID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBody(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequestWithBody(c.Server, projectName, workloadID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx context.Context, projectName string, workloadID string, body PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest(c.Server, projectName, workloadID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBody(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequestWithBody(c.Server, projectName, workloadID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx context.Context, projectName string, workloadID string, body PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest(c.Server, projectName, workloadID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembers(ctx context.Context, projectName string, workloadID string, params *GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersRequest(c.Server, projectName, workloadID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithBody(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersRequestWithBody(c.Server, projectName, workloadID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembers(ctx context.Context, projectName string, workloadID string, body PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersRequest(c.Server, projectName, workloadID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberID(ctx context.Context, projectName string, workloadID string, workloadMemberID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDRequest(c.Server, projectName, workloadID, workloadMemberID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberID(ctx context.Context, projectName string, workloadID string, workloadMemberID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDRequest(c.Server, projectName, workloadID, workloadMemberID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameLocalAccounts(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameLocalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameLocalAccountsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameLocalAccountsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameLocalAccountsRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameLocalAccounts(ctx context.Context, projectName string, body PostV1ProjectsProjectNameLocalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameLocalAccountsRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameLocalAccountsLocalAccountID(ctx context.Context, projectName string, localAccountID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDRequest(c.Server, projectName, localAccountID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameLocalAccountsLocalAccountID(ctx context.Context, projectName string, localAccountID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameLocalAccountsLocalAccountIDRequest(c.Server, projectName, localAccountID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameLocations(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameLocationsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameProviders(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameProvidersRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameProvidersWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameProvidersRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameProviders(ctx context.Context, projectName string, body PostV1ProjectsProjectNameProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameProvidersRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameProvidersProviderID(ctx context.Context, projectName string, providerID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameProvidersProviderIDRequest(c.Server, projectName, providerID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameProvidersProviderID(ctx context.Context, projectName string, providerID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameProvidersProviderIDRequest(c.Server, projectName, providerID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameRegions(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameRegionsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameRegionsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameRegionsRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameRegions(ctx context.Context, projectName string, body PostV1ProjectsProjectNameRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameRegionsRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameRegionsRegionID(ctx context.Context, projectName string, regionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameRegionsRegionIDRequest(c.Server, projectName, regionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameRegionsRegionID(ctx context.Context, projectName string, regionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameRegionsRegionIDRequest(c.Server, projectName, regionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameRegionsRegionIDWithBody(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameRegionsRegionIDRequestWithBody(c.Server, projectName, regionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameRegionsRegionID(ctx context.Context, projectName string, regionID string, body PatchV1ProjectsProjectNameRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameRegionsRegionIDRequest(c.Server, projectName, regionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameRegionsRegionIDWithBody(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameRegionsRegionIDRequestWithBody(c.Server, projectName, regionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameRegionsRegionID(ctx context.Context, projectName string, regionID string, body PutV1ProjectsProjectNameRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameRegionsRegionIDRequest(c.Server, projectName, regionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameRegionsRegionIDSites(ctx context.Context, projectName string, regionID string, params *GetV1ProjectsProjectNameRegionsRegionIDSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameRegionsRegionIDSitesRequest(c.Server, projectName, regionID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameRegionsRegionIDSitesWithBody(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameRegionsRegionIDSitesRequestWithBody(c.Server, projectName, regionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameRegionsRegionIDSites(ctx context.Context, projectName string, regionID string, body PostV1ProjectsProjectNameRegionsRegionIDSitesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameRegionsRegionIDSitesRequest(c.Server, projectName, regionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx context.Context, projectName string, regionID string, siteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest(c.Server, projectName, regionID, siteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx context.Context, projectName string, regionID string, siteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest(c.Server, projectName, regionID, siteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBody(ctx context.Context, projectName string, regionID string, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequestWithBody(c.Server, projectName, regionID, siteID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx context.Context, projectName string, regionID string, siteID string, body PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest(c.Server, projectName, regionID, siteID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBody(ctx context.Context, projectName string, regionID string, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequestWithBody(c.Server, projectName, regionID, siteID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx context.Context, projectName string, regionID string, siteID string, body PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest(c.Server, projectName, regionID, siteID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameSchedulesRepeated(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameSchedulesRepeatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameSchedulesRepeatedRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameSchedulesRepeatedWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameSchedulesRepeatedRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameSchedulesRepeated(ctx context.Context, projectName string, body PostV1ProjectsProjectNameSchedulesRepeatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameSchedulesRepeatedRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx context.Context, projectName string, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest(c.Server, projectName, repeatedScheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx context.Context, projectName string, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest(c.Server, projectName, repeatedScheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBody(ctx context.Context, projectName string, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequestWithBody(c.Server, projectName, repeatedScheduleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx context.Context, projectName string, repeatedScheduleID string, body PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest(c.Server, projectName, repeatedScheduleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBody(ctx context.Context, projectName string, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequestWithBody(c.Server, projectName, repeatedScheduleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx context.Context, projectName string, repeatedScheduleID string, body PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest(c.Server, projectName, repeatedScheduleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameSchedulesSingle(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameSchedulesSingleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameSchedulesSingleRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameSchedulesSingleWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameSchedulesSingleRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameSchedulesSingle(ctx context.Context, projectName string, body PostV1ProjectsProjectNameSchedulesSingleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameSchedulesSingleRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx context.Context, projectName string, singleScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest(c.Server, projectName, singleScheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx context.Context, projectName string, singleScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest(c.Server, projectName, singleScheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBody(ctx context.Context, projectName string, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequestWithBody(c.Server, projectName, singleScheduleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx context.Context, projectName string, singleScheduleID string, body PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest(c.Server, projectName, singleScheduleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBody(ctx context.Context, projectName string, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequestWithBody(c.Server, projectName, singleScheduleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx context.Context, projectName string, singleScheduleID string, body PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest(c.Server, projectName, singleScheduleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameTelemetryLoggroups(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameTelemetryLoggroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameTelemetryLoggroupsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameTelemetryLoggroupsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameTelemetryLoggroupsRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameTelemetryLoggroups(ctx context.Context, projectName string, body PostV1ProjectsProjectNameTelemetryLoggroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameTelemetryLoggroupsRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupId(ctx context.Context, projectName string, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdRequest(c.Server, projectName, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupId(ctx context.Context, projectName string, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdRequest(c.Server, projectName, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofiles(ctx context.Context, projectName string, telemetryLogsGroupId string, params *GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesRequest(c.Server, projectName, telemetryLogsGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithBody(ctx context.Context, projectName string, telemetryLogsGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesRequestWithBody(c.Server, projectName, telemetryLogsGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofiles(ctx context.Context, projectName string, telemetryLogsGroupId string, body PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesRequest(c.Server, projectName, telemetryLogsGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest(c.Server, projectName, telemetryLogsGroupId, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest(c.Server, projectName, telemetryLogsGroupId, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBody(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequestWithBody(c.Server, projectName, telemetryLogsGroupId, telemetryLogsProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, body PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest(c.Server, projectName, telemetryLogsGroupId, telemetryLogsProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBody(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequestWithBody(c.Server, projectName, telemetryLogsGroupId, telemetryLogsProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, body PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest(c.Server, projectName, telemetryLogsGroupId, telemetryLogsProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameTelemetryMetricgroups(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameTelemetryMetricgroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameTelemetryMetricgroupsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameTelemetryMetricgroupsWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameTelemetryMetricgroupsRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameTelemetryMetricgroups(ctx context.Context, projectName string, body PostV1ProjectsProjectNameTelemetryMetricgroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameTelemetryMetricgroupsRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupId(ctx context.Context, projectName string, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdRequest(c.Server, projectName, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupId(ctx context.Context, projectName string, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdRequest(c.Server, projectName, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofiles(ctx context.Context, projectName string, telemetryMetricsGroupId string, params *GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesRequest(c.Server, projectName, telemetryMetricsGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithBody(ctx context.Context, projectName string, telemetryMetricsGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesRequestWithBody(c.Server, projectName, telemetryMetricsGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofiles(ctx context.Context, projectName string, telemetryMetricsGroupId string, body PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesRequest(c.Server, projectName, telemetryMetricsGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest(c.Server, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest(c.Server, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBody(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequestWithBody(c.Server, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, body PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest(c.Server, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBody(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequestWithBody(c.Server, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, body PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest(c.Server, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1ProjectsProjectNameComputeRequest generates requests for GetV1ProjectsProjectNameCompute
func NewGetV1ProjectsProjectNameComputeRequest(server string, projectName string, params *GetV1ProjectsProjectNameComputeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceID", runtime.ParamLocationQuery, *params.InstanceID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Metadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Detail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "detail", runtime.ParamLocationQuery, *params.Detail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeHostsRequest generates requests for GetV1ProjectsProjectNameComputeHosts
func NewGetV1ProjectsProjectNameComputeHostsRequest(server string, projectName string, params *GetV1ProjectsProjectNameComputeHostsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceID", runtime.ParamLocationQuery, *params.InstanceID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Metadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Detail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "detail", runtime.ParamLocationQuery, *params.Detail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameComputeHostsRequest calls the generic PostV1ProjectsProjectNameComputeHosts builder with application/json body
func NewPostV1ProjectsProjectNameComputeHostsRequest(server string, projectName string, body PostV1ProjectsProjectNameComputeHostsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameComputeHostsRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameComputeHostsRequestWithBody generates requests for PostV1ProjectsProjectNameComputeHosts with any type of body
func NewPostV1ProjectsProjectNameComputeHostsRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1ProjectsProjectNameComputeHostsRegisterRequest calls the generic PostV1ProjectsProjectNameComputeHostsRegister builder with application/json body
func NewPostV1ProjectsProjectNameComputeHostsRegisterRequest(server string, projectName string, body PostV1ProjectsProjectNameComputeHostsRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameComputeHostsRegisterRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameComputeHostsRegisterRequestWithBody generates requests for PostV1ProjectsProjectNameComputeHostsRegister with any type of body
func NewPostV1ProjectsProjectNameComputeHostsRegisterRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/register", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeHostsSummaryRequest generates requests for GetV1ProjectsProjectNameComputeHostsSummary
func NewGetV1ProjectsProjectNameComputeHostsSummaryRequest(server string, projectName string, params *GetV1ProjectsProjectNameComputeHostsSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1ProjectsProjectNameComputeHostsHostIDRequest calls the generic DeleteV1ProjectsProjectNameComputeHostsHostID builder with application/json body
func NewDeleteV1ProjectsProjectNameComputeHostsHostIDRequest(server string, projectName string, hostID string, body DeleteV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV1ProjectsProjectNameComputeHostsHostIDRequestWithBody(server, projectName, hostID, "application/json", bodyReader)
}

// NewDeleteV1ProjectsProjectNameComputeHostsHostIDRequestWithBody generates requests for DeleteV1ProjectsProjectNameComputeHostsHostID with any type of body
func NewDeleteV1ProjectsProjectNameComputeHostsHostIDRequestWithBody(server string, projectName string, hostID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeHostsHostIDRequest generates requests for GetV1ProjectsProjectNameComputeHostsHostID
func NewGetV1ProjectsProjectNameComputeHostsHostIDRequest(server string, projectName string, hostID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameComputeHostsHostIDRequest calls the generic PatchV1ProjectsProjectNameComputeHostsHostID builder with application/json body
func NewPatchV1ProjectsProjectNameComputeHostsHostIDRequest(server string, projectName string, hostID string, body PatchV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameComputeHostsHostIDRequestWithBody(server, projectName, hostID, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameComputeHostsHostIDRequestWithBody generates requests for PatchV1ProjectsProjectNameComputeHostsHostID with any type of body
func NewPatchV1ProjectsProjectNameComputeHostsHostIDRequestWithBody(server string, projectName string, hostID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameComputeHostsHostIDRequest calls the generic PutV1ProjectsProjectNameComputeHostsHostID builder with application/json body
func NewPutV1ProjectsProjectNameComputeHostsHostIDRequest(server string, projectName string, hostID string, body PutV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectNameComputeHostsHostIDRequestWithBody(server, projectName, hostID, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectNameComputeHostsHostIDRequestWithBody generates requests for PutV1ProjectsProjectNameComputeHostsHostID with any type of body
func NewPutV1ProjectsProjectNameComputeHostsHostIDRequestWithBody(server string, projectName string, hostID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameComputeHostsHostIDInvalidateRequest calls the generic PutV1ProjectsProjectNameComputeHostsHostIDInvalidate builder with application/json body
func NewPutV1ProjectsProjectNameComputeHostsHostIDInvalidateRequest(server string, projectName string, hostID string, body PutV1ProjectsProjectNameComputeHostsHostIDInvalidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectNameComputeHostsHostIDInvalidateRequestWithBody(server, projectName, hostID, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectNameComputeHostsHostIDInvalidateRequestWithBody generates requests for PutV1ProjectsProjectNameComputeHostsHostIDInvalidate with any type of body
func NewPutV1ProjectsProjectNameComputeHostsHostIDInvalidateRequestWithBody(server string, projectName string, hostID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s/invalidate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchV1ProjectsProjectNameComputeHostsHostIDOnboardRequest generates requests for PatchV1ProjectsProjectNameComputeHostsHostIDOnboard
func NewPatchV1ProjectsProjectNameComputeHostsHostIDOnboardRequest(server string, projectName string, hostID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s/onboard", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameComputeHostsHostIDRegisterRequest calls the generic PatchV1ProjectsProjectNameComputeHostsHostIDRegister builder with application/json body
func NewPatchV1ProjectsProjectNameComputeHostsHostIDRegisterRequest(server string, projectName string, hostID string, body PatchV1ProjectsProjectNameComputeHostsHostIDRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameComputeHostsHostIDRegisterRequestWithBody(server, projectName, hostID, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameComputeHostsHostIDRegisterRequestWithBody generates requests for PatchV1ProjectsProjectNameComputeHostsHostIDRegister with any type of body
func NewPatchV1ProjectsProjectNameComputeHostsHostIDRegisterRequestWithBody(server string, projectName string, hostID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/hosts/%s/register", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeInstancesRequest generates requests for GetV1ProjectsProjectNameComputeInstances
func NewGetV1ProjectsProjectNameComputeInstancesRequest(server string, projectName string, params *GetV1ProjectsProjectNameComputeInstancesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorkloadMemberID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workloadMemberID", runtime.ParamLocationQuery, *params.WorkloadMemberID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostID", runtime.ParamLocationQuery, *params.HostID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameComputeInstancesRequest calls the generic PostV1ProjectsProjectNameComputeInstances builder with application/json body
func NewPostV1ProjectsProjectNameComputeInstancesRequest(server string, projectName string, body PostV1ProjectsProjectNameComputeInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameComputeInstancesRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameComputeInstancesRequestWithBody generates requests for PostV1ProjectsProjectNameComputeInstances with any type of body
func NewPostV1ProjectsProjectNameComputeInstancesRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameComputeInstancesInstanceIDRequest generates requests for DeleteV1ProjectsProjectNameComputeInstancesInstanceID
func NewDeleteV1ProjectsProjectNameComputeInstancesInstanceIDRequest(server string, projectName string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeInstancesInstanceIDRequest generates requests for GetV1ProjectsProjectNameComputeInstancesInstanceID
func NewGetV1ProjectsProjectNameComputeInstancesInstanceIDRequest(server string, projectName string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameComputeInstancesInstanceIDRequest calls the generic PatchV1ProjectsProjectNameComputeInstancesInstanceID builder with application/json body
func NewPatchV1ProjectsProjectNameComputeInstancesInstanceIDRequest(server string, projectName string, instanceID string, body PatchV1ProjectsProjectNameComputeInstancesInstanceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameComputeInstancesInstanceIDRequestWithBody(server, projectName, instanceID, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameComputeInstancesInstanceIDRequestWithBody generates requests for PatchV1ProjectsProjectNameComputeInstancesInstanceID with any type of body
func NewPatchV1ProjectsProjectNameComputeInstancesInstanceIDRequestWithBody(server string, projectName string, instanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateRequest generates requests for PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidate
func NewPutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateRequest(server string, projectName string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/instances/%s/invalidate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeOsRequest generates requests for GetV1ProjectsProjectNameComputeOs
func NewGetV1ProjectsProjectNameComputeOsRequest(server string, projectName string, params *GetV1ProjectsProjectNameComputeOsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameComputeOsRequest calls the generic PostV1ProjectsProjectNameComputeOs builder with application/json body
func NewPostV1ProjectsProjectNameComputeOsRequest(server string, projectName string, body PostV1ProjectsProjectNameComputeOsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameComputeOsRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameComputeOsRequestWithBody generates requests for PostV1ProjectsProjectNameComputeOs with any type of body
func NewPostV1ProjectsProjectNameComputeOsRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameComputeOsOSResourceIDRequest generates requests for DeleteV1ProjectsProjectNameComputeOsOSResourceID
func NewDeleteV1ProjectsProjectNameComputeOsOSResourceIDRequest(server string, projectName string, osResourceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "OSResourceID", runtime.ParamLocationPath, osResourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeOsOSResourceIDRequest generates requests for GetV1ProjectsProjectNameComputeOsOSResourceID
func NewGetV1ProjectsProjectNameComputeOsOSResourceIDRequest(server string, projectName string, osResourceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "OSResourceID", runtime.ParamLocationPath, osResourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameComputeOsOSResourceIDRequest calls the generic PatchV1ProjectsProjectNameComputeOsOSResourceID builder with application/json body
func NewPatchV1ProjectsProjectNameComputeOsOSResourceIDRequest(server string, projectName string, osResourceID string, body PatchV1ProjectsProjectNameComputeOsOSResourceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameComputeOsOSResourceIDRequestWithBody(server, projectName, osResourceID, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameComputeOsOSResourceIDRequestWithBody generates requests for PatchV1ProjectsProjectNameComputeOsOSResourceID with any type of body
func NewPatchV1ProjectsProjectNameComputeOsOSResourceIDRequestWithBody(server string, projectName string, osResourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "OSResourceID", runtime.ParamLocationPath, osResourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameComputeOsOSResourceIDRequest calls the generic PutV1ProjectsProjectNameComputeOsOSResourceID builder with application/json body
func NewPutV1ProjectsProjectNameComputeOsOSResourceIDRequest(server string, projectName string, osResourceID string, body PutV1ProjectsProjectNameComputeOsOSResourceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectNameComputeOsOSResourceIDRequestWithBody(server, projectName, osResourceID, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectNameComputeOsOSResourceIDRequestWithBody generates requests for PutV1ProjectsProjectNameComputeOsOSResourceID with any type of body
func NewPutV1ProjectsProjectNameComputeOsOSResourceIDRequestWithBody(server string, projectName string, osResourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "OSResourceID", runtime.ParamLocationPath, osResourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/os/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeSchedulesRequest generates requests for GetV1ProjectsProjectNameComputeSchedules
func NewGetV1ProjectsProjectNameComputeSchedulesRequest(server string, projectName string, params *GetV1ProjectsProjectNameComputeSchedulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/schedules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionID", runtime.ParamLocationQuery, *params.RegionID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostID", runtime.ParamLocationQuery, *params.HostID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnixEpoch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unix_epoch", runtime.ParamLocationQuery, *params.UnixEpoch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeWorkloadsRequest generates requests for GetV1ProjectsProjectNameComputeWorkloads
func NewGetV1ProjectsProjectNameComputeWorkloadsRequest(server string, projectName string, params *GetV1ProjectsProjectNameComputeWorkloadsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Kind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kind", runtime.ParamLocationQuery, *params.Kind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameComputeWorkloadsRequest calls the generic PostV1ProjectsProjectNameComputeWorkloads builder with application/json body
func NewPostV1ProjectsProjectNameComputeWorkloadsRequest(server string, projectName string, body PostV1ProjectsProjectNameComputeWorkloadsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameComputeWorkloadsRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameComputeWorkloadsRequestWithBody generates requests for PostV1ProjectsProjectNameComputeWorkloads with any type of body
func NewPostV1ProjectsProjectNameComputeWorkloadsRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest generates requests for DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadID
func NewDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest(server string, projectName string, workloadID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest generates requests for GetV1ProjectsProjectNameComputeWorkloadsWorkloadID
func NewGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest(server string, projectName string, workloadID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest calls the generic PatchV1ProjectsProjectNameComputeWorkloadsWorkloadID builder with application/json body
func NewPatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest(server string, projectName string, workloadID string, body PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequestWithBody(server, projectName, workloadID, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequestWithBody generates requests for PatchV1ProjectsProjectNameComputeWorkloadsWorkloadID with any type of body
func NewPatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequestWithBody(server string, projectName string, workloadID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest calls the generic PutV1ProjectsProjectNameComputeWorkloadsWorkloadID builder with application/json body
func NewPutV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequest(server string, projectName string, workloadID string, body PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequestWithBody(server, projectName, workloadID, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequestWithBody generates requests for PutV1ProjectsProjectNameComputeWorkloadsWorkloadID with any type of body
func NewPutV1ProjectsProjectNameComputeWorkloadsWorkloadIDRequestWithBody(server string, projectName string, workloadID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersRequest generates requests for GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembers
func NewGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersRequest(server string, projectName string, workloadID string, params *GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorkloadId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workload_id", runtime.ParamLocationQuery, *params.WorkloadId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersRequest calls the generic PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembers builder with application/json body
func NewPostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersRequest(server string, projectName string, workloadID string, body PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersRequestWithBody(server, projectName, workloadID, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersRequestWithBody generates requests for PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembers with any type of body
func NewPostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersRequestWithBody(server string, projectName string, workloadID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDRequest generates requests for DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberID
func NewDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDRequest(server string, projectName string, workloadID string, workloadMemberID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "workloadMemberID", runtime.ParamLocationPath, workloadMemberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDRequest generates requests for GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberID
func NewGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDRequest(server string, projectName string, workloadID string, workloadMemberID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "workloadMemberID", runtime.ParamLocationPath, workloadMemberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/compute/workloads/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameLocalAccountsRequest generates requests for GetV1ProjectsProjectNameLocalAccounts
func NewGetV1ProjectsProjectNameLocalAccountsRequest(server string, projectName string, params *GetV1ProjectsProjectNameLocalAccountsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/localAccounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameLocalAccountsRequest calls the generic PostV1ProjectsProjectNameLocalAccounts builder with application/json body
func NewPostV1ProjectsProjectNameLocalAccountsRequest(server string, projectName string, body PostV1ProjectsProjectNameLocalAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameLocalAccountsRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameLocalAccountsRequestWithBody generates requests for PostV1ProjectsProjectNameLocalAccounts with any type of body
func NewPostV1ProjectsProjectNameLocalAccountsRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/localAccounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDRequest generates requests for DeleteV1ProjectsProjectNameLocalAccountsLocalAccountID
func NewDeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDRequest(server string, projectName string, localAccountID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "localAccountID", runtime.ParamLocationPath, localAccountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/localAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameLocalAccountsLocalAccountIDRequest generates requests for GetV1ProjectsProjectNameLocalAccountsLocalAccountID
func NewGetV1ProjectsProjectNameLocalAccountsLocalAccountIDRequest(server string, projectName string, localAccountID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "localAccountID", runtime.ParamLocationPath, localAccountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/localAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameLocationsRequest generates requests for GetV1ProjectsProjectNameLocations
func NewGetV1ProjectsProjectNameLocationsRequest(server string, projectName string, params *GetV1ProjectsProjectNameLocationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/locations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowSites != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showSites", runtime.ParamLocationQuery, *params.ShowSites); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowRegions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showRegions", runtime.ParamLocationQuery, *params.ShowRegions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameProvidersRequest generates requests for GetV1ProjectsProjectNameProviders
func NewGetV1ProjectsProjectNameProvidersRequest(server string, projectName string, params *GetV1ProjectsProjectNameProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameProvidersRequest calls the generic PostV1ProjectsProjectNameProviders builder with application/json body
func NewPostV1ProjectsProjectNameProvidersRequest(server string, projectName string, body PostV1ProjectsProjectNameProvidersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameProvidersRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameProvidersRequestWithBody generates requests for PostV1ProjectsProjectNameProviders with any type of body
func NewPostV1ProjectsProjectNameProvidersRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameProvidersProviderIDRequest generates requests for DeleteV1ProjectsProjectNameProvidersProviderID
func NewDeleteV1ProjectsProjectNameProvidersProviderIDRequest(server string, projectName string, providerID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "providerID", runtime.ParamLocationPath, providerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/providers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameProvidersProviderIDRequest generates requests for GetV1ProjectsProjectNameProvidersProviderID
func NewGetV1ProjectsProjectNameProvidersProviderIDRequest(server string, projectName string, providerID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "providerID", runtime.ParamLocationPath, providerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/providers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameRegionsRequest generates requests for GetV1ProjectsProjectNameRegions
func NewGetV1ProjectsProjectNameRegionsRequest(server string, projectName string, params *GetV1ProjectsProjectNameRegionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent", runtime.ParamLocationQuery, *params.Parent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowTotalSites != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showTotalSites", runtime.ParamLocationQuery, *params.ShowTotalSites); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameRegionsRequest calls the generic PostV1ProjectsProjectNameRegions builder with application/json body
func NewPostV1ProjectsProjectNameRegionsRequest(server string, projectName string, body PostV1ProjectsProjectNameRegionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameRegionsRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameRegionsRequestWithBody generates requests for PostV1ProjectsProjectNameRegions with any type of body
func NewPostV1ProjectsProjectNameRegionsRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameRegionsRegionIDRequest generates requests for DeleteV1ProjectsProjectNameRegionsRegionID
func NewDeleteV1ProjectsProjectNameRegionsRegionIDRequest(server string, projectName string, regionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameRegionsRegionIDRequest generates requests for GetV1ProjectsProjectNameRegionsRegionID
func NewGetV1ProjectsProjectNameRegionsRegionIDRequest(server string, projectName string, regionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameRegionsRegionIDRequest calls the generic PatchV1ProjectsProjectNameRegionsRegionID builder with application/json body
func NewPatchV1ProjectsProjectNameRegionsRegionIDRequest(server string, projectName string, regionID string, body PatchV1ProjectsProjectNameRegionsRegionIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameRegionsRegionIDRequestWithBody(server, projectName, regionID, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameRegionsRegionIDRequestWithBody generates requests for PatchV1ProjectsProjectNameRegionsRegionID with any type of body
func NewPatchV1ProjectsProjectNameRegionsRegionIDRequestWithBody(server string, projectName string, regionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameRegionsRegionIDRequest calls the generic PutV1ProjectsProjectNameRegionsRegionID builder with application/json body
func NewPutV1ProjectsProjectNameRegionsRegionIDRequest(server string, projectName string, regionID string, body PutV1ProjectsProjectNameRegionsRegionIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectNameRegionsRegionIDRequestWithBody(server, projectName, regionID, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectNameRegionsRegionIDRequestWithBody generates requests for PutV1ProjectsProjectNameRegionsRegionID with any type of body
func NewPutV1ProjectsProjectNameRegionsRegionIDRequestWithBody(server string, projectName string, regionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectNameRegionsRegionIDSitesRequest generates requests for GetV1ProjectsProjectNameRegionsRegionIDSites
func NewGetV1ProjectsProjectNameRegionsRegionIDSitesRequest(server string, projectName string, regionID string, params *GetV1ProjectsProjectNameRegionsRegionIDSitesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OuID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ouID", runtime.ParamLocationQuery, *params.OuID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameRegionsRegionIDSitesRequest calls the generic PostV1ProjectsProjectNameRegionsRegionIDSites builder with application/json body
func NewPostV1ProjectsProjectNameRegionsRegionIDSitesRequest(server string, projectName string, regionID string, body PostV1ProjectsProjectNameRegionsRegionIDSitesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameRegionsRegionIDSitesRequestWithBody(server, projectName, regionID, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameRegionsRegionIDSitesRequestWithBody generates requests for PostV1ProjectsProjectNameRegionsRegionIDSites with any type of body
func NewPostV1ProjectsProjectNameRegionsRegionIDSitesRequestWithBody(server string, projectName string, regionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest generates requests for DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteID
func NewDeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest(server string, projectName string, regionID string, siteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "siteID", runtime.ParamLocationPath, siteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest generates requests for GetV1ProjectsProjectNameRegionsRegionIDSitesSiteID
func NewGetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest(server string, projectName string, regionID string, siteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "siteID", runtime.ParamLocationPath, siteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest calls the generic PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteID builder with application/json body
func NewPatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest(server string, projectName string, regionID string, siteID string, body PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequestWithBody(server, projectName, regionID, siteID, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequestWithBody generates requests for PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteID with any type of body
func NewPatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequestWithBody(server string, projectName string, regionID string, siteID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "siteID", runtime.ParamLocationPath, siteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest calls the generic PutV1ProjectsProjectNameRegionsRegionIDSitesSiteID builder with application/json body
func NewPutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequest(server string, projectName string, regionID string, siteID string, body PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequestWithBody(server, projectName, regionID, siteID, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequestWithBody generates requests for PutV1ProjectsProjectNameRegionsRegionIDSitesSiteID with any type of body
func NewPutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDRequestWithBody(server string, projectName string, regionID string, siteID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "siteID", runtime.ParamLocationPath, siteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/sites/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectNameSchedulesRepeatedRequest generates requests for GetV1ProjectsProjectNameSchedulesRepeated
func NewGetV1ProjectsProjectNameSchedulesRepeatedRequest(server string, projectName string, params *GetV1ProjectsProjectNameSchedulesRepeatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionID", runtime.ParamLocationQuery, *params.RegionID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostID", runtime.ParamLocationQuery, *params.HostID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnixEpoch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unix_epoch", runtime.ParamLocationQuery, *params.UnixEpoch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameSchedulesRepeatedRequest calls the generic PostV1ProjectsProjectNameSchedulesRepeated builder with application/json body
func NewPostV1ProjectsProjectNameSchedulesRepeatedRequest(server string, projectName string, body PostV1ProjectsProjectNameSchedulesRepeatedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameSchedulesRepeatedRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameSchedulesRepeatedRequestWithBody generates requests for PostV1ProjectsProjectNameSchedulesRepeated with any type of body
func NewPostV1ProjectsProjectNameSchedulesRepeatedRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest generates requests for DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID
func NewDeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest(server string, projectName string, repeatedScheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repeatedScheduleID", runtime.ParamLocationPath, repeatedScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest generates requests for GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID
func NewGetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest(server string, projectName string, repeatedScheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repeatedScheduleID", runtime.ParamLocationPath, repeatedScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest calls the generic PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID builder with application/json body
func NewPatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest(server string, projectName string, repeatedScheduleID string, body PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequestWithBody(server, projectName, repeatedScheduleID, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequestWithBody generates requests for PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID with any type of body
func NewPatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequestWithBody(server string, projectName string, repeatedScheduleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repeatedScheduleID", runtime.ParamLocationPath, repeatedScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest calls the generic PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID builder with application/json body
func NewPutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequest(server string, projectName string, repeatedScheduleID string, body PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequestWithBody(server, projectName, repeatedScheduleID, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequestWithBody generates requests for PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID with any type of body
func NewPutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDRequestWithBody(server string, projectName string, repeatedScheduleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repeatedScheduleID", runtime.ParamLocationPath, repeatedScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/repeated/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectNameSchedulesSingleRequest generates requests for GetV1ProjectsProjectNameSchedulesSingle
func NewGetV1ProjectsProjectNameSchedulesSingleRequest(server string, projectName string, params *GetV1ProjectsProjectNameSchedulesSingleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionID", runtime.ParamLocationQuery, *params.RegionID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostID", runtime.ParamLocationQuery, *params.HostID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnixEpoch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unix_epoch", runtime.ParamLocationQuery, *params.UnixEpoch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameSchedulesSingleRequest calls the generic PostV1ProjectsProjectNameSchedulesSingle builder with application/json body
func NewPostV1ProjectsProjectNameSchedulesSingleRequest(server string, projectName string, body PostV1ProjectsProjectNameSchedulesSingleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameSchedulesSingleRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameSchedulesSingleRequestWithBody generates requests for PostV1ProjectsProjectNameSchedulesSingle with any type of body
func NewPostV1ProjectsProjectNameSchedulesSingleRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest generates requests for DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleID
func NewDeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest(server string, projectName string, singleScheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "singleScheduleID", runtime.ParamLocationPath, singleScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest generates requests for GetV1ProjectsProjectNameSchedulesSingleSingleScheduleID
func NewGetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest(server string, projectName string, singleScheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "singleScheduleID", runtime.ParamLocationPath, singleScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest calls the generic PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleID builder with application/json body
func NewPatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest(server string, projectName string, singleScheduleID string, body PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequestWithBody(server, projectName, singleScheduleID, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequestWithBody generates requests for PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleID with any type of body
func NewPatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequestWithBody(server string, projectName string, singleScheduleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "singleScheduleID", runtime.ParamLocationPath, singleScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest calls the generic PutV1ProjectsProjectNameSchedulesSingleSingleScheduleID builder with application/json body
func NewPutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequest(server string, projectName string, singleScheduleID string, body PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequestWithBody(server, projectName, singleScheduleID, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequestWithBody generates requests for PutV1ProjectsProjectNameSchedulesSingleSingleScheduleID with any type of body
func NewPutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDRequestWithBody(server string, projectName string, singleScheduleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "singleScheduleID", runtime.ParamLocationPath, singleScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/schedules/single/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectNameTelemetryLoggroupsRequest generates requests for GetV1ProjectsProjectNameTelemetryLoggroups
func NewGetV1ProjectsProjectNameTelemetryLoggroupsRequest(server string, projectName string, params *GetV1ProjectsProjectNameTelemetryLoggroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameTelemetryLoggroupsRequest calls the generic PostV1ProjectsProjectNameTelemetryLoggroups builder with application/json body
func NewPostV1ProjectsProjectNameTelemetryLoggroupsRequest(server string, projectName string, body PostV1ProjectsProjectNameTelemetryLoggroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameTelemetryLoggroupsRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameTelemetryLoggroupsRequestWithBody generates requests for PostV1ProjectsProjectNameTelemetryLoggroups with any type of body
func NewPostV1ProjectsProjectNameTelemetryLoggroupsRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdRequest generates requests for DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupId
func NewDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdRequest(server string, projectName string, telemetryLogsGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsGroupId", runtime.ParamLocationPath, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdRequest generates requests for GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupId
func NewGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdRequest(server string, projectName string, telemetryLogsGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsGroupId", runtime.ParamLocationPath, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesRequest generates requests for GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofiles
func NewGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesRequest(server string, projectName string, telemetryLogsGroupId string, params *GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsGroupId", runtime.ParamLocationPath, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteId", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionId", runtime.ParamLocationQuery, *params.RegionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceId", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowInherited != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showInherited", runtime.ParamLocationQuery, *params.ShowInherited); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesRequest calls the generic PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofiles builder with application/json body
func NewPostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesRequest(server string, projectName string, telemetryLogsGroupId string, body PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesRequestWithBody(server, projectName, telemetryLogsGroupId, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesRequestWithBody generates requests for PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofiles with any type of body
func NewPostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesRequestWithBody(server string, projectName string, telemetryLogsGroupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsGroupId", runtime.ParamLocationPath, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest generates requests for DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId
func NewDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest(server string, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsGroupId", runtime.ParamLocationPath, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsProfileId", runtime.ParamLocationPath, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest generates requests for GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId
func NewGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest(server string, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsGroupId", runtime.ParamLocationPath, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsProfileId", runtime.ParamLocationPath, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest calls the generic PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId builder with application/json body
func NewPatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest(server string, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, body PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequestWithBody(server, projectName, telemetryLogsGroupId, telemetryLogsProfileId, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequestWithBody generates requests for PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId with any type of body
func NewPatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequestWithBody(server string, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsGroupId", runtime.ParamLocationPath, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsProfileId", runtime.ParamLocationPath, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest calls the generic PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId builder with application/json body
func NewPutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequest(server string, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, body PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequestWithBody(server, projectName, telemetryLogsGroupId, telemetryLogsProfileId, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequestWithBody generates requests for PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId with any type of body
func NewPutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdRequestWithBody(server string, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsGroupId", runtime.ParamLocationPath, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsProfileId", runtime.ParamLocationPath, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/loggroups/%s/logprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectNameTelemetryMetricgroupsRequest generates requests for GetV1ProjectsProjectNameTelemetryMetricgroups
func NewGetV1ProjectsProjectNameTelemetryMetricgroupsRequest(server string, projectName string, params *GetV1ProjectsProjectNameTelemetryMetricgroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameTelemetryMetricgroupsRequest calls the generic PostV1ProjectsProjectNameTelemetryMetricgroups builder with application/json body
func NewPostV1ProjectsProjectNameTelemetryMetricgroupsRequest(server string, projectName string, body PostV1ProjectsProjectNameTelemetryMetricgroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameTelemetryMetricgroupsRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameTelemetryMetricgroupsRequestWithBody generates requests for PostV1ProjectsProjectNameTelemetryMetricgroups with any type of body
func NewPostV1ProjectsProjectNameTelemetryMetricgroupsRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdRequest generates requests for DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupId
func NewDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdRequest(server string, projectName string, telemetryMetricsGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsGroupId", runtime.ParamLocationPath, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdRequest generates requests for GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupId
func NewGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdRequest(server string, projectName string, telemetryMetricsGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsGroupId", runtime.ParamLocationPath, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesRequest generates requests for GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofiles
func NewGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesRequest(server string, projectName string, telemetryMetricsGroupId string, params *GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsGroupId", runtime.ParamLocationPath, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteId", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionId", runtime.ParamLocationQuery, *params.RegionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceId", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowInherited != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showInherited", runtime.ParamLocationQuery, *params.ShowInherited); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesRequest calls the generic PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofiles builder with application/json body
func NewPostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesRequest(server string, projectName string, telemetryMetricsGroupId string, body PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesRequestWithBody(server, projectName, telemetryMetricsGroupId, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesRequestWithBody generates requests for PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofiles with any type of body
func NewPostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesRequestWithBody(server string, projectName string, telemetryMetricsGroupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsGroupId", runtime.ParamLocationPath, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest generates requests for DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId
func NewDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest(server string, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsGroupId", runtime.ParamLocationPath, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsProfileId", runtime.ParamLocationPath, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest generates requests for GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId
func NewGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest(server string, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsGroupId", runtime.ParamLocationPath, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsProfileId", runtime.ParamLocationPath, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest calls the generic PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId builder with application/json body
func NewPatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest(server string, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, body PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequestWithBody(server, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequestWithBody generates requests for PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId with any type of body
func NewPatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequestWithBody(server string, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsGroupId", runtime.ParamLocationPath, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsProfileId", runtime.ParamLocationPath, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest calls the generic PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId builder with application/json body
func NewPutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequest(server string, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, body PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequestWithBody(server, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequestWithBody generates requests for PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId with any type of body
func NewPutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdRequestWithBody(server string, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsGroupId", runtime.ParamLocationPath, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsProfileId", runtime.ParamLocationPath, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/telemetry/metricgroups/%s/metricprofiles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1ProjectsProjectNameComputeWithResponse request
	GetV1ProjectsProjectNameComputeWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeResponse, error)

	// GetV1ProjectsProjectNameComputeHostsWithResponse request
	GetV1ProjectsProjectNameComputeHostsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeHostsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeHostsResponse, error)

	// PostV1ProjectsProjectNameComputeHostsWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameComputeHostsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeHostsResponse, error)

	PostV1ProjectsProjectNameComputeHostsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeHostsResponse, error)

	// PostV1ProjectsProjectNameComputeHostsRegisterWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameComputeHostsRegisterWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeHostsRegisterResponse, error)

	PostV1ProjectsProjectNameComputeHostsRegisterWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeHostsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeHostsRegisterResponse, error)

	// GetV1ProjectsProjectNameComputeHostsSummaryWithResponse request
	GetV1ProjectsProjectNameComputeHostsSummaryWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeHostsSummaryParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeHostsSummaryResponse, error)

	// DeleteV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse request with any body
	DeleteV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeHostsHostIDResponse, error)

	DeleteV1ProjectsProjectNameComputeHostsHostIDWithResponse(ctx context.Context, projectName string, hostID string, body DeleteV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeHostsHostIDResponse, error)

	// GetV1ProjectsProjectNameComputeHostsHostIDWithResponse request
	GetV1ProjectsProjectNameComputeHostsHostIDWithResponse(ctx context.Context, projectName string, hostID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeHostsHostIDResponse, error)

	// PatchV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeHostsHostIDResponse, error)

	PatchV1ProjectsProjectNameComputeHostsHostIDWithResponse(ctx context.Context, projectName string, hostID string, body PatchV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeHostsHostIDResponse, error)

	// PutV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse request with any body
	PutV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeHostsHostIDResponse, error)

	PutV1ProjectsProjectNameComputeHostsHostIDWithResponse(ctx context.Context, projectName string, hostID string, body PutV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeHostsHostIDResponse, error)

	// PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithBodyWithResponse request with any body
	PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithBodyWithResponse(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse, error)

	PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithResponse(ctx context.Context, projectName string, hostID string, body PutV1ProjectsProjectNameComputeHostsHostIDInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse, error)

	// PatchV1ProjectsProjectNameComputeHostsHostIDOnboardWithResponse request
	PatchV1ProjectsProjectNameComputeHostsHostIDOnboardWithResponse(ctx context.Context, projectName string, hostID string, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse, error)

	// PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithBodyWithResponse(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse, error)

	PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithResponse(ctx context.Context, projectName string, hostID string, body PatchV1ProjectsProjectNameComputeHostsHostIDRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse, error)

	// GetV1ProjectsProjectNameComputeInstancesWithResponse request
	GetV1ProjectsProjectNameComputeInstancesWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeInstancesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeInstancesResponse, error)

	// PostV1ProjectsProjectNameComputeInstancesWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameComputeInstancesWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeInstancesResponse, error)

	PostV1ProjectsProjectNameComputeInstancesWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeInstancesResponse, error)

	// DeleteV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse request
	DeleteV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error)

	// GetV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse request
	GetV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error)

	// PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithBodyWithResponse(ctx context.Context, projectName string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error)

	PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse(ctx context.Context, projectName string, instanceID string, body PatchV1ProjectsProjectNameComputeInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error)

	// PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateWithResponse request
	PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateWithResponse(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse, error)

	// GetV1ProjectsProjectNameComputeOsWithResponse request
	GetV1ProjectsProjectNameComputeOsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeOsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeOsResponse, error)

	// PostV1ProjectsProjectNameComputeOsWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameComputeOsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeOsResponse, error)

	PostV1ProjectsProjectNameComputeOsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeOsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeOsResponse, error)

	// DeleteV1ProjectsProjectNameComputeOsOSResourceIDWithResponse request
	DeleteV1ProjectsProjectNameComputeOsOSResourceIDWithResponse(ctx context.Context, projectName string, osResourceID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse, error)

	// GetV1ProjectsProjectNameComputeOsOSResourceIDWithResponse request
	GetV1ProjectsProjectNameComputeOsOSResourceIDWithResponse(ctx context.Context, projectName string, osResourceID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeOsOSResourceIDResponse, error)

	// PatchV1ProjectsProjectNameComputeOsOSResourceIDWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameComputeOsOSResourceIDWithBodyWithResponse(ctx context.Context, projectName string, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeOsOSResourceIDResponse, error)

	PatchV1ProjectsProjectNameComputeOsOSResourceIDWithResponse(ctx context.Context, projectName string, osResourceID string, body PatchV1ProjectsProjectNameComputeOsOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeOsOSResourceIDResponse, error)

	// PutV1ProjectsProjectNameComputeOsOSResourceIDWithBodyWithResponse request with any body
	PutV1ProjectsProjectNameComputeOsOSResourceIDWithBodyWithResponse(ctx context.Context, projectName string, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeOsOSResourceIDResponse, error)

	PutV1ProjectsProjectNameComputeOsOSResourceIDWithResponse(ctx context.Context, projectName string, osResourceID string, body PutV1ProjectsProjectNameComputeOsOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeOsOSResourceIDResponse, error)

	// GetV1ProjectsProjectNameComputeSchedulesWithResponse request
	GetV1ProjectsProjectNameComputeSchedulesWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeSchedulesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeSchedulesResponse, error)

	// GetV1ProjectsProjectNameComputeWorkloadsWithResponse request
	GetV1ProjectsProjectNameComputeWorkloadsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeWorkloadsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeWorkloadsResponse, error)

	// PostV1ProjectsProjectNameComputeWorkloadsWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameComputeWorkloadsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeWorkloadsResponse, error)

	PostV1ProjectsProjectNameComputeWorkloadsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeWorkloadsResponse, error)

	// DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse request
	DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse(ctx context.Context, projectName string, workloadID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error)

	// GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse request
	GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse(ctx context.Context, projectName string, workloadID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error)

	// PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBodyWithResponse(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error)

	PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse(ctx context.Context, projectName string, workloadID string, body PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error)

	// PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBodyWithResponse request with any body
	PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBodyWithResponse(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error)

	PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse(ctx context.Context, projectName string, workloadID string, body PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error)

	// GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithResponse request
	GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithResponse(ctx context.Context, projectName string, workloadID string, params *GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse, error)

	// PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithBodyWithResponse(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse, error)

	PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithResponse(ctx context.Context, projectName string, workloadID string, body PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse, error)

	// DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDWithResponse request
	DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDWithResponse(ctx context.Context, projectName string, workloadID string, workloadMemberID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse, error)

	// GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDWithResponse request
	GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDWithResponse(ctx context.Context, projectName string, workloadID string, workloadMemberID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse, error)

	// GetV1ProjectsProjectNameLocalAccountsWithResponse request
	GetV1ProjectsProjectNameLocalAccountsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameLocalAccountsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameLocalAccountsResponse, error)

	// PostV1ProjectsProjectNameLocalAccountsWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameLocalAccountsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameLocalAccountsResponse, error)

	PostV1ProjectsProjectNameLocalAccountsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameLocalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameLocalAccountsResponse, error)

	// DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDWithResponse request
	DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDWithResponse(ctx context.Context, projectName string, localAccountID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse, error)

	// GetV1ProjectsProjectNameLocalAccountsLocalAccountIDWithResponse request
	GetV1ProjectsProjectNameLocalAccountsLocalAccountIDWithResponse(ctx context.Context, projectName string, localAccountID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse, error)

	// GetV1ProjectsProjectNameLocationsWithResponse request
	GetV1ProjectsProjectNameLocationsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameLocationsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameLocationsResponse, error)

	// GetV1ProjectsProjectNameProvidersWithResponse request
	GetV1ProjectsProjectNameProvidersWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameProvidersParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameProvidersResponse, error)

	// PostV1ProjectsProjectNameProvidersWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameProvidersWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameProvidersResponse, error)

	PostV1ProjectsProjectNameProvidersWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameProvidersResponse, error)

	// DeleteV1ProjectsProjectNameProvidersProviderIDWithResponse request
	DeleteV1ProjectsProjectNameProvidersProviderIDWithResponse(ctx context.Context, projectName string, providerID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameProvidersProviderIDResponse, error)

	// GetV1ProjectsProjectNameProvidersProviderIDWithResponse request
	GetV1ProjectsProjectNameProvidersProviderIDWithResponse(ctx context.Context, projectName string, providerID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameProvidersProviderIDResponse, error)

	// GetV1ProjectsProjectNameRegionsWithResponse request
	GetV1ProjectsProjectNameRegionsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameRegionsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameRegionsResponse, error)

	// PostV1ProjectsProjectNameRegionsWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameRegionsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameRegionsResponse, error)

	PostV1ProjectsProjectNameRegionsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameRegionsResponse, error)

	// DeleteV1ProjectsProjectNameRegionsRegionIDWithResponse request
	DeleteV1ProjectsProjectNameRegionsRegionIDWithResponse(ctx context.Context, projectName string, regionID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameRegionsRegionIDResponse, error)

	// GetV1ProjectsProjectNameRegionsRegionIDWithResponse request
	GetV1ProjectsProjectNameRegionsRegionIDWithResponse(ctx context.Context, projectName string, regionID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameRegionsRegionIDResponse, error)

	// PatchV1ProjectsProjectNameRegionsRegionIDWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameRegionsRegionIDWithBodyWithResponse(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameRegionsRegionIDResponse, error)

	PatchV1ProjectsProjectNameRegionsRegionIDWithResponse(ctx context.Context, projectName string, regionID string, body PatchV1ProjectsProjectNameRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameRegionsRegionIDResponse, error)

	// PutV1ProjectsProjectNameRegionsRegionIDWithBodyWithResponse request with any body
	PutV1ProjectsProjectNameRegionsRegionIDWithBodyWithResponse(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameRegionsRegionIDResponse, error)

	PutV1ProjectsProjectNameRegionsRegionIDWithResponse(ctx context.Context, projectName string, regionID string, body PutV1ProjectsProjectNameRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameRegionsRegionIDResponse, error)

	// GetV1ProjectsProjectNameRegionsRegionIDSitesWithResponse request
	GetV1ProjectsProjectNameRegionsRegionIDSitesWithResponse(ctx context.Context, projectName string, regionID string, params *GetV1ProjectsProjectNameRegionsRegionIDSitesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameRegionsRegionIDSitesResponse, error)

	// PostV1ProjectsProjectNameRegionsRegionIDSitesWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameRegionsRegionIDSitesWithBodyWithResponse(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameRegionsRegionIDSitesResponse, error)

	PostV1ProjectsProjectNameRegionsRegionIDSitesWithResponse(ctx context.Context, projectName string, regionID string, body PostV1ProjectsProjectNameRegionsRegionIDSitesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameRegionsRegionIDSitesResponse, error)

	// DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse request
	DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse(ctx context.Context, projectName string, regionID string, siteID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error)

	// GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse request
	GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse(ctx context.Context, projectName string, regionID string, siteID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error)

	// PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBodyWithResponse(ctx context.Context, projectName string, regionID string, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error)

	PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse(ctx context.Context, projectName string, regionID string, siteID string, body PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error)

	// PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBodyWithResponse request with any body
	PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBodyWithResponse(ctx context.Context, projectName string, regionID string, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error)

	PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse(ctx context.Context, projectName string, regionID string, siteID string, body PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error)

	// GetV1ProjectsProjectNameSchedulesRepeatedWithResponse request
	GetV1ProjectsProjectNameSchedulesRepeatedWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameSchedulesRepeatedParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameSchedulesRepeatedResponse, error)

	// PostV1ProjectsProjectNameSchedulesRepeatedWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameSchedulesRepeatedWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameSchedulesRepeatedResponse, error)

	PostV1ProjectsProjectNameSchedulesRepeatedWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameSchedulesRepeatedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameSchedulesRepeatedResponse, error)

	// DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse request
	DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error)

	// GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse request
	GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error)

	// PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error)

	PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, body PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error)

	// PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse request with any body
	PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error)

	PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, body PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error)

	// GetV1ProjectsProjectNameSchedulesSingleWithResponse request
	GetV1ProjectsProjectNameSchedulesSingleWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameSchedulesSingleParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameSchedulesSingleResponse, error)

	// PostV1ProjectsProjectNameSchedulesSingleWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameSchedulesSingleWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameSchedulesSingleResponse, error)

	PostV1ProjectsProjectNameSchedulesSingleWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameSchedulesSingleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameSchedulesSingleResponse, error)

	// DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse request
	DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, projectName string, singleScheduleID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error)

	// GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse request
	GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, projectName string, singleScheduleID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error)

	// PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBodyWithResponse(ctx context.Context, projectName string, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error)

	PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, projectName string, singleScheduleID string, body PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error)

	// PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBodyWithResponse request with any body
	PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBodyWithResponse(ctx context.Context, projectName string, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error)

	PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, projectName string, singleScheduleID string, body PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error)

	// GetV1ProjectsProjectNameTelemetryLoggroupsWithResponse request
	GetV1ProjectsProjectNameTelemetryLoggroupsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameTelemetryLoggroupsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryLoggroupsResponse, error)

	// PostV1ProjectsProjectNameTelemetryLoggroupsWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameTelemetryLoggroupsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryLoggroupsResponse, error)

	PostV1ProjectsProjectNameTelemetryLoggroupsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameTelemetryLoggroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryLoggroupsResponse, error)

	// DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdWithResponse request
	DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse, error)

	// GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdWithResponse request
	GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse, error)

	// GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithResponse request
	GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, params *GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse, error)

	// PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithBodyWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse, error)

	PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, body PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse, error)

	// DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse request
	DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error)

	// GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse request
	GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error)

	// PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBodyWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error)

	PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, body PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error)

	// PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBodyWithResponse request with any body
	PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBodyWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error)

	PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, body PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error)

	// GetV1ProjectsProjectNameTelemetryMetricgroupsWithResponse request
	GetV1ProjectsProjectNameTelemetryMetricgroupsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameTelemetryMetricgroupsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryMetricgroupsResponse, error)

	// PostV1ProjectsProjectNameTelemetryMetricgroupsWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameTelemetryMetricgroupsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryMetricgroupsResponse, error)

	PostV1ProjectsProjectNameTelemetryMetricgroupsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameTelemetryMetricgroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryMetricgroupsResponse, error)

	// DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdWithResponse request
	DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse, error)

	// GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdWithResponse request
	GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse, error)

	// GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithResponse request
	GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, params *GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse, error)

	// PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithBodyWithResponse request with any body
	PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithBodyWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse, error)

	PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, body PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse, error)

	// DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse request
	DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error)

	// GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse request
	GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error)

	// PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBodyWithResponse request with any body
	PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBodyWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error)

	PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, body PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error)

	// PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBodyWithResponse request with any body
	PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBodyWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error)

	PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, body PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error)
}

type GetV1ProjectsProjectNameComputeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostsList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostsList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameComputeHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Host
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameComputeHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameComputeHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameComputeHostsRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Host
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameComputeHostsRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameComputeHostsRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeHostsSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostsSummary
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeHostsSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeHostsSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameComputeHostsHostIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameComputeHostsHostIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameComputeHostsHostIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeHostsHostIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeHostsHostIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeHostsHostIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameComputeHostsHostIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameComputeHostsHostIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameComputeHostsHostIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameComputeHostsHostIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameComputeHostsHostIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameComputeHostsHostIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameComputeInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Instance
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameComputeInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameComputeInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeInstancesInstanceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeInstancesInstanceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeInstancesInstanceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeOsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResourceList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeOsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeOsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameComputeOsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OperatingSystemResource
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameComputeOsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameComputeOsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeOsOSResourceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResource
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeOsOSResourceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeOsOSResourceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameComputeOsOSResourceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResource
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameComputeOsOSResourceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameComputeOsOSResourceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameComputeOsOSResourceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResource
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameComputeOsOSResourceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameComputeOsOSResourceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchedulesListJoin
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameComputeWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Workload
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameComputeWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameComputeWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workload
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workload
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workload
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadMemberList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkloadMember
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadMember
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameLocalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocalAccountList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameLocalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameLocalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameLocalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LocalAccount
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameLocalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameLocalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocalAccount
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationNodeList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProviderList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Provider
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameProvidersProviderIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameProvidersProviderIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameProvidersProviderIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameProvidersProviderIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Provider
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameProvidersProviderIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameProvidersProviderIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegionsList
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Region
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameRegionsRegionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameRegionsRegionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameRegionsRegionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameRegionsRegionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Region
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameRegionsRegionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameRegionsRegionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameRegionsRegionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Region
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON409      *N409Conflict
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameRegionsRegionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameRegionsRegionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameRegionsRegionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Region
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameRegionsRegionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameRegionsRegionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameRegionsRegionIDSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SitesList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameRegionsRegionIDSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameRegionsRegionIDSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameRegionsRegionIDSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Site
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameRegionsRegionIDSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameRegionsRegionIDSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameSchedulesRepeatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedSchedulesList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameSchedulesRepeatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameSchedulesRepeatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameSchedulesRepeatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RepeatedSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameSchedulesRepeatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameSchedulesRepeatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameSchedulesSingleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleSchedulesList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameSchedulesSingleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameSchedulesSingleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameSchedulesSingleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SingleSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameSchedulesSingleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameSchedulesSingleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameTelemetryLoggroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsGroupList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameTelemetryLoggroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameTelemetryLoggroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameTelemetryLoggroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TelemetryLogsGroup
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameTelemetryLoggroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameTelemetryLoggroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsGroup
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfileList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TelemetryLogsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameTelemetryMetricgroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsGroupList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameTelemetryMetricgroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameTelemetryMetricgroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameTelemetryMetricgroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TelemetryMetricsGroup
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameTelemetryMetricgroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameTelemetryMetricgroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsGroup
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfileList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TelemetryMetricsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON409      *N409Conflict
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1ProjectsProjectNameComputeWithResponse request returning *GetV1ProjectsProjectNameComputeResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameCompute(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeResponse(rsp)
}

// GetV1ProjectsProjectNameComputeHostsWithResponse request returning *GetV1ProjectsProjectNameComputeHostsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeHostsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeHostsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeHostsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeHosts(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeHostsResponse(rsp)
}

// PostV1ProjectsProjectNameComputeHostsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameComputeHostsResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeHostsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeHostsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeHostsWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeHostsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeHostsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeHostsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeHosts(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeHostsResponse(rsp)
}

// PostV1ProjectsProjectNameComputeHostsRegisterWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameComputeHostsRegisterResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeHostsRegisterWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeHostsRegisterResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeHostsRegisterWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeHostsRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeHostsRegisterWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeHostsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeHostsRegisterResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeHostsRegister(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeHostsRegisterResponse(rsp)
}

// GetV1ProjectsProjectNameComputeHostsSummaryWithResponse request returning *GetV1ProjectsProjectNameComputeHostsSummaryResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeHostsSummaryWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeHostsSummaryParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeHostsSummaryResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeHostsSummary(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeHostsSummaryResponse(rsp)
}

// DeleteV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse request with arbitrary body returning *DeleteV1ProjectsProjectNameComputeHostsHostIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameComputeHostsHostIDWithBody(ctx, projectName, hostID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameComputeHostsHostIDResponse(rsp)
}

func (c *ClientWithResponses) DeleteV1ProjectsProjectNameComputeHostsHostIDWithResponse(ctx context.Context, projectName string, hostID string, body DeleteV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameComputeHostsHostID(ctx, projectName, hostID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameComputeHostsHostIDResponse(rsp)
}

// GetV1ProjectsProjectNameComputeHostsHostIDWithResponse request returning *GetV1ProjectsProjectNameComputeHostsHostIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeHostsHostIDWithResponse(ctx context.Context, projectName string, hostID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeHostsHostID(ctx, projectName, hostID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeHostsHostIDResponse(rsp)
}

// PatchV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameComputeHostsHostIDResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeHostsHostIDWithBody(ctx, projectName, hostID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeHostsHostIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeHostsHostIDWithResponse(ctx context.Context, projectName string, hostID string, body PatchV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeHostsHostID(ctx, projectName, hostID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeHostsHostIDResponse(rsp)
}

// PutV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectNameComputeHostsHostIDResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameComputeHostsHostIDWithBodyWithResponse(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameComputeHostsHostIDWithBody(ctx, projectName, hostID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameComputeHostsHostIDResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectNameComputeHostsHostIDWithResponse(ctx context.Context, projectName string, hostID string, body PutV1ProjectsProjectNameComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameComputeHostsHostID(ctx, projectName, hostID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameComputeHostsHostIDResponse(rsp)
}

// PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithBodyWithResponse(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithBody(ctx, projectName, hostID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithResponse(ctx context.Context, projectName string, hostID string, body PutV1ProjectsProjectNameComputeHostsHostIDInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameComputeHostsHostIDInvalidate(ctx, projectName, hostID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse(rsp)
}

// PatchV1ProjectsProjectNameComputeHostsHostIDOnboardWithResponse request returning *PatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeHostsHostIDOnboardWithResponse(ctx context.Context, projectName string, hostID string, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeHostsHostIDOnboard(ctx, projectName, hostID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse(rsp)
}

// PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithBodyWithResponse(ctx context.Context, projectName string, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithBody(ctx, projectName, hostID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithResponse(ctx context.Context, projectName string, hostID string, body PatchV1ProjectsProjectNameComputeHostsHostIDRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeHostsHostIDRegister(ctx, projectName, hostID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse(rsp)
}

// GetV1ProjectsProjectNameComputeInstancesWithResponse request returning *GetV1ProjectsProjectNameComputeInstancesResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeInstancesWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeInstancesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeInstancesResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeInstances(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeInstancesResponse(rsp)
}

// PostV1ProjectsProjectNameComputeInstancesWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameComputeInstancesResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeInstancesWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeInstancesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeInstancesWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeInstancesWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeInstancesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeInstances(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeInstancesResponse(rsp)
}

// DeleteV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse request returning *DeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameComputeInstancesInstanceID(ctx, projectName, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse(rsp)
}

// GetV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse request returning *GetV1ProjectsProjectNameComputeInstancesInstanceIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeInstancesInstanceID(ctx, projectName, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeInstancesInstanceIDResponse(rsp)
}

// PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithBodyWithResponse(ctx context.Context, projectName string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithBody(ctx, projectName, instanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse(ctx context.Context, projectName string, instanceID string, body PatchV1ProjectsProjectNameComputeInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeInstancesInstanceID(ctx, projectName, instanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse(rsp)
}

// PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateWithResponse request returning *PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateWithResponse(ctx context.Context, projectName string, instanceID string, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidate(ctx, projectName, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse(rsp)
}

// GetV1ProjectsProjectNameComputeOsWithResponse request returning *GetV1ProjectsProjectNameComputeOsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeOsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeOsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeOsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeOs(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeOsResponse(rsp)
}

// PostV1ProjectsProjectNameComputeOsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameComputeOsResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeOsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeOsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeOsWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeOsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeOsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeOsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeOsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeOs(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeOsResponse(rsp)
}

// DeleteV1ProjectsProjectNameComputeOsOSResourceIDWithResponse request returning *DeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameComputeOsOSResourceIDWithResponse(ctx context.Context, projectName string, osResourceID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameComputeOsOSResourceID(ctx, projectName, osResourceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse(rsp)
}

// GetV1ProjectsProjectNameComputeOsOSResourceIDWithResponse request returning *GetV1ProjectsProjectNameComputeOsOSResourceIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeOsOSResourceIDWithResponse(ctx context.Context, projectName string, osResourceID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeOsOSResourceIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeOsOSResourceID(ctx, projectName, osResourceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeOsOSResourceIDResponse(rsp)
}

// PatchV1ProjectsProjectNameComputeOsOSResourceIDWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameComputeOsOSResourceIDResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeOsOSResourceIDWithBodyWithResponse(ctx context.Context, projectName string, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeOsOSResourceIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeOsOSResourceIDWithBody(ctx, projectName, osResourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeOsOSResourceIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeOsOSResourceIDWithResponse(ctx context.Context, projectName string, osResourceID string, body PatchV1ProjectsProjectNameComputeOsOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeOsOSResourceIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeOsOSResourceID(ctx, projectName, osResourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeOsOSResourceIDResponse(rsp)
}

// PutV1ProjectsProjectNameComputeOsOSResourceIDWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectNameComputeOsOSResourceIDResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameComputeOsOSResourceIDWithBodyWithResponse(ctx context.Context, projectName string, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeOsOSResourceIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameComputeOsOSResourceIDWithBody(ctx, projectName, osResourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameComputeOsOSResourceIDResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectNameComputeOsOSResourceIDWithResponse(ctx context.Context, projectName string, osResourceID string, body PutV1ProjectsProjectNameComputeOsOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeOsOSResourceIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameComputeOsOSResourceID(ctx, projectName, osResourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameComputeOsOSResourceIDResponse(rsp)
}

// GetV1ProjectsProjectNameComputeSchedulesWithResponse request returning *GetV1ProjectsProjectNameComputeSchedulesResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeSchedulesWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeSchedulesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeSchedulesResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeSchedules(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeSchedulesResponse(rsp)
}

// GetV1ProjectsProjectNameComputeWorkloadsWithResponse request returning *GetV1ProjectsProjectNameComputeWorkloadsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeWorkloadsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameComputeWorkloadsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeWorkloadsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeWorkloads(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeWorkloadsResponse(rsp)
}

// PostV1ProjectsProjectNameComputeWorkloadsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameComputeWorkloadsResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeWorkloadsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeWorkloadsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeWorkloadsWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeWorkloadsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeWorkloadsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameComputeWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeWorkloadsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeWorkloads(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeWorkloadsResponse(rsp)
}

// DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse request returning *DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse(ctx context.Context, projectName string, workloadID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx, projectName, workloadID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse(rsp)
}

// GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse request returning *GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse(ctx context.Context, projectName string, workloadID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx, projectName, workloadID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse(rsp)
}

// PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBodyWithResponse(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBody(ctx, projectName, workloadID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse(ctx context.Context, projectName string, workloadID string, body PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx, projectName, workloadID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse(rsp)
}

// PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBodyWithResponse(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithBody(ctx, projectName, workloadID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse(ctx context.Context, projectName string, workloadID string, body PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameComputeWorkloadsWorkloadID(ctx, projectName, workloadID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse(rsp)
}

// GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithResponse request returning *GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithResponse(ctx context.Context, projectName string, workloadID string, params *GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembers(ctx, projectName, workloadID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse(rsp)
}

// PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithBodyWithResponse(ctx context.Context, projectName string, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithBody(ctx, projectName, workloadID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithResponse(ctx context.Context, projectName string, workloadID string, body PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembers(ctx, projectName, workloadID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse(rsp)
}

// DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDWithResponse request returning *DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDWithResponse(ctx context.Context, projectName string, workloadID string, workloadMemberID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberID(ctx, projectName, workloadID, workloadMemberID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse(rsp)
}

// GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDWithResponse request returning *GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDWithResponse(ctx context.Context, projectName string, workloadID string, workloadMemberID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberID(ctx, projectName, workloadID, workloadMemberID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse(rsp)
}

// GetV1ProjectsProjectNameLocalAccountsWithResponse request returning *GetV1ProjectsProjectNameLocalAccountsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameLocalAccountsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameLocalAccountsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameLocalAccountsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameLocalAccounts(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameLocalAccountsResponse(rsp)
}

// PostV1ProjectsProjectNameLocalAccountsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameLocalAccountsResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameLocalAccountsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameLocalAccountsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameLocalAccountsWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameLocalAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameLocalAccountsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameLocalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameLocalAccountsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameLocalAccounts(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameLocalAccountsResponse(rsp)
}

// DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDWithResponse request returning *DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDWithResponse(ctx context.Context, projectName string, localAccountID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameLocalAccountsLocalAccountID(ctx, projectName, localAccountID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse(rsp)
}

// GetV1ProjectsProjectNameLocalAccountsLocalAccountIDWithResponse request returning *GetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameLocalAccountsLocalAccountIDWithResponse(ctx context.Context, projectName string, localAccountID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameLocalAccountsLocalAccountID(ctx, projectName, localAccountID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse(rsp)
}

// GetV1ProjectsProjectNameLocationsWithResponse request returning *GetV1ProjectsProjectNameLocationsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameLocationsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameLocationsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameLocationsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameLocations(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameLocationsResponse(rsp)
}

// GetV1ProjectsProjectNameProvidersWithResponse request returning *GetV1ProjectsProjectNameProvidersResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameProvidersWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameProvidersParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameProvidersResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameProviders(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameProvidersResponse(rsp)
}

// PostV1ProjectsProjectNameProvidersWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameProvidersResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameProvidersWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameProvidersResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameProvidersWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameProvidersResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameProvidersWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameProvidersResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameProviders(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameProvidersResponse(rsp)
}

// DeleteV1ProjectsProjectNameProvidersProviderIDWithResponse request returning *DeleteV1ProjectsProjectNameProvidersProviderIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameProvidersProviderIDWithResponse(ctx context.Context, projectName string, providerID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameProvidersProviderIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameProvidersProviderID(ctx, projectName, providerID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameProvidersProviderIDResponse(rsp)
}

// GetV1ProjectsProjectNameProvidersProviderIDWithResponse request returning *GetV1ProjectsProjectNameProvidersProviderIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameProvidersProviderIDWithResponse(ctx context.Context, projectName string, providerID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameProvidersProviderIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameProvidersProviderID(ctx, projectName, providerID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameProvidersProviderIDResponse(rsp)
}

// GetV1ProjectsProjectNameRegionsWithResponse request returning *GetV1ProjectsProjectNameRegionsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameRegionsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameRegionsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameRegionsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameRegions(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameRegionsResponse(rsp)
}

// PostV1ProjectsProjectNameRegionsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameRegionsResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameRegionsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameRegionsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameRegionsWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameRegionsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameRegionsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameRegionsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameRegions(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameRegionsResponse(rsp)
}

// DeleteV1ProjectsProjectNameRegionsRegionIDWithResponse request returning *DeleteV1ProjectsProjectNameRegionsRegionIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameRegionsRegionIDWithResponse(ctx context.Context, projectName string, regionID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameRegionsRegionIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameRegionsRegionID(ctx, projectName, regionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameRegionsRegionIDResponse(rsp)
}

// GetV1ProjectsProjectNameRegionsRegionIDWithResponse request returning *GetV1ProjectsProjectNameRegionsRegionIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameRegionsRegionIDWithResponse(ctx context.Context, projectName string, regionID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameRegionsRegionIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameRegionsRegionID(ctx, projectName, regionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameRegionsRegionIDResponse(rsp)
}

// PatchV1ProjectsProjectNameRegionsRegionIDWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameRegionsRegionIDResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameRegionsRegionIDWithBodyWithResponse(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameRegionsRegionIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameRegionsRegionIDWithBody(ctx, projectName, regionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameRegionsRegionIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameRegionsRegionIDWithResponse(ctx context.Context, projectName string, regionID string, body PatchV1ProjectsProjectNameRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameRegionsRegionIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameRegionsRegionID(ctx, projectName, regionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameRegionsRegionIDResponse(rsp)
}

// PutV1ProjectsProjectNameRegionsRegionIDWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectNameRegionsRegionIDResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameRegionsRegionIDWithBodyWithResponse(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameRegionsRegionIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameRegionsRegionIDWithBody(ctx, projectName, regionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameRegionsRegionIDResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectNameRegionsRegionIDWithResponse(ctx context.Context, projectName string, regionID string, body PutV1ProjectsProjectNameRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameRegionsRegionIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameRegionsRegionID(ctx, projectName, regionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameRegionsRegionIDResponse(rsp)
}

// GetV1ProjectsProjectNameRegionsRegionIDSitesWithResponse request returning *GetV1ProjectsProjectNameRegionsRegionIDSitesResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameRegionsRegionIDSitesWithResponse(ctx context.Context, projectName string, regionID string, params *GetV1ProjectsProjectNameRegionsRegionIDSitesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameRegionsRegionIDSitesResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameRegionsRegionIDSites(ctx, projectName, regionID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameRegionsRegionIDSitesResponse(rsp)
}

// PostV1ProjectsProjectNameRegionsRegionIDSitesWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameRegionsRegionIDSitesResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameRegionsRegionIDSitesWithBodyWithResponse(ctx context.Context, projectName string, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameRegionsRegionIDSitesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameRegionsRegionIDSitesWithBody(ctx, projectName, regionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameRegionsRegionIDSitesResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameRegionsRegionIDSitesWithResponse(ctx context.Context, projectName string, regionID string, body PostV1ProjectsProjectNameRegionsRegionIDSitesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameRegionsRegionIDSitesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameRegionsRegionIDSites(ctx, projectName, regionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameRegionsRegionIDSitesResponse(rsp)
}

// DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse request returning *DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse(ctx context.Context, projectName string, regionID string, siteID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx, projectName, regionID, siteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse(rsp)
}

// GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse request returning *GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse(ctx context.Context, projectName string, regionID string, siteID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx, projectName, regionID, siteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse(rsp)
}

// PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBodyWithResponse(ctx context.Context, projectName string, regionID string, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBody(ctx, projectName, regionID, siteID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse(ctx context.Context, projectName string, regionID string, siteID string, body PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx, projectName, regionID, siteID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse(rsp)
}

// PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBodyWithResponse(ctx context.Context, projectName string, regionID string, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithBody(ctx, projectName, regionID, siteID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse(ctx context.Context, projectName string, regionID string, siteID string, body PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameRegionsRegionIDSitesSiteID(ctx, projectName, regionID, siteID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse(rsp)
}

// GetV1ProjectsProjectNameSchedulesRepeatedWithResponse request returning *GetV1ProjectsProjectNameSchedulesRepeatedResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameSchedulesRepeatedWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameSchedulesRepeatedParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameSchedulesRepeatedResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameSchedulesRepeated(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameSchedulesRepeatedResponse(rsp)
}

// PostV1ProjectsProjectNameSchedulesRepeatedWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameSchedulesRepeatedResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameSchedulesRepeatedWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameSchedulesRepeatedResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameSchedulesRepeatedWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameSchedulesRepeatedResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameSchedulesRepeatedWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameSchedulesRepeatedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameSchedulesRepeatedResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameSchedulesRepeated(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameSchedulesRepeatedResponse(rsp)
}

// DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse request returning *DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx, projectName, repeatedScheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

// GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse request returning *GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx, projectName, repeatedScheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

// PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBody(ctx, projectName, repeatedScheduleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, body PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx, projectName, repeatedScheduleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

// PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithBody(ctx, projectName, repeatedScheduleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, projectName string, repeatedScheduleID string, body PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleID(ctx, projectName, repeatedScheduleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

// GetV1ProjectsProjectNameSchedulesSingleWithResponse request returning *GetV1ProjectsProjectNameSchedulesSingleResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameSchedulesSingleWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameSchedulesSingleParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameSchedulesSingleResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameSchedulesSingle(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameSchedulesSingleResponse(rsp)
}

// PostV1ProjectsProjectNameSchedulesSingleWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameSchedulesSingleResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameSchedulesSingleWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameSchedulesSingleResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameSchedulesSingleWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameSchedulesSingleResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameSchedulesSingleWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameSchedulesSingleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameSchedulesSingleResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameSchedulesSingle(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameSchedulesSingleResponse(rsp)
}

// DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse request returning *DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, projectName string, singleScheduleID string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx, projectName, singleScheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse(rsp)
}

// GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse request returning *GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, projectName string, singleScheduleID string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx, projectName, singleScheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse(rsp)
}

// PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBodyWithResponse(ctx context.Context, projectName string, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBody(ctx, projectName, singleScheduleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, projectName string, singleScheduleID string, body PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx, projectName, singleScheduleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse(rsp)
}

// PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBodyWithResponse(ctx context.Context, projectName string, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithBody(ctx, projectName, singleScheduleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, projectName string, singleScheduleID string, body PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameSchedulesSingleSingleScheduleID(ctx, projectName, singleScheduleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse(rsp)
}

// GetV1ProjectsProjectNameTelemetryLoggroupsWithResponse request returning *GetV1ProjectsProjectNameTelemetryLoggroupsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameTelemetryLoggroupsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameTelemetryLoggroupsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryLoggroupsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameTelemetryLoggroups(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameTelemetryLoggroupsResponse(rsp)
}

// PostV1ProjectsProjectNameTelemetryLoggroupsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameTelemetryLoggroupsResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameTelemetryLoggroupsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryLoggroupsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameTelemetryLoggroupsWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameTelemetryLoggroupsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameTelemetryLoggroupsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameTelemetryLoggroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryLoggroupsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameTelemetryLoggroups(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameTelemetryLoggroupsResponse(rsp)
}

// DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdWithResponse request returning *DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupId(ctx, projectName, telemetryLogsGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse(rsp)
}

// GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdWithResponse request returning *GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupId(ctx, projectName, telemetryLogsGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse(rsp)
}

// GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithResponse request returning *GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, params *GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofiles(ctx, projectName, telemetryLogsGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse(rsp)
}

// PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithBodyWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithBody(ctx, projectName, telemetryLogsGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, body PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofiles(ctx, projectName, telemetryLogsGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse(rsp)
}

// DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse request returning *DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx, projectName, telemetryLogsGroupId, telemetryLogsProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse(rsp)
}

// GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse request returning *GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx, projectName, telemetryLogsGroupId, telemetryLogsProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse(rsp)
}

// PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBodyWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBody(ctx, projectName, telemetryLogsGroupId, telemetryLogsProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, body PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx, projectName, telemetryLogsGroupId, telemetryLogsProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse(rsp)
}

// PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBodyWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithBody(ctx, projectName, telemetryLogsGroupId, telemetryLogsProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse(ctx context.Context, projectName string, telemetryLogsGroupId string, telemetryLogsProfileId string, body PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileId(ctx, projectName, telemetryLogsGroupId, telemetryLogsProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse(rsp)
}

// GetV1ProjectsProjectNameTelemetryMetricgroupsWithResponse request returning *GetV1ProjectsProjectNameTelemetryMetricgroupsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameTelemetryMetricgroupsWithResponse(ctx context.Context, projectName string, params *GetV1ProjectsProjectNameTelemetryMetricgroupsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryMetricgroupsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameTelemetryMetricgroups(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameTelemetryMetricgroupsResponse(rsp)
}

// PostV1ProjectsProjectNameTelemetryMetricgroupsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameTelemetryMetricgroupsResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameTelemetryMetricgroupsWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryMetricgroupsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameTelemetryMetricgroupsWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameTelemetryMetricgroupsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameTelemetryMetricgroupsWithResponse(ctx context.Context, projectName string, body PostV1ProjectsProjectNameTelemetryMetricgroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryMetricgroupsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameTelemetryMetricgroups(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameTelemetryMetricgroupsResponse(rsp)
}

// DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdWithResponse request returning *DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupId(ctx, projectName, telemetryMetricsGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse(rsp)
}

// GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdWithResponse request returning *GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupId(ctx, projectName, telemetryMetricsGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse(rsp)
}

// GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithResponse request returning *GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, params *GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofiles(ctx, projectName, telemetryMetricsGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse(rsp)
}

// PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse
func (c *ClientWithResponses) PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithBodyWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithBody(ctx, projectName, telemetryMetricsGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, body PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofiles(ctx, projectName, telemetryMetricsGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse(rsp)
}

// DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse request returning *DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse(rsp)
}

// GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse request returning *GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse
func (c *ClientWithResponses) GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse(rsp)
}

// PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBodyWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBody(ctx, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, body PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse(rsp)
}

// PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse
func (c *ClientWithResponses) PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBodyWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithBody(ctx, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse(ctx context.Context, projectName string, telemetryMetricsGroupId string, telemetryMetricsProfileId string, body PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileId(ctx, projectName, telemetryMetricsGroupId, telemetryMetricsProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse(rsp)
}

// ParseGetV1ProjectsProjectNameComputeResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeWithResponse call
func ParseGetV1ProjectsProjectNameComputeResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeHostsResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeHostsWithResponse call
func ParseGetV1ProjectsProjectNameComputeHostsResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameComputeHostsResponse parses an HTTP response from a PostV1ProjectsProjectNameComputeHostsWithResponse call
func ParsePostV1ProjectsProjectNameComputeHostsResponse(rsp *http.Response) (*PostV1ProjectsProjectNameComputeHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameComputeHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameComputeHostsRegisterResponse parses an HTTP response from a PostV1ProjectsProjectNameComputeHostsRegisterWithResponse call
func ParsePostV1ProjectsProjectNameComputeHostsRegisterResponse(rsp *http.Response) (*PostV1ProjectsProjectNameComputeHostsRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameComputeHostsRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeHostsSummaryResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeHostsSummaryWithResponse call
func ParseGetV1ProjectsProjectNameComputeHostsSummaryResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeHostsSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeHostsSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostsSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameComputeHostsHostIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameComputeHostsHostIDWithResponse call
func ParseDeleteV1ProjectsProjectNameComputeHostsHostIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameComputeHostsHostIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeHostsHostIDResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeHostsHostIDWithResponse call
func ParseGetV1ProjectsProjectNameComputeHostsHostIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeHostsHostIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameComputeHostsHostIDResponse parses an HTTP response from a PatchV1ProjectsProjectNameComputeHostsHostIDWithResponse call
func ParsePatchV1ProjectsProjectNameComputeHostsHostIDResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameComputeHostsHostIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameComputeHostsHostIDResponse parses an HTTP response from a PutV1ProjectsProjectNameComputeHostsHostIDWithResponse call
func ParsePutV1ProjectsProjectNameComputeHostsHostIDResponse(rsp *http.Response) (*PutV1ProjectsProjectNameComputeHostsHostIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameComputeHostsHostIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse parses an HTTP response from a PutV1ProjectsProjectNameComputeHostsHostIDInvalidateWithResponse call
func ParsePutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse(rsp *http.Response) (*PutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameComputeHostsHostIDInvalidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse parses an HTTP response from a PatchV1ProjectsProjectNameComputeHostsHostIDOnboardWithResponse call
func ParsePatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameComputeHostsHostIDOnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse parses an HTTP response from a PatchV1ProjectsProjectNameComputeHostsHostIDRegisterWithResponse call
func ParsePatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameComputeHostsHostIDRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeInstancesResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeInstancesWithResponse call
func ParseGetV1ProjectsProjectNameComputeInstancesResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameComputeInstancesResponse parses an HTTP response from a PostV1ProjectsProjectNameComputeInstancesWithResponse call
func ParsePostV1ProjectsProjectNameComputeInstancesResponse(rsp *http.Response) (*PostV1ProjectsProjectNameComputeInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameComputeInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse call
func ParseDeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameComputeInstancesInstanceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeInstancesInstanceIDResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse call
func ParseGetV1ProjectsProjectNameComputeInstancesInstanceIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeInstancesInstanceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse parses an HTTP response from a PatchV1ProjectsProjectNameComputeInstancesInstanceIDWithResponse call
func ParsePatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameComputeInstancesInstanceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse parses an HTTP response from a PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateWithResponse call
func ParsePutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse(rsp *http.Response) (*PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameComputeInstancesInstanceIDInvalidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeOsResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeOsWithResponse call
func ParseGetV1ProjectsProjectNameComputeOsResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeOsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeOsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResourceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameComputeOsResponse parses an HTTP response from a PostV1ProjectsProjectNameComputeOsWithResponse call
func ParsePostV1ProjectsProjectNameComputeOsResponse(rsp *http.Response) (*PostV1ProjectsProjectNameComputeOsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameComputeOsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameComputeOsOSResourceIDWithResponse call
func ParseDeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameComputeOsOSResourceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeOsOSResourceIDResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeOsOSResourceIDWithResponse call
func ParseGetV1ProjectsProjectNameComputeOsOSResourceIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeOsOSResourceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeOsOSResourceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameComputeOsOSResourceIDResponse parses an HTTP response from a PatchV1ProjectsProjectNameComputeOsOSResourceIDWithResponse call
func ParsePatchV1ProjectsProjectNameComputeOsOSResourceIDResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameComputeOsOSResourceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameComputeOsOSResourceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameComputeOsOSResourceIDResponse parses an HTTP response from a PutV1ProjectsProjectNameComputeOsOSResourceIDWithResponse call
func ParsePutV1ProjectsProjectNameComputeOsOSResourceIDResponse(rsp *http.Response) (*PutV1ProjectsProjectNameComputeOsOSResourceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameComputeOsOSResourceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeSchedulesResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeSchedulesWithResponse call
func ParseGetV1ProjectsProjectNameComputeSchedulesResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchedulesListJoin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeWorkloadsResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeWorkloadsWithResponse call
func ParseGetV1ProjectsProjectNameComputeWorkloadsResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameComputeWorkloadsResponse parses an HTTP response from a PostV1ProjectsProjectNameComputeWorkloadsWithResponse call
func ParsePostV1ProjectsProjectNameComputeWorkloadsResponse(rsp *http.Response) (*PostV1ProjectsProjectNameComputeWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameComputeWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Workload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse call
func ParseDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse call
func ParseGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse parses an HTTP response from a PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse call
func ParsePatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse parses an HTTP response from a PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDWithResponse call
func ParsePutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse(rsp *http.Response) (*PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameComputeWorkloadsWorkloadIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithResponse call
func ParseGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadMemberList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse parses an HTTP response from a PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWithResponse call
func ParsePostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse(rsp *http.Response) (*PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkloadMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDWithResponse call
func ParseDeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse parses an HTTP response from a GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDWithResponse call
func ParseGetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameComputeWorkloadsWorkloadIDMembersWorkloadMemberIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameLocalAccountsResponse parses an HTTP response from a GetV1ProjectsProjectNameLocalAccountsWithResponse call
func ParseGetV1ProjectsProjectNameLocalAccountsResponse(rsp *http.Response) (*GetV1ProjectsProjectNameLocalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameLocalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocalAccountList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameLocalAccountsResponse parses an HTTP response from a PostV1ProjectsProjectNameLocalAccountsWithResponse call
func ParsePostV1ProjectsProjectNameLocalAccountsResponse(rsp *http.Response) (*PostV1ProjectsProjectNameLocalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameLocalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LocalAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDWithResponse call
func ParseDeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse parses an HTTP response from a GetV1ProjectsProjectNameLocalAccountsLocalAccountIDWithResponse call
func ParseGetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameLocalAccountsLocalAccountIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocalAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameLocationsResponse parses an HTTP response from a GetV1ProjectsProjectNameLocationsWithResponse call
func ParseGetV1ProjectsProjectNameLocationsResponse(rsp *http.Response) (*GetV1ProjectsProjectNameLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationNodeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameProvidersResponse parses an HTTP response from a GetV1ProjectsProjectNameProvidersWithResponse call
func ParseGetV1ProjectsProjectNameProvidersResponse(rsp *http.Response) (*GetV1ProjectsProjectNameProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProviderList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameProvidersResponse parses an HTTP response from a PostV1ProjectsProjectNameProvidersWithResponse call
func ParsePostV1ProjectsProjectNameProvidersResponse(rsp *http.Response) (*PostV1ProjectsProjectNameProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Provider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameProvidersProviderIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameProvidersProviderIDWithResponse call
func ParseDeleteV1ProjectsProjectNameProvidersProviderIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameProvidersProviderIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameProvidersProviderIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameProvidersProviderIDResponse parses an HTTP response from a GetV1ProjectsProjectNameProvidersProviderIDWithResponse call
func ParseGetV1ProjectsProjectNameProvidersProviderIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameProvidersProviderIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameProvidersProviderIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Provider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameRegionsResponse parses an HTTP response from a GetV1ProjectsProjectNameRegionsWithResponse call
func ParseGetV1ProjectsProjectNameRegionsResponse(rsp *http.Response) (*GetV1ProjectsProjectNameRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegionsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameRegionsResponse parses an HTTP response from a PostV1ProjectsProjectNameRegionsWithResponse call
func ParsePostV1ProjectsProjectNameRegionsResponse(rsp *http.Response) (*PostV1ProjectsProjectNameRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameRegionsRegionIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameRegionsRegionIDWithResponse call
func ParseDeleteV1ProjectsProjectNameRegionsRegionIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameRegionsRegionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameRegionsRegionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameRegionsRegionIDResponse parses an HTTP response from a GetV1ProjectsProjectNameRegionsRegionIDWithResponse call
func ParseGetV1ProjectsProjectNameRegionsRegionIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameRegionsRegionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameRegionsRegionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameRegionsRegionIDResponse parses an HTTP response from a PatchV1ProjectsProjectNameRegionsRegionIDWithResponse call
func ParsePatchV1ProjectsProjectNameRegionsRegionIDResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameRegionsRegionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameRegionsRegionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameRegionsRegionIDResponse parses an HTTP response from a PutV1ProjectsProjectNameRegionsRegionIDWithResponse call
func ParsePutV1ProjectsProjectNameRegionsRegionIDResponse(rsp *http.Response) (*PutV1ProjectsProjectNameRegionsRegionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameRegionsRegionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameRegionsRegionIDSitesResponse parses an HTTP response from a GetV1ProjectsProjectNameRegionsRegionIDSitesWithResponse call
func ParseGetV1ProjectsProjectNameRegionsRegionIDSitesResponse(rsp *http.Response) (*GetV1ProjectsProjectNameRegionsRegionIDSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameRegionsRegionIDSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SitesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameRegionsRegionIDSitesResponse parses an HTTP response from a PostV1ProjectsProjectNameRegionsRegionIDSitesWithResponse call
func ParsePostV1ProjectsProjectNameRegionsRegionIDSitesResponse(rsp *http.Response) (*PostV1ProjectsProjectNameRegionsRegionIDSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameRegionsRegionIDSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse call
func ParseDeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse parses an HTTP response from a GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse call
func ParseGetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse parses an HTTP response from a PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse call
func ParsePatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse parses an HTTP response from a PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDWithResponse call
func ParsePutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse(rsp *http.Response) (*PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameRegionsRegionIDSitesSiteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameSchedulesRepeatedResponse parses an HTTP response from a GetV1ProjectsProjectNameSchedulesRepeatedWithResponse call
func ParseGetV1ProjectsProjectNameSchedulesRepeatedResponse(rsp *http.Response) (*GetV1ProjectsProjectNameSchedulesRepeatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameSchedulesRepeatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedSchedulesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameSchedulesRepeatedResponse parses an HTTP response from a PostV1ProjectsProjectNameSchedulesRepeatedWithResponse call
func ParsePostV1ProjectsProjectNameSchedulesRepeatedResponse(rsp *http.Response) (*PostV1ProjectsProjectNameSchedulesRepeatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameSchedulesRepeatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RepeatedSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse call
func ParseDeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse parses an HTTP response from a GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse call
func ParseGetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse parses an HTTP response from a PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse call
func ParsePatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse parses an HTTP response from a PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDWithResponse call
func ParsePutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse(rsp *http.Response) (*PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameSchedulesRepeatedRepeatedScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameSchedulesSingleResponse parses an HTTP response from a GetV1ProjectsProjectNameSchedulesSingleWithResponse call
func ParseGetV1ProjectsProjectNameSchedulesSingleResponse(rsp *http.Response) (*GetV1ProjectsProjectNameSchedulesSingleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameSchedulesSingleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleSchedulesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameSchedulesSingleResponse parses an HTTP response from a PostV1ProjectsProjectNameSchedulesSingleWithResponse call
func ParsePostV1ProjectsProjectNameSchedulesSingleResponse(rsp *http.Response) (*PostV1ProjectsProjectNameSchedulesSingleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameSchedulesSingleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SingleSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse parses an HTTP response from a DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse call
func ParseDeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse parses an HTTP response from a GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse call
func ParseGetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse(rsp *http.Response) (*GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse parses an HTTP response from a PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse call
func ParsePatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse parses an HTTP response from a PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDWithResponse call
func ParsePutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse(rsp *http.Response) (*PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameSchedulesSingleSingleScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameTelemetryLoggroupsResponse parses an HTTP response from a GetV1ProjectsProjectNameTelemetryLoggroupsWithResponse call
func ParseGetV1ProjectsProjectNameTelemetryLoggroupsResponse(rsp *http.Response) (*GetV1ProjectsProjectNameTelemetryLoggroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameTelemetryLoggroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameTelemetryLoggroupsResponse parses an HTTP response from a PostV1ProjectsProjectNameTelemetryLoggroupsWithResponse call
func ParsePostV1ProjectsProjectNameTelemetryLoggroupsResponse(rsp *http.Response) (*PostV1ProjectsProjectNameTelemetryLoggroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameTelemetryLoggroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TelemetryLogsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse parses an HTTP response from a DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdWithResponse call
func ParseDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse parses an HTTP response from a GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdWithResponse call
func ParseGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse(rsp *http.Response) (*GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse parses an HTTP response from a GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithResponse call
func ParseGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse(rsp *http.Response) (*GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfileList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse parses an HTTP response from a PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesWithResponse call
func ParsePostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse(rsp *http.Response) (*PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TelemetryLogsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse parses an HTTP response from a DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse call
func ParseDeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse parses an HTTP response from a GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse call
func ParseGetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse(rsp *http.Response) (*GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse parses an HTTP response from a PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse call
func ParsePatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse parses an HTTP response from a PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdWithResponse call
func ParsePutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse(rsp *http.Response) (*PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameTelemetryLoggroupsTelemetryLogsGroupIdLogprofilesTelemetryLogsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameTelemetryMetricgroupsResponse parses an HTTP response from a GetV1ProjectsProjectNameTelemetryMetricgroupsWithResponse call
func ParseGetV1ProjectsProjectNameTelemetryMetricgroupsResponse(rsp *http.Response) (*GetV1ProjectsProjectNameTelemetryMetricgroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameTelemetryMetricgroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameTelemetryMetricgroupsResponse parses an HTTP response from a PostV1ProjectsProjectNameTelemetryMetricgroupsWithResponse call
func ParsePostV1ProjectsProjectNameTelemetryMetricgroupsResponse(rsp *http.Response) (*PostV1ProjectsProjectNameTelemetryMetricgroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameTelemetryMetricgroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TelemetryMetricsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse parses an HTTP response from a DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdWithResponse call
func ParseDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse parses an HTTP response from a GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdWithResponse call
func ParseGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse(rsp *http.Response) (*GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse parses an HTTP response from a GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithResponse call
func ParseGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse(rsp *http.Response) (*GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfileList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse parses an HTTP response from a PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesWithResponse call
func ParsePostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse(rsp *http.Response) (*PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TelemetryMetricsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse parses an HTTP response from a DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse call
func ParseDeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse(rsp *http.Response) (*DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse parses an HTTP response from a GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse call
func ParseGetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse(rsp *http.Response) (*GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse parses an HTTP response from a PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse call
func ParsePatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse(rsp *http.Response) (*PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse parses an HTTP response from a PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdWithResponse call
func ParsePutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse(rsp *http.Response) (*PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectNameTelemetryMetricgroupsTelemetryMetricsGroupIdMetricprofilesTelemetryMetricsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
