// Package deployment provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package deployment

import (
	"time"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for DeploymentStatusState.
const (
	DEPLOYING        DeploymentStatusState = "DEPLOYING"
	DOWN             DeploymentStatusState = "DOWN"
	ERROR            DeploymentStatusState = "ERROR"
	INTERNALERROR    DeploymentStatusState = "INTERNAL_ERROR"
	NOTARGETCLUSTERS DeploymentStatusState = "NO_TARGET_CLUSTERS"
	RUNNING          DeploymentStatusState = "RUNNING"
	TERMINATING      DeploymentStatusState = "TERMINATING"
	UNKNOWN          DeploymentStatusState = "UNKNOWN"
	UPDATING         DeploymentStatusState = "UPDATING"
)

// Defines values for DeploymentServiceDeleteDeploymentParamsDeleteType.
const (
	ALL        DeploymentServiceDeleteDeploymentParamsDeleteType = "ALL"
	PARENTONLY DeploymentServiceDeleteDeploymentParamsDeleteType = "PARENT_ONLY"
)

// App Details of application.
type App struct {
	// Id Id of the app (same as Fleet bundle name) which is, concatenated from name and deploy_id (uid which comes from k8s).
	Id *string `json:"id,omitempty"`

	// Name The deployment package app name.
	Name *string `json:"name,omitempty"`

	// Status Status has details of the deployment.
	Status *DeploymentStatus `json:"status,omitempty"`
}

// Cluster Details of cluster.
type Cluster struct {
	// Apps Apps has per-app details.
	Apps *[]App `json:"apps,omitempty"`

	// Id ID is the cluster id which ECM generates and assigns to the Rancher cluster name.
	Id *string `json:"id,omitempty"`

	// Name Name is the display name which user provides and ECM creates and assigns clustername label to Fleet cluster object.
	Name *string `json:"name,omitempty"`

	// Status Status has details of the deployment.
	Status *DeploymentStatus `json:"status,omitempty"`
}

// ClusterInfo Cluster defines the message for the Cluster object.
type ClusterInfo struct {
	// CreateTime The creation time of the cluster retrieved from Fleet cluster object.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Id ID is the cluster id which ECM generates and assigns to the Rancher cluster name.
	Id *string `json:"id,omitempty"`

	// Labels List of cluster labels retrieved from Fleet cluster object.
	Labels *map[string]string `json:"labels,omitempty"`

	// Name Name is the display name which user provides and ECM creates and assigns clustername label to Fleet cluster object.
	Name *string `json:"name,omitempty"`
}

// CreateDeploymentResponse Response message for the CreateDeployment method.
type CreateDeploymentResponse struct {
	// DeploymentId Returns the new Deployment Id.
	DeploymentId string `json:"deploymentId"`
}

// Deployment Deployment defines the specification to deploy a Deployment Package onto a set of clusters.
type Deployment struct {
	// AllAppTargetClusters Set target clusters based on labels.
	AllAppTargetClusters *TargetClusters `json:"allAppTargetClusters,omitempty"`

	// AppName The deployment package name to deploy from the catalog.
	AppName string `json:"appName"`

	// AppVersion The version of the deployment package.
	AppVersion string `json:"appVersion"`

	// Apps Application details.
	Apps *[]App `json:"apps,omitempty"`

	// CreateTime The creation time of the deployment.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// DefaultProfileName DEPRECATED - will remove in v2. Name of the default DeploymentProfile to use when deploying this DeploymentPackage. If no profileName is provided, use defaultProfileName from deployment package.
	DefaultProfileName *string `json:"defaultProfileName,omitempty"`

	// DeployId The id of the deployment.
	DeployId *string `json:"deployId,omitempty"`

	// DeploymentType The deployment type for the target cluster deployment can be either auto-scaling or targeted. In Auto-scaling type, the application will be automatically deployed on all the clusters which match the Target cluster label. In Targeted type, the user has to select among pre created clusters to deploy the application.
	DeploymentType *string `json:"deploymentType,omitempty"`

	// DisplayName Deployment display name.
	DisplayName *string `json:"displayName,omitempty"`

	// Name Deployment name (unique string assigned by Orchestrator).
	Name *string `json:"name,omitempty"`

	// NetworkName network_name is the name of the interconnect network that deployment be part of
	NetworkName *string `json:"networkName,omitempty"`

	// OverrideValues The Override values can be used to override any of the base profile values based on Deployment scenario.
	OverrideValues *[]OverrideValues `json:"overrideValues,omitempty"`

	// ProfileName The selected profile name to be used for the base Helm values of the different applications in the deployment package
	ProfileName *string `json:"profileName,omitempty"`

	// PublisherName DEPRECATED - will remove in v2. Publisher of the deployment package.
	PublisherName  *string          `json:"publisherName,omitempty"`
	ServiceExports *[]ServiceExport `json:"serviceExports,omitempty"`

	// Status Status has details of the deployment.
	Status *DeploymentStatus `json:"status,omitempty"`

	// TargetClusters Cluster labels on which we want to deploy the application.
	TargetClusters *[]TargetClusters `json:"targetClusters,omitempty"`
}

// DeploymentInstancesCluster defines model for DeploymentInstancesCluster.
type DeploymentInstancesCluster struct {
	// Apps Apps has per-app details.
	Apps *[]App `json:"apps,omitempty"`

	// DeploymentDisplayName Deployment display name.
	DeploymentDisplayName *string `json:"deploymentDisplayName,omitempty"`

	// DeploymentName Deployment name (unique string assigned by Orchestrator).
	DeploymentName *string `json:"deploymentName,omitempty"`

	// DeploymentUid Deployment CR UID.
	DeploymentUid *string `json:"deploymentUid,omitempty"`

	// Status Status has details of the deployment.
	Status *DeploymentStatus `json:"status,omitempty"`
}

// DeploymentStatus Status has details of the deployment.
type DeploymentStatus struct {
	Message *string                `json:"message,omitempty"`
	State   *DeploymentStatusState `json:"state,omitempty"`

	// Summary Count of status.
	Summary *Summary `json:"summary,omitempty"`
}

// DeploymentStatusState defines model for DeploymentStatus.State.
type DeploymentStatusState string

// GetClusterResponse Response message for GetCluster method.
type GetClusterResponse struct {
	// Cluster Details of cluster.
	Cluster *Cluster `json:"cluster,omitempty"`
}

// GetDeploymentResponse Response message for the GetDeployment method.
type GetDeploymentResponse struct {
	// Deployment Deployment defines the specification to deploy a Deployment Package onto a set of clusters.
	Deployment Deployment `json:"deployment"`
}

// GetDeploymentsStatusResponse Response message for the GetDeploymentsStatus method.
type GetDeploymentsStatusResponse struct {
	Deploying   *int32 `json:"deploying,omitempty"`
	Down        *int32 `json:"down,omitempty"`
	Error       *int32 `json:"error,omitempty"`
	Running     *int32 `json:"running,omitempty"`
	Terminating *int32 `json:"terminating,omitempty"`
	Total       *int32 `json:"total,omitempty"`
	Unknown     *int32 `json:"unknown,omitempty"`
	Updating    *int32 `json:"updating,omitempty"`
}

// ListClustersResponse Response message for the ListClusters method.
type ListClustersResponse struct {
	// Clusters A list of Cluster Objects.
	Clusters      []ClusterInfo `json:"clusters"`
	TotalElements int32         `json:"totalElements"`
}

// ListDeploymentClustersResponse Response message for ListDeploymentClusters method.
type ListDeploymentClustersResponse struct {
	Clusters      []Cluster `json:"clusters"`
	TotalElements int32     `json:"totalElements"`
}

// ListDeploymentsPerClusterResponse Response message for the ListDeploymentsPerCluster method.
type ListDeploymentsPerClusterResponse struct {
	// DeploymentInstancesCluster A list of Deployment Instance Cluster Objects.
	DeploymentInstancesCluster []DeploymentInstancesCluster `json:"deploymentInstancesCluster"`
	TotalElements              int32                        `json:"totalElements"`
}

// ListDeploymentsResponse Response message for the ListDeployments method.
type ListDeploymentsResponse struct {
	// Deployments A list of Deployment Objects.
	Deployments   []Deployment `json:"deployments"`
	TotalElements int32        `json:"totalElements"`
}

// ListUIExtensionsResponse Response message for the ListUIExtensions method.
type ListUIExtensionsResponse struct {
	// UiExtensions A list of UIExtensions.
	UiExtensions []UIExtension `json:"uiExtensions"`
}

// OverrideValues The Override values can be used to override any of the base helm values of applications based on Deployment scenario.
type OverrideValues struct {
	// AppName deployment package name to use when overriding values.
	AppName string `json:"appName"`

	// TargetNamespace The namespace to deploy the app onto, default namespace is default.
	TargetNamespace *string `json:"targetNamespace,omitempty"`

	// Values The YAML representing Helm overrides
	Values *map[string]interface{} `json:"values,omitempty"`
}

// ServiceExport defines model for ServiceExport.
type ServiceExport struct {
	AppName string `json:"appName"`
	Enabled *bool  `json:"enabled,omitempty"`
}

// Summary Count of status.
type Summary struct {
	// Down Number of down apps/clusters in the deployment.
	Down *int32 `json:"down,omitempty"`

	// Running Number of running apps/clusters in the deployment, value from owned GitRepo objects.
	Running *int32 `json:"running,omitempty"`

	// Total Total count of apps/clusters in the deployment, value from owned GitRepo objects.
	Total *int32 `json:"total,omitempty"`

	// Type Type of thing that we're counting, ie clusters, apps.
	Type *string `json:"type,omitempty"`

	// Unknown Unknown status to indicate cluster not reachable.
	Unknown *int32 `json:"unknown,omitempty"`
}

// TargetClusters Set target clusters based on labels.
type TargetClusters struct {
	// AppName The targeted deployment package name.
	AppName *string `json:"appName,omitempty"`

	// ClusterId Cluster id to match the target cluster when targeted deployment.
	ClusterId *string `json:"clusterId,omitempty"`

	// Labels Cluster labels to match the target cluster when auto-scaling deployment.
	Labels *map[string]string `json:"labels,omitempty"`
}

// UIExtension Details of UI Extension.
type UIExtension struct {
	// AppName The name of the application corresponding to this UI extension.
	AppName string `json:"appName"`

	// Description Description states the purpose of the dashboard that this UIExtension represents.
	Description string `json:"description"`

	// FileName The name of the main file to load this specific UI extension.
	FileName string `json:"fileName"`

	// Label Label represents a dashboard in the main UI.
	Label string `json:"label"`

	// ModuleName The application module to be loaded.
	ModuleName string `json:"moduleName"`

	// ServiceName The name of the API Extension endpoint.
	ServiceName string `json:"serviceName"`
}

// UpdateDeploymentResponse Response message for the UpdateDeployment method.
type UpdateDeploymentResponse struct {
	// Deployment Deployment defines the specification to deploy a Deployment Package onto a set of clusters.
	Deployment Deployment `json:"deployment"`
}

// ClusterServiceListClustersParams defines parameters for ClusterServiceListClusters.
type ClusterServiceListClustersParams struct {
	// Labels Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel. Labels separated by a comma.
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`

	// OrderBy Optional. Select field and order based on which cluster list will be sorted.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Filter Optional. Selection criteria to list clusters.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageSize Optional. Select count of clusters to be listed per page.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Optional. Offset is used to select the correct page from which clusters list will be displayed. (E.g If there are 10 clusters, page size is 2 and offset is set as 4, then the response will display clusters 5 and 6).
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// DeploymentServiceListDeploymentsParams defines parameters for DeploymentServiceListDeployments.
type DeploymentServiceListDeploymentsParams struct {
	// Labels Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`

	// OrderBy Optional. Select field and order based on which Deployment list will be sorted.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Filter Optional. Selection criteria to list Deployments.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageSize Optional. Select count of Deployment to be listed per page.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Optional. Offset is used to select the correct page from which Deployment list will be displayed. (E.g If there are 10 Deployments, page size is 2 and offset is set as 4, then the response will display Deployment 5 and 6.)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// DeploymentServiceDeleteDeploymentParams defines parameters for DeploymentServiceDeleteDeployment.
type DeploymentServiceDeleteDeploymentParams struct {
	// DeleteType Required. Different delete types to handle parent and child lists, for dependency support. Available options: PARENT_ONLY, ALL.
	DeleteType *DeploymentServiceDeleteDeploymentParamsDeleteType `form:"deleteType,omitempty" json:"deleteType,omitempty"`
}

// DeploymentServiceDeleteDeploymentParamsDeleteType defines parameters for DeploymentServiceDeleteDeployment.
type DeploymentServiceDeleteDeploymentParamsDeleteType string

// DeploymentServiceListDeploymentClustersParams defines parameters for DeploymentServiceListDeploymentClusters.
type DeploymentServiceListDeploymentClustersParams struct {
	// OrderBy Optional. Select field and order based on which Deployment cluster list will be sorted.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Filter Optional. Selection criteria to list Deployment clusters.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageSize Optional. Select count of Deployment clusters to be listed per page.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Optional. Offset is used to select the correct page from which Deployment clusters list will be displayed. (E.g If there are 10 Deployment clusters, page size is 2 and offset is set as 4, then the response will display Deployment clusters 5 and 6.)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// DeploymentServiceListDeploymentsPerClusterParams defines parameters for DeploymentServiceListDeploymentsPerCluster.
type DeploymentServiceListDeploymentsPerClusterParams struct {
	// Labels Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`

	// OrderBy Optional. Select field and order based on which Deployment list will be sorted.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Filter Optional. Selection criteria to list Deployments.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageSize Optional. Select count of Deployment to be listed per page.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Optional. Offset is used to select the correct page from which Deployment list will be displayed. (E.g If there are 10 Deployments, page size is 2 and offset is set as 4, then the response will display Deployment 5 and 6.)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// DeploymentServiceGetDeploymentsStatusParams defines parameters for DeploymentServiceGetDeploymentsStatus.
type DeploymentServiceGetDeploymentsStatusParams struct {
	// Labels Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`
}

// DeploymentServiceListUIExtensionsParams defines parameters for DeploymentServiceListUIExtensions.
type DeploymentServiceListUIExtensionsParams struct {
	// ServiceName Optional. A string array that filters service names to be displayed. Service names separated by a comma.
	ServiceName *[]string `form:"serviceName,omitempty" json:"serviceName,omitempty"`
}

// DeploymentServiceCreateDeploymentJSONRequestBody defines body for DeploymentServiceCreateDeployment for application/json ContentType.
type DeploymentServiceCreateDeploymentJSONRequestBody = Deployment

// DeploymentServiceUpdateDeploymentJSONRequestBody defines body for DeploymentServiceUpdateDeployment for application/json ContentType.
type DeploymentServiceUpdateDeploymentJSONRequestBody = Deployment
