// Package deployment provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package deployment

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ClusterServiceListClusters request
	ClusterServiceListClusters(ctx context.Context, projectName string, params *ClusterServiceListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterServiceGetCluster request
	ClusterServiceGetCluster(ctx context.Context, projectName string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentServiceListDeployments request
	DeploymentServiceListDeployments(ctx context.Context, projectName string, params *DeploymentServiceListDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentServiceCreateDeploymentWithBody request with any body
	DeploymentServiceCreateDeploymentWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeploymentServiceCreateDeployment(ctx context.Context, projectName string, body DeploymentServiceCreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentServiceDeleteDeployment request
	DeploymentServiceDeleteDeployment(ctx context.Context, projectName string, deplId string, params *DeploymentServiceDeleteDeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentServiceGetDeployment request
	DeploymentServiceGetDeployment(ctx context.Context, projectName string, deplId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentServiceUpdateDeploymentWithBody request with any body
	DeploymentServiceUpdateDeploymentWithBody(ctx context.Context, projectName string, deplId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeploymentServiceUpdateDeployment(ctx context.Context, projectName string, deplId string, body DeploymentServiceUpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentServiceListDeploymentClusters request
	DeploymentServiceListDeploymentClusters(ctx context.Context, projectName string, deplId string, params *DeploymentServiceListDeploymentClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentServiceListDeploymentsPerCluster request
	DeploymentServiceListDeploymentsPerCluster(ctx context.Context, projectName string, clusterId string, params *DeploymentServiceListDeploymentsPerClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentServiceGetDeploymentsStatus request
	DeploymentServiceGetDeploymentsStatus(ctx context.Context, projectName string, params *DeploymentServiceGetDeploymentsStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentServiceListUIExtensions request
	DeploymentServiceListUIExtensions(ctx context.Context, projectName string, params *DeploymentServiceListUIExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ClusterServiceListClusters(ctx context.Context, projectName string, params *ClusterServiceListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterServiceListClustersRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterServiceGetCluster(ctx context.Context, projectName string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterServiceGetClusterRequest(c.Server, projectName, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceListDeployments(ctx context.Context, projectName string, params *DeploymentServiceListDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceListDeploymentsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceCreateDeploymentWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceCreateDeploymentRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceCreateDeployment(ctx context.Context, projectName string, body DeploymentServiceCreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceCreateDeploymentRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceDeleteDeployment(ctx context.Context, projectName string, deplId string, params *DeploymentServiceDeleteDeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceDeleteDeploymentRequest(c.Server, projectName, deplId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceGetDeployment(ctx context.Context, projectName string, deplId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceGetDeploymentRequest(c.Server, projectName, deplId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceUpdateDeploymentWithBody(ctx context.Context, projectName string, deplId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceUpdateDeploymentRequestWithBody(c.Server, projectName, deplId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceUpdateDeployment(ctx context.Context, projectName string, deplId string, body DeploymentServiceUpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceUpdateDeploymentRequest(c.Server, projectName, deplId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceListDeploymentClusters(ctx context.Context, projectName string, deplId string, params *DeploymentServiceListDeploymentClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceListDeploymentClustersRequest(c.Server, projectName, deplId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceListDeploymentsPerCluster(ctx context.Context, projectName string, clusterId string, params *DeploymentServiceListDeploymentsPerClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceListDeploymentsPerClusterRequest(c.Server, projectName, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceGetDeploymentsStatus(ctx context.Context, projectName string, params *DeploymentServiceGetDeploymentsStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceGetDeploymentsStatusRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentServiceListUIExtensions(ctx context.Context, projectName string, params *DeploymentServiceListUIExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentServiceListUIExtensionsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewClusterServiceListClustersRequest generates requests for ClusterServiceListClusters
func NewClusterServiceListClustersRequest(server string, projectName string, params *ClusterServiceListClustersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/appdeployment/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Labels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterServiceGetClusterRequest generates requests for ClusterServiceGetCluster
func NewClusterServiceGetClusterRequest(server string, projectName string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/appdeployment/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentServiceListDeploymentsRequest generates requests for DeploymentServiceListDeployments
func NewDeploymentServiceListDeploymentsRequest(server string, projectName string, params *DeploymentServiceListDeploymentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/appdeployment/deployments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Labels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentServiceCreateDeploymentRequest calls the generic DeploymentServiceCreateDeployment builder with application/json body
func NewDeploymentServiceCreateDeploymentRequest(server string, projectName string, body DeploymentServiceCreateDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeploymentServiceCreateDeploymentRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewDeploymentServiceCreateDeploymentRequestWithBody generates requests for DeploymentServiceCreateDeployment with any type of body
func NewDeploymentServiceCreateDeploymentRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/appdeployment/deployments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeploymentServiceDeleteDeploymentRequest generates requests for DeploymentServiceDeleteDeployment
func NewDeploymentServiceDeleteDeploymentRequest(server string, projectName string, deplId string, params *DeploymentServiceDeleteDeploymentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deplId", runtime.ParamLocationPath, deplId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/appdeployment/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DeleteType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleteType", runtime.ParamLocationQuery, *params.DeleteType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentServiceGetDeploymentRequest generates requests for DeploymentServiceGetDeployment
func NewDeploymentServiceGetDeploymentRequest(server string, projectName string, deplId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deplId", runtime.ParamLocationPath, deplId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/appdeployment/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentServiceUpdateDeploymentRequest calls the generic DeploymentServiceUpdateDeployment builder with application/json body
func NewDeploymentServiceUpdateDeploymentRequest(server string, projectName string, deplId string, body DeploymentServiceUpdateDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeploymentServiceUpdateDeploymentRequestWithBody(server, projectName, deplId, "application/json", bodyReader)
}

// NewDeploymentServiceUpdateDeploymentRequestWithBody generates requests for DeploymentServiceUpdateDeployment with any type of body
func NewDeploymentServiceUpdateDeploymentRequestWithBody(server string, projectName string, deplId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deplId", runtime.ParamLocationPath, deplId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/appdeployment/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeploymentServiceListDeploymentClustersRequest generates requests for DeploymentServiceListDeploymentClusters
func NewDeploymentServiceListDeploymentClustersRequest(server string, projectName string, deplId string, params *DeploymentServiceListDeploymentClustersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deplId", runtime.ParamLocationPath, deplId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/appdeployment/deployments/%s/clusters", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentServiceListDeploymentsPerClusterRequest generates requests for DeploymentServiceListDeploymentsPerCluster
func NewDeploymentServiceListDeploymentsPerClusterRequest(server string, projectName string, clusterId string, params *DeploymentServiceListDeploymentsPerClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/deployments/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Labels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentServiceGetDeploymentsStatusRequest generates requests for DeploymentServiceGetDeploymentsStatus
func NewDeploymentServiceGetDeploymentsStatusRequest(server string, projectName string, params *DeploymentServiceGetDeploymentsStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/summary/deployments_status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Labels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentServiceListUIExtensionsRequest generates requests for DeploymentServiceListUIExtensions
func NewDeploymentServiceListUIExtensionsRequest(server string, projectName string, params *DeploymentServiceListUIExtensionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/ui_extensions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceName", runtime.ParamLocationQuery, *params.ServiceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ClusterServiceListClustersWithResponse request
	ClusterServiceListClustersWithResponse(ctx context.Context, projectName string, params *ClusterServiceListClustersParams, reqEditors ...RequestEditorFn) (*ClusterServiceListClustersResponse, error)

	// ClusterServiceGetClusterWithResponse request
	ClusterServiceGetClusterWithResponse(ctx context.Context, projectName string, clusterId string, reqEditors ...RequestEditorFn) (*ClusterServiceGetClusterResponse, error)

	// DeploymentServiceListDeploymentsWithResponse request
	DeploymentServiceListDeploymentsWithResponse(ctx context.Context, projectName string, params *DeploymentServiceListDeploymentsParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListDeploymentsResponse, error)

	// DeploymentServiceCreateDeploymentWithBodyWithResponse request with any body
	DeploymentServiceCreateDeploymentWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentServiceCreateDeploymentResponse, error)

	DeploymentServiceCreateDeploymentWithResponse(ctx context.Context, projectName string, body DeploymentServiceCreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentServiceCreateDeploymentResponse, error)

	// DeploymentServiceDeleteDeploymentWithResponse request
	DeploymentServiceDeleteDeploymentWithResponse(ctx context.Context, projectName string, deplId string, params *DeploymentServiceDeleteDeploymentParams, reqEditors ...RequestEditorFn) (*DeploymentServiceDeleteDeploymentResponse, error)

	// DeploymentServiceGetDeploymentWithResponse request
	DeploymentServiceGetDeploymentWithResponse(ctx context.Context, projectName string, deplId string, reqEditors ...RequestEditorFn) (*DeploymentServiceGetDeploymentResponse, error)

	// DeploymentServiceUpdateDeploymentWithBodyWithResponse request with any body
	DeploymentServiceUpdateDeploymentWithBodyWithResponse(ctx context.Context, projectName string, deplId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentServiceUpdateDeploymentResponse, error)

	DeploymentServiceUpdateDeploymentWithResponse(ctx context.Context, projectName string, deplId string, body DeploymentServiceUpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentServiceUpdateDeploymentResponse, error)

	// DeploymentServiceListDeploymentClustersWithResponse request
	DeploymentServiceListDeploymentClustersWithResponse(ctx context.Context, projectName string, deplId string, params *DeploymentServiceListDeploymentClustersParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListDeploymentClustersResponse, error)

	// DeploymentServiceListDeploymentsPerClusterWithResponse request
	DeploymentServiceListDeploymentsPerClusterWithResponse(ctx context.Context, projectName string, clusterId string, params *DeploymentServiceListDeploymentsPerClusterParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListDeploymentsPerClusterResponse, error)

	// DeploymentServiceGetDeploymentsStatusWithResponse request
	DeploymentServiceGetDeploymentsStatusWithResponse(ctx context.Context, projectName string, params *DeploymentServiceGetDeploymentsStatusParams, reqEditors ...RequestEditorFn) (*DeploymentServiceGetDeploymentsStatusResponse, error)

	// DeploymentServiceListUIExtensionsWithResponse request
	DeploymentServiceListUIExtensionsWithResponse(ctx context.Context, projectName string, params *DeploymentServiceListUIExtensionsParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListUIExtensionsResponse, error)
}

type ClusterServiceListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListClustersResponse
}

// Status returns HTTPResponse.Status
func (r ClusterServiceListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterServiceListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterServiceGetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetClusterResponse
}

// Status returns HTTPResponse.Status
func (r ClusterServiceGetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterServiceGetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentServiceListDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDeploymentsResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentServiceListDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentServiceListDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentServiceCreateDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateDeploymentResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentServiceCreateDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentServiceCreateDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentServiceDeleteDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeploymentServiceDeleteDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentServiceDeleteDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentServiceGetDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDeploymentResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentServiceGetDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentServiceGetDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentServiceUpdateDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateDeploymentResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentServiceUpdateDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentServiceUpdateDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentServiceListDeploymentClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDeploymentClustersResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentServiceListDeploymentClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentServiceListDeploymentClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentServiceListDeploymentsPerClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDeploymentsPerClusterResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentServiceListDeploymentsPerClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentServiceListDeploymentsPerClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentServiceGetDeploymentsStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDeploymentsStatusResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentServiceGetDeploymentsStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentServiceGetDeploymentsStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentServiceListUIExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListUIExtensionsResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentServiceListUIExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentServiceListUIExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ClusterServiceListClustersWithResponse request returning *ClusterServiceListClustersResponse
func (c *ClientWithResponses) ClusterServiceListClustersWithResponse(ctx context.Context, projectName string, params *ClusterServiceListClustersParams, reqEditors ...RequestEditorFn) (*ClusterServiceListClustersResponse, error) {
	rsp, err := c.ClusterServiceListClusters(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterServiceListClustersResponse(rsp)
}

// ClusterServiceGetClusterWithResponse request returning *ClusterServiceGetClusterResponse
func (c *ClientWithResponses) ClusterServiceGetClusterWithResponse(ctx context.Context, projectName string, clusterId string, reqEditors ...RequestEditorFn) (*ClusterServiceGetClusterResponse, error) {
	rsp, err := c.ClusterServiceGetCluster(ctx, projectName, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterServiceGetClusterResponse(rsp)
}

// DeploymentServiceListDeploymentsWithResponse request returning *DeploymentServiceListDeploymentsResponse
func (c *ClientWithResponses) DeploymentServiceListDeploymentsWithResponse(ctx context.Context, projectName string, params *DeploymentServiceListDeploymentsParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListDeploymentsResponse, error) {
	rsp, err := c.DeploymentServiceListDeployments(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceListDeploymentsResponse(rsp)
}

// DeploymentServiceCreateDeploymentWithBodyWithResponse request with arbitrary body returning *DeploymentServiceCreateDeploymentResponse
func (c *ClientWithResponses) DeploymentServiceCreateDeploymentWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentServiceCreateDeploymentResponse, error) {
	rsp, err := c.DeploymentServiceCreateDeploymentWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceCreateDeploymentResponse(rsp)
}

func (c *ClientWithResponses) DeploymentServiceCreateDeploymentWithResponse(ctx context.Context, projectName string, body DeploymentServiceCreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentServiceCreateDeploymentResponse, error) {
	rsp, err := c.DeploymentServiceCreateDeployment(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceCreateDeploymentResponse(rsp)
}

// DeploymentServiceDeleteDeploymentWithResponse request returning *DeploymentServiceDeleteDeploymentResponse
func (c *ClientWithResponses) DeploymentServiceDeleteDeploymentWithResponse(ctx context.Context, projectName string, deplId string, params *DeploymentServiceDeleteDeploymentParams, reqEditors ...RequestEditorFn) (*DeploymentServiceDeleteDeploymentResponse, error) {
	rsp, err := c.DeploymentServiceDeleteDeployment(ctx, projectName, deplId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceDeleteDeploymentResponse(rsp)
}

// DeploymentServiceGetDeploymentWithResponse request returning *DeploymentServiceGetDeploymentResponse
func (c *ClientWithResponses) DeploymentServiceGetDeploymentWithResponse(ctx context.Context, projectName string, deplId string, reqEditors ...RequestEditorFn) (*DeploymentServiceGetDeploymentResponse, error) {
	rsp, err := c.DeploymentServiceGetDeployment(ctx, projectName, deplId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceGetDeploymentResponse(rsp)
}

// DeploymentServiceUpdateDeploymentWithBodyWithResponse request with arbitrary body returning *DeploymentServiceUpdateDeploymentResponse
func (c *ClientWithResponses) DeploymentServiceUpdateDeploymentWithBodyWithResponse(ctx context.Context, projectName string, deplId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentServiceUpdateDeploymentResponse, error) {
	rsp, err := c.DeploymentServiceUpdateDeploymentWithBody(ctx, projectName, deplId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceUpdateDeploymentResponse(rsp)
}

func (c *ClientWithResponses) DeploymentServiceUpdateDeploymentWithResponse(ctx context.Context, projectName string, deplId string, body DeploymentServiceUpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentServiceUpdateDeploymentResponse, error) {
	rsp, err := c.DeploymentServiceUpdateDeployment(ctx, projectName, deplId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceUpdateDeploymentResponse(rsp)
}

// DeploymentServiceListDeploymentClustersWithResponse request returning *DeploymentServiceListDeploymentClustersResponse
func (c *ClientWithResponses) DeploymentServiceListDeploymentClustersWithResponse(ctx context.Context, projectName string, deplId string, params *DeploymentServiceListDeploymentClustersParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListDeploymentClustersResponse, error) {
	rsp, err := c.DeploymentServiceListDeploymentClusters(ctx, projectName, deplId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceListDeploymentClustersResponse(rsp)
}

// DeploymentServiceListDeploymentsPerClusterWithResponse request returning *DeploymentServiceListDeploymentsPerClusterResponse
func (c *ClientWithResponses) DeploymentServiceListDeploymentsPerClusterWithResponse(ctx context.Context, projectName string, clusterId string, params *DeploymentServiceListDeploymentsPerClusterParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListDeploymentsPerClusterResponse, error) {
	rsp, err := c.DeploymentServiceListDeploymentsPerCluster(ctx, projectName, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceListDeploymentsPerClusterResponse(rsp)
}

// DeploymentServiceGetDeploymentsStatusWithResponse request returning *DeploymentServiceGetDeploymentsStatusResponse
func (c *ClientWithResponses) DeploymentServiceGetDeploymentsStatusWithResponse(ctx context.Context, projectName string, params *DeploymentServiceGetDeploymentsStatusParams, reqEditors ...RequestEditorFn) (*DeploymentServiceGetDeploymentsStatusResponse, error) {
	rsp, err := c.DeploymentServiceGetDeploymentsStatus(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceGetDeploymentsStatusResponse(rsp)
}

// DeploymentServiceListUIExtensionsWithResponse request returning *DeploymentServiceListUIExtensionsResponse
func (c *ClientWithResponses) DeploymentServiceListUIExtensionsWithResponse(ctx context.Context, projectName string, params *DeploymentServiceListUIExtensionsParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListUIExtensionsResponse, error) {
	rsp, err := c.DeploymentServiceListUIExtensions(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentServiceListUIExtensionsResponse(rsp)
}

// ParseClusterServiceListClustersResponse parses an HTTP response from a ClusterServiceListClustersWithResponse call
func ParseClusterServiceListClustersResponse(rsp *http.Response) (*ClusterServiceListClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterServiceListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterServiceGetClusterResponse parses an HTTP response from a ClusterServiceGetClusterWithResponse call
func ParseClusterServiceGetClusterResponse(rsp *http.Response) (*ClusterServiceGetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterServiceGetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentServiceListDeploymentsResponse parses an HTTP response from a DeploymentServiceListDeploymentsWithResponse call
func ParseDeploymentServiceListDeploymentsResponse(rsp *http.Response) (*DeploymentServiceListDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentServiceListDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDeploymentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentServiceCreateDeploymentResponse parses an HTTP response from a DeploymentServiceCreateDeploymentWithResponse call
func ParseDeploymentServiceCreateDeploymentResponse(rsp *http.Response) (*DeploymentServiceCreateDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentServiceCreateDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateDeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentServiceDeleteDeploymentResponse parses an HTTP response from a DeploymentServiceDeleteDeploymentWithResponse call
func ParseDeploymentServiceDeleteDeploymentResponse(rsp *http.Response) (*DeploymentServiceDeleteDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentServiceDeleteDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeploymentServiceGetDeploymentResponse parses an HTTP response from a DeploymentServiceGetDeploymentWithResponse call
func ParseDeploymentServiceGetDeploymentResponse(rsp *http.Response) (*DeploymentServiceGetDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentServiceGetDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentServiceUpdateDeploymentResponse parses an HTTP response from a DeploymentServiceUpdateDeploymentWithResponse call
func ParseDeploymentServiceUpdateDeploymentResponse(rsp *http.Response) (*DeploymentServiceUpdateDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentServiceUpdateDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateDeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentServiceListDeploymentClustersResponse parses an HTTP response from a DeploymentServiceListDeploymentClustersWithResponse call
func ParseDeploymentServiceListDeploymentClustersResponse(rsp *http.Response) (*DeploymentServiceListDeploymentClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentServiceListDeploymentClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDeploymentClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentServiceListDeploymentsPerClusterResponse parses an HTTP response from a DeploymentServiceListDeploymentsPerClusterWithResponse call
func ParseDeploymentServiceListDeploymentsPerClusterResponse(rsp *http.Response) (*DeploymentServiceListDeploymentsPerClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentServiceListDeploymentsPerClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDeploymentsPerClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentServiceGetDeploymentsStatusResponse parses an HTTP response from a DeploymentServiceGetDeploymentsStatusWithResponse call
func ParseDeploymentServiceGetDeploymentsStatusResponse(rsp *http.Response) (*DeploymentServiceGetDeploymentsStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentServiceGetDeploymentsStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDeploymentsStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentServiceListUIExtensionsResponse parses an HTTP response from a DeploymentServiceListUIExtensionsWithResponse call
func ParseDeploymentServiceListUIExtensionsResponse(rsp *http.Response) (*DeploymentServiceListUIExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentServiceListUIExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListUIExtensionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
