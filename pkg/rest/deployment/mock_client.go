// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rest/deployment/client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/rest/deployment/client.go -destination=pkg/rest/deployment/mock_client.go -package=deployment
//

// Package deployment is a generated GoMock package.
package deployment

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// ClusterServiceGetCluster mocks base method.
func (m *MockClientInterface) ClusterServiceGetCluster(ctx context.Context, projectName, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterServiceGetCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterServiceGetCluster indicates an expected call of ClusterServiceGetCluster.
func (mr *MockClientInterfaceMockRecorder) ClusterServiceGetCluster(ctx, projectName, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterServiceGetCluster", reflect.TypeOf((*MockClientInterface)(nil).ClusterServiceGetCluster), varargs...)
}

// ClusterServiceListClusters mocks base method.
func (m *MockClientInterface) ClusterServiceListClusters(ctx context.Context, projectName string, params *ClusterServiceListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterServiceListClusters", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterServiceListClusters indicates an expected call of ClusterServiceListClusters.
func (mr *MockClientInterfaceMockRecorder) ClusterServiceListClusters(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterServiceListClusters", reflect.TypeOf((*MockClientInterface)(nil).ClusterServiceListClusters), varargs...)
}

// DeploymentServiceCreateDeployment mocks base method.
func (m *MockClientInterface) DeploymentServiceCreateDeployment(ctx context.Context, projectName string, body DeploymentServiceCreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceCreateDeployment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceCreateDeployment indicates an expected call of DeploymentServiceCreateDeployment.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceCreateDeployment(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceCreateDeployment", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceCreateDeployment), varargs...)
}

// DeploymentServiceCreateDeploymentWithBody mocks base method.
func (m *MockClientInterface) DeploymentServiceCreateDeploymentWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceCreateDeploymentWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceCreateDeploymentWithBody indicates an expected call of DeploymentServiceCreateDeploymentWithBody.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceCreateDeploymentWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceCreateDeploymentWithBody", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceCreateDeploymentWithBody), varargs...)
}

// DeploymentServiceDeleteDeployment mocks base method.
func (m *MockClientInterface) DeploymentServiceDeleteDeployment(ctx context.Context, projectName, deplId string, params *DeploymentServiceDeleteDeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deplId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceDeleteDeployment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceDeleteDeployment indicates an expected call of DeploymentServiceDeleteDeployment.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceDeleteDeployment(ctx, projectName, deplId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deplId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceDeleteDeployment", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceDeleteDeployment), varargs...)
}

// DeploymentServiceGetDeployment mocks base method.
func (m *MockClientInterface) DeploymentServiceGetDeployment(ctx context.Context, projectName, deplId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deplId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceGetDeployment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceGetDeployment indicates an expected call of DeploymentServiceGetDeployment.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceGetDeployment(ctx, projectName, deplId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deplId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceGetDeployment", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceGetDeployment), varargs...)
}

// DeploymentServiceGetDeploymentsStatus mocks base method.
func (m *MockClientInterface) DeploymentServiceGetDeploymentsStatus(ctx context.Context, projectName string, params *DeploymentServiceGetDeploymentsStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceGetDeploymentsStatus", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceGetDeploymentsStatus indicates an expected call of DeploymentServiceGetDeploymentsStatus.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceGetDeploymentsStatus(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceGetDeploymentsStatus", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceGetDeploymentsStatus), varargs...)
}

// DeploymentServiceListDeploymentClusters mocks base method.
func (m *MockClientInterface) DeploymentServiceListDeploymentClusters(ctx context.Context, projectName, deplId string, params *DeploymentServiceListDeploymentClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deplId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceListDeploymentClusters", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceListDeploymentClusters indicates an expected call of DeploymentServiceListDeploymentClusters.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceListDeploymentClusters(ctx, projectName, deplId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deplId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceListDeploymentClusters", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceListDeploymentClusters), varargs...)
}

// DeploymentServiceListDeployments mocks base method.
func (m *MockClientInterface) DeploymentServiceListDeployments(ctx context.Context, projectName string, params *DeploymentServiceListDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceListDeployments", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceListDeployments indicates an expected call of DeploymentServiceListDeployments.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceListDeployments(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceListDeployments", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceListDeployments), varargs...)
}

// DeploymentServiceListDeploymentsPerCluster mocks base method.
func (m *MockClientInterface) DeploymentServiceListDeploymentsPerCluster(ctx context.Context, projectName, clusterId string, params *DeploymentServiceListDeploymentsPerClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceListDeploymentsPerCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceListDeploymentsPerCluster indicates an expected call of DeploymentServiceListDeploymentsPerCluster.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceListDeploymentsPerCluster(ctx, projectName, clusterId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceListDeploymentsPerCluster", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceListDeploymentsPerCluster), varargs...)
}

// DeploymentServiceListUIExtensions mocks base method.
func (m *MockClientInterface) DeploymentServiceListUIExtensions(ctx context.Context, projectName string, params *DeploymentServiceListUIExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceListUIExtensions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceListUIExtensions indicates an expected call of DeploymentServiceListUIExtensions.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceListUIExtensions(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceListUIExtensions", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceListUIExtensions), varargs...)
}

// DeploymentServiceUpdateDeployment mocks base method.
func (m *MockClientInterface) DeploymentServiceUpdateDeployment(ctx context.Context, projectName, deplId string, body DeploymentServiceUpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deplId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceUpdateDeployment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceUpdateDeployment indicates an expected call of DeploymentServiceUpdateDeployment.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceUpdateDeployment(ctx, projectName, deplId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deplId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceUpdateDeployment", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceUpdateDeployment), varargs...)
}

// DeploymentServiceUpdateDeploymentWithBody mocks base method.
func (m *MockClientInterface) DeploymentServiceUpdateDeploymentWithBody(ctx context.Context, projectName, deplId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deplId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceUpdateDeploymentWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceUpdateDeploymentWithBody indicates an expected call of DeploymentServiceUpdateDeploymentWithBody.
func (mr *MockClientInterfaceMockRecorder) DeploymentServiceUpdateDeploymentWithBody(ctx, projectName, deplId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deplId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceUpdateDeploymentWithBody", reflect.TypeOf((*MockClientInterface)(nil).DeploymentServiceUpdateDeploymentWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// ClusterServiceGetClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ClusterServiceGetClusterWithResponse(ctx context.Context, projectName, clusterId string, reqEditors ...RequestEditorFn) (*ClusterServiceGetClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterServiceGetClusterWithResponse", varargs...)
	ret0, _ := ret[0].(*ClusterServiceGetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterServiceGetClusterWithResponse indicates an expected call of ClusterServiceGetClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ClusterServiceGetClusterWithResponse(ctx, projectName, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterServiceGetClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ClusterServiceGetClusterWithResponse), varargs...)
}

// ClusterServiceListClustersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ClusterServiceListClustersWithResponse(ctx context.Context, projectName string, params *ClusterServiceListClustersParams, reqEditors ...RequestEditorFn) (*ClusterServiceListClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterServiceListClustersWithResponse", varargs...)
	ret0, _ := ret[0].(*ClusterServiceListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterServiceListClustersWithResponse indicates an expected call of ClusterServiceListClustersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ClusterServiceListClustersWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterServiceListClustersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ClusterServiceListClustersWithResponse), varargs...)
}

// DeploymentServiceCreateDeploymentWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceCreateDeploymentWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentServiceCreateDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceCreateDeploymentWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceCreateDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceCreateDeploymentWithBodyWithResponse indicates an expected call of DeploymentServiceCreateDeploymentWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceCreateDeploymentWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceCreateDeploymentWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceCreateDeploymentWithBodyWithResponse), varargs...)
}

// DeploymentServiceCreateDeploymentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceCreateDeploymentWithResponse(ctx context.Context, projectName string, body DeploymentServiceCreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentServiceCreateDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceCreateDeploymentWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceCreateDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceCreateDeploymentWithResponse indicates an expected call of DeploymentServiceCreateDeploymentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceCreateDeploymentWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceCreateDeploymentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceCreateDeploymentWithResponse), varargs...)
}

// DeploymentServiceDeleteDeploymentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceDeleteDeploymentWithResponse(ctx context.Context, projectName, deplId string, params *DeploymentServiceDeleteDeploymentParams, reqEditors ...RequestEditorFn) (*DeploymentServiceDeleteDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deplId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceDeleteDeploymentWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceDeleteDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceDeleteDeploymentWithResponse indicates an expected call of DeploymentServiceDeleteDeploymentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceDeleteDeploymentWithResponse(ctx, projectName, deplId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deplId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceDeleteDeploymentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceDeleteDeploymentWithResponse), varargs...)
}

// DeploymentServiceGetDeploymentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceGetDeploymentWithResponse(ctx context.Context, projectName, deplId string, reqEditors ...RequestEditorFn) (*DeploymentServiceGetDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deplId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceGetDeploymentWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceGetDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceGetDeploymentWithResponse indicates an expected call of DeploymentServiceGetDeploymentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceGetDeploymentWithResponse(ctx, projectName, deplId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deplId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceGetDeploymentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceGetDeploymentWithResponse), varargs...)
}

// DeploymentServiceGetDeploymentsStatusWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceGetDeploymentsStatusWithResponse(ctx context.Context, projectName string, params *DeploymentServiceGetDeploymentsStatusParams, reqEditors ...RequestEditorFn) (*DeploymentServiceGetDeploymentsStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceGetDeploymentsStatusWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceGetDeploymentsStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceGetDeploymentsStatusWithResponse indicates an expected call of DeploymentServiceGetDeploymentsStatusWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceGetDeploymentsStatusWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceGetDeploymentsStatusWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceGetDeploymentsStatusWithResponse), varargs...)
}

// DeploymentServiceListDeploymentClustersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceListDeploymentClustersWithResponse(ctx context.Context, projectName, deplId string, params *DeploymentServiceListDeploymentClustersParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListDeploymentClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deplId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceListDeploymentClustersWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceListDeploymentClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceListDeploymentClustersWithResponse indicates an expected call of DeploymentServiceListDeploymentClustersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceListDeploymentClustersWithResponse(ctx, projectName, deplId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deplId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceListDeploymentClustersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceListDeploymentClustersWithResponse), varargs...)
}

// DeploymentServiceListDeploymentsPerClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceListDeploymentsPerClusterWithResponse(ctx context.Context, projectName, clusterId string, params *DeploymentServiceListDeploymentsPerClusterParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListDeploymentsPerClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceListDeploymentsPerClusterWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceListDeploymentsPerClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceListDeploymentsPerClusterWithResponse indicates an expected call of DeploymentServiceListDeploymentsPerClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceListDeploymentsPerClusterWithResponse(ctx, projectName, clusterId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceListDeploymentsPerClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceListDeploymentsPerClusterWithResponse), varargs...)
}

// DeploymentServiceListDeploymentsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceListDeploymentsWithResponse(ctx context.Context, projectName string, params *DeploymentServiceListDeploymentsParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListDeploymentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceListDeploymentsWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceListDeploymentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceListDeploymentsWithResponse indicates an expected call of DeploymentServiceListDeploymentsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceListDeploymentsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceListDeploymentsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceListDeploymentsWithResponse), varargs...)
}

// DeploymentServiceListUIExtensionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceListUIExtensionsWithResponse(ctx context.Context, projectName string, params *DeploymentServiceListUIExtensionsParams, reqEditors ...RequestEditorFn) (*DeploymentServiceListUIExtensionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceListUIExtensionsWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceListUIExtensionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceListUIExtensionsWithResponse indicates an expected call of DeploymentServiceListUIExtensionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceListUIExtensionsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceListUIExtensionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceListUIExtensionsWithResponse), varargs...)
}

// DeploymentServiceUpdateDeploymentWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceUpdateDeploymentWithBodyWithResponse(ctx context.Context, projectName, deplId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentServiceUpdateDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deplId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceUpdateDeploymentWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceUpdateDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceUpdateDeploymentWithBodyWithResponse indicates an expected call of DeploymentServiceUpdateDeploymentWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceUpdateDeploymentWithBodyWithResponse(ctx, projectName, deplId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deplId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceUpdateDeploymentWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceUpdateDeploymentWithBodyWithResponse), varargs...)
}

// DeploymentServiceUpdateDeploymentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeploymentServiceUpdateDeploymentWithResponse(ctx context.Context, projectName, deplId string, body DeploymentServiceUpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentServiceUpdateDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deplId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentServiceUpdateDeploymentWithResponse", varargs...)
	ret0, _ := ret[0].(*DeploymentServiceUpdateDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentServiceUpdateDeploymentWithResponse indicates an expected call of DeploymentServiceUpdateDeploymentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeploymentServiceUpdateDeploymentWithResponse(ctx, projectName, deplId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deplId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentServiceUpdateDeploymentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeploymentServiceUpdateDeploymentWithResponse), varargs...)
}
