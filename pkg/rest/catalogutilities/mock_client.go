// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rest/catalogutilities/client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/rest/catalogutilities/client.go -destination=pkg/rest/catalogutilities/mock_client.go -package=catalogutilities
//

// Package catalogutilities is a generated GoMock package.
package catalogutilities

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CatalogServiceBulkCatalogUploadWithBody mocks base method.
func (m *MockClientInterface) CatalogServiceBulkCatalogUploadWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceBulkCatalogUploadWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceBulkCatalogUploadWithBody indicates an expected call of CatalogServiceBulkCatalogUploadWithBody.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceBulkCatalogUploadWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceBulkCatalogUploadWithBody", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceBulkCatalogUploadWithBody), varargs...)
}

// CatalogServiceDownloadDeploymentPackage mocks base method.
func (m *MockClientInterface) CatalogServiceDownloadDeploymentPackage(ctx context.Context, projectName, deploymentPackageName, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceDownloadDeploymentPackage", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceDownloadDeploymentPackage indicates an expected call of CatalogServiceDownloadDeploymentPackage.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceDownloadDeploymentPackage(ctx, projectName, deploymentPackageName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceDownloadDeploymentPackage", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceDownloadDeploymentPackage), varargs...)
}

// CatalogServiceGetRegistryCharts mocks base method.
func (m *MockClientInterface) CatalogServiceGetRegistryCharts(ctx context.Context, projectName string, params *CatalogServiceGetRegistryChartsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetRegistryCharts", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetRegistryCharts indicates an expected call of CatalogServiceGetRegistryCharts.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceGetRegistryCharts(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetRegistryCharts", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceGetRegistryCharts), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CatalogServiceBulkCatalogUploadWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceBulkCatalogUploadWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceBulkCatalogUploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceBulkCatalogUploadWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceBulkCatalogUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceBulkCatalogUploadWithBodyWithResponse indicates an expected call of CatalogServiceBulkCatalogUploadWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceBulkCatalogUploadWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceBulkCatalogUploadWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceBulkCatalogUploadWithBodyWithResponse), varargs...)
}

// CatalogServiceDownloadDeploymentPackageWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceDownloadDeploymentPackageWithResponse(ctx context.Context, projectName, deploymentPackageName, version string, reqEditors ...RequestEditorFn) (*CatalogServiceDownloadDeploymentPackageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceDownloadDeploymentPackageWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceDownloadDeploymentPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceDownloadDeploymentPackageWithResponse indicates an expected call of CatalogServiceDownloadDeploymentPackageWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceDownloadDeploymentPackageWithResponse(ctx, projectName, deploymentPackageName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceDownloadDeploymentPackageWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceDownloadDeploymentPackageWithResponse), varargs...)
}

// CatalogServiceGetRegistryChartsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceGetRegistryChartsWithResponse(ctx context.Context, projectName string, params *CatalogServiceGetRegistryChartsParams, reqEditors ...RequestEditorFn) (*CatalogServiceGetRegistryChartsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetRegistryChartsWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceGetRegistryChartsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetRegistryChartsWithResponse indicates an expected call of CatalogServiceGetRegistryChartsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceGetRegistryChartsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetRegistryChartsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceGetRegistryChartsWithResponse), varargs...)
}
