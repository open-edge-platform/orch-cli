// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rest/rps/client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/rest/rps/client.go -destination=pkg/rest/rps/mock_client.go -package=rps
//

// Package rps is a generated GoMock package.
package rps

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CreateDomain mocks base method.
func (m *MockClientInterface) CreateDomain(ctx context.Context, projectName string, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomain", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain.
func (mr *MockClientInterfaceMockRecorder) CreateDomain(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockClientInterface)(nil).CreateDomain), varargs...)
}

// CreateDomainWithBody mocks base method.
func (m *MockClientInterface) CreateDomainWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWithBody indicates an expected call of CreateDomainWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateDomainWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateDomainWithBody), varargs...)
}

// GetAllDomains mocks base method.
func (m *MockClientInterface) GetAllDomains(ctx context.Context, projectName string, params *GetAllDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllDomains", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDomains indicates an expected call of GetAllDomains.
func (mr *MockClientInterfaceMockRecorder) GetAllDomains(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDomains", reflect.TypeOf((*MockClientInterface)(nil).GetAllDomains), varargs...)
}

// GetDomain mocks base method.
func (m *MockClientInterface) GetDomain(ctx context.Context, projectName, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, profileName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomain", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockClientInterfaceMockRecorder) GetDomain(ctx, projectName, profileName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, profileName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockClientInterface)(nil).GetDomain), varargs...)
}

// RemoveDomain mocks base method.
func (m *MockClientInterface) RemoveDomain(ctx context.Context, projectName, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, profileName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveDomain", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDomain indicates an expected call of RemoveDomain.
func (mr *MockClientInterfaceMockRecorder) RemoveDomain(ctx, projectName, profileName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, profileName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDomain", reflect.TypeOf((*MockClientInterface)(nil).RemoveDomain), varargs...)
}

// UpdateDomainSuffix mocks base method.
func (m *MockClientInterface) UpdateDomainSuffix(ctx context.Context, projectName string, body UpdateDomainSuffixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainSuffix", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainSuffix indicates an expected call of UpdateDomainSuffix.
func (mr *MockClientInterfaceMockRecorder) UpdateDomainSuffix(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainSuffix", reflect.TypeOf((*MockClientInterface)(nil).UpdateDomainSuffix), varargs...)
}

// UpdateDomainSuffixWithBody mocks base method.
func (m *MockClientInterface) UpdateDomainSuffixWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainSuffixWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainSuffixWithBody indicates an expected call of UpdateDomainSuffixWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateDomainSuffixWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainSuffixWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateDomainSuffixWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CreateDomainWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateDomainWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CreateDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWithBodyWithResponse indicates an expected call of CreateDomainWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateDomainWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateDomainWithBodyWithResponse), varargs...)
}

// CreateDomainWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateDomainWithResponse(ctx context.Context, projectName string, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainWithResponse", varargs...)
	ret0, _ := ret[0].(*CreateDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWithResponse indicates an expected call of CreateDomainWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateDomainWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateDomainWithResponse), varargs...)
}

// GetAllDomainsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetAllDomainsWithResponse(ctx context.Context, projectName string, params *GetAllDomainsParams, reqEditors ...RequestEditorFn) (*GetAllDomainsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllDomainsWithResponse", varargs...)
	ret0, _ := ret[0].(*GetAllDomainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDomainsWithResponse indicates an expected call of GetAllDomainsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetAllDomainsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDomainsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetAllDomainsWithResponse), varargs...)
}

// GetDomainWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetDomainWithResponse(ctx context.Context, projectName, profileName string, reqEditors ...RequestEditorFn) (*GetDomainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, profileName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainWithResponse", varargs...)
	ret0, _ := ret[0].(*GetDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWithResponse indicates an expected call of GetDomainWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetDomainWithResponse(ctx, projectName, profileName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, profileName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetDomainWithResponse), varargs...)
}

// RemoveDomainWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RemoveDomainWithResponse(ctx context.Context, projectName, profileName string, reqEditors ...RequestEditorFn) (*RemoveDomainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, profileName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveDomainWithResponse", varargs...)
	ret0, _ := ret[0].(*RemoveDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDomainWithResponse indicates an expected call of RemoveDomainWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RemoveDomainWithResponse(ctx, projectName, profileName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, profileName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDomainWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RemoveDomainWithResponse), varargs...)
}

// UpdateDomainSuffixWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateDomainSuffixWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainSuffixResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainSuffixWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateDomainSuffixResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainSuffixWithBodyWithResponse indicates an expected call of UpdateDomainSuffixWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateDomainSuffixWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainSuffixWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateDomainSuffixWithBodyWithResponse), varargs...)
}

// UpdateDomainSuffixWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateDomainSuffixWithResponse(ctx context.Context, projectName string, body UpdateDomainSuffixJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainSuffixResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainSuffixWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateDomainSuffixResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainSuffixWithResponse indicates an expected call of UpdateDomainSuffixWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateDomainSuffixWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainSuffixWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateDomainSuffixWithResponse), varargs...)
}
