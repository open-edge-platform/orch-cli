// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rest/catalog/client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/rest/catalog/client.go -destination=pkg/rest/catalog/mock_client.go -package=catalog
//

// Package catalog is a generated GoMock package.
package catalog

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CatalogServiceCreateApplication mocks base method.
func (m *MockClientInterface) CatalogServiceCreateApplication(ctx context.Context, projectName string, body CatalogServiceCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateApplication", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateApplication indicates an expected call of CatalogServiceCreateApplication.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceCreateApplication(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateApplication", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceCreateApplication), varargs...)
}

// CatalogServiceCreateApplicationWithBody mocks base method.
func (m *MockClientInterface) CatalogServiceCreateApplicationWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateApplicationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateApplicationWithBody indicates an expected call of CatalogServiceCreateApplicationWithBody.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceCreateApplicationWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateApplicationWithBody", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceCreateApplicationWithBody), varargs...)
}

// CatalogServiceCreateArtifact mocks base method.
func (m *MockClientInterface) CatalogServiceCreateArtifact(ctx context.Context, projectName string, body CatalogServiceCreateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateArtifact", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateArtifact indicates an expected call of CatalogServiceCreateArtifact.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceCreateArtifact(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateArtifact", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceCreateArtifact), varargs...)
}

// CatalogServiceCreateArtifactWithBody mocks base method.
func (m *MockClientInterface) CatalogServiceCreateArtifactWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateArtifactWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateArtifactWithBody indicates an expected call of CatalogServiceCreateArtifactWithBody.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceCreateArtifactWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateArtifactWithBody", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceCreateArtifactWithBody), varargs...)
}

// CatalogServiceCreateDeploymentPackage mocks base method.
func (m *MockClientInterface) CatalogServiceCreateDeploymentPackage(ctx context.Context, projectName string, body CatalogServiceCreateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateDeploymentPackage", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateDeploymentPackage indicates an expected call of CatalogServiceCreateDeploymentPackage.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceCreateDeploymentPackage(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateDeploymentPackage", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceCreateDeploymentPackage), varargs...)
}

// CatalogServiceCreateDeploymentPackageWithBody mocks base method.
func (m *MockClientInterface) CatalogServiceCreateDeploymentPackageWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateDeploymentPackageWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateDeploymentPackageWithBody indicates an expected call of CatalogServiceCreateDeploymentPackageWithBody.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceCreateDeploymentPackageWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateDeploymentPackageWithBody", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceCreateDeploymentPackageWithBody), varargs...)
}

// CatalogServiceCreateRegistry mocks base method.
func (m *MockClientInterface) CatalogServiceCreateRegistry(ctx context.Context, projectName string, body CatalogServiceCreateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateRegistry", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateRegistry indicates an expected call of CatalogServiceCreateRegistry.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceCreateRegistry(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateRegistry", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceCreateRegistry), varargs...)
}

// CatalogServiceCreateRegistryWithBody mocks base method.
func (m *MockClientInterface) CatalogServiceCreateRegistryWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateRegistryWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateRegistryWithBody indicates an expected call of CatalogServiceCreateRegistryWithBody.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceCreateRegistryWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateRegistryWithBody", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceCreateRegistryWithBody), varargs...)
}

// CatalogServiceDeleteApplication mocks base method.
func (m *MockClientInterface) CatalogServiceDeleteApplication(ctx context.Context, projectName, applicationName, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceDeleteApplication", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceDeleteApplication indicates an expected call of CatalogServiceDeleteApplication.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceDeleteApplication(ctx, projectName, applicationName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceDeleteApplication", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceDeleteApplication), varargs...)
}

// CatalogServiceDeleteArtifact mocks base method.
func (m *MockClientInterface) CatalogServiceDeleteArtifact(ctx context.Context, projectName, artifactName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, artifactName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceDeleteArtifact", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceDeleteArtifact indicates an expected call of CatalogServiceDeleteArtifact.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceDeleteArtifact(ctx, projectName, artifactName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, artifactName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceDeleteArtifact", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceDeleteArtifact), varargs...)
}

// CatalogServiceDeleteDeploymentPackage mocks base method.
func (m *MockClientInterface) CatalogServiceDeleteDeploymentPackage(ctx context.Context, projectName, deploymentPackageName, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceDeleteDeploymentPackage", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceDeleteDeploymentPackage indicates an expected call of CatalogServiceDeleteDeploymentPackage.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceDeleteDeploymentPackage(ctx, projectName, deploymentPackageName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceDeleteDeploymentPackage", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceDeleteDeploymentPackage), varargs...)
}

// CatalogServiceDeleteRegistry mocks base method.
func (m *MockClientInterface) CatalogServiceDeleteRegistry(ctx context.Context, projectName, registryName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, registryName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceDeleteRegistry", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceDeleteRegistry indicates an expected call of CatalogServiceDeleteRegistry.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceDeleteRegistry(ctx, projectName, registryName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, registryName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceDeleteRegistry", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceDeleteRegistry), varargs...)
}

// CatalogServiceGetApplication mocks base method.
func (m *MockClientInterface) CatalogServiceGetApplication(ctx context.Context, projectName, applicationName, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetApplication", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetApplication indicates an expected call of CatalogServiceGetApplication.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceGetApplication(ctx, projectName, applicationName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetApplication", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceGetApplication), varargs...)
}

// CatalogServiceGetApplicationReferenceCount mocks base method.
func (m *MockClientInterface) CatalogServiceGetApplicationReferenceCount(ctx context.Context, projectName, applicationName, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetApplicationReferenceCount", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetApplicationReferenceCount indicates an expected call of CatalogServiceGetApplicationReferenceCount.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceGetApplicationReferenceCount(ctx, projectName, applicationName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetApplicationReferenceCount", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceGetApplicationReferenceCount), varargs...)
}

// CatalogServiceGetApplicationVersions mocks base method.
func (m *MockClientInterface) CatalogServiceGetApplicationVersions(ctx context.Context, projectName, applicationName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetApplicationVersions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetApplicationVersions indicates an expected call of CatalogServiceGetApplicationVersions.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceGetApplicationVersions(ctx, projectName, applicationName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetApplicationVersions", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceGetApplicationVersions), varargs...)
}

// CatalogServiceGetArtifact mocks base method.
func (m *MockClientInterface) CatalogServiceGetArtifact(ctx context.Context, projectName, artifactName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, artifactName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetArtifact", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetArtifact indicates an expected call of CatalogServiceGetArtifact.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceGetArtifact(ctx, projectName, artifactName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, artifactName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetArtifact", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceGetArtifact), varargs...)
}

// CatalogServiceGetDeploymentPackage mocks base method.
func (m *MockClientInterface) CatalogServiceGetDeploymentPackage(ctx context.Context, projectName, deploymentPackageName, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetDeploymentPackage", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetDeploymentPackage indicates an expected call of CatalogServiceGetDeploymentPackage.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceGetDeploymentPackage(ctx, projectName, deploymentPackageName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetDeploymentPackage", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceGetDeploymentPackage), varargs...)
}

// CatalogServiceGetDeploymentPackageVersions mocks base method.
func (m *MockClientInterface) CatalogServiceGetDeploymentPackageVersions(ctx context.Context, projectName, deploymentPackageName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetDeploymentPackageVersions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetDeploymentPackageVersions indicates an expected call of CatalogServiceGetDeploymentPackageVersions.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceGetDeploymentPackageVersions(ctx, projectName, deploymentPackageName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetDeploymentPackageVersions", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceGetDeploymentPackageVersions), varargs...)
}

// CatalogServiceGetRegistry mocks base method.
func (m *MockClientInterface) CatalogServiceGetRegistry(ctx context.Context, projectName, registryName string, params *CatalogServiceGetRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, registryName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetRegistry", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetRegistry indicates an expected call of CatalogServiceGetRegistry.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceGetRegistry(ctx, projectName, registryName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, registryName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetRegistry", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceGetRegistry), varargs...)
}

// CatalogServiceImport mocks base method.
func (m *MockClientInterface) CatalogServiceImport(ctx context.Context, projectName string, params *CatalogServiceImportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceImport", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceImport indicates an expected call of CatalogServiceImport.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceImport(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceImport", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceImport), varargs...)
}

// CatalogServiceListApplications mocks base method.
func (m *MockClientInterface) CatalogServiceListApplications(ctx context.Context, projectName string, params *CatalogServiceListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceListApplications", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceListApplications indicates an expected call of CatalogServiceListApplications.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceListApplications(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceListApplications", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceListApplications), varargs...)
}

// CatalogServiceListArtifacts mocks base method.
func (m *MockClientInterface) CatalogServiceListArtifacts(ctx context.Context, projectName string, params *CatalogServiceListArtifactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceListArtifacts", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceListArtifacts indicates an expected call of CatalogServiceListArtifacts.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceListArtifacts(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceListArtifacts", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceListArtifacts), varargs...)
}

// CatalogServiceListDeploymentPackages mocks base method.
func (m *MockClientInterface) CatalogServiceListDeploymentPackages(ctx context.Context, projectName string, params *CatalogServiceListDeploymentPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceListDeploymentPackages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceListDeploymentPackages indicates an expected call of CatalogServiceListDeploymentPackages.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceListDeploymentPackages(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceListDeploymentPackages", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceListDeploymentPackages), varargs...)
}

// CatalogServiceListRegistries mocks base method.
func (m *MockClientInterface) CatalogServiceListRegistries(ctx context.Context, projectName string, params *CatalogServiceListRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceListRegistries", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceListRegistries indicates an expected call of CatalogServiceListRegistries.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceListRegistries(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceListRegistries", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceListRegistries), varargs...)
}

// CatalogServiceUpdateApplication mocks base method.
func (m *MockClientInterface) CatalogServiceUpdateApplication(ctx context.Context, projectName, applicationName, version string, body CatalogServiceUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName, version, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateApplication", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateApplication indicates an expected call of CatalogServiceUpdateApplication.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceUpdateApplication(ctx, projectName, applicationName, version, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName, version, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateApplication", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceUpdateApplication), varargs...)
}

// CatalogServiceUpdateApplicationWithBody mocks base method.
func (m *MockClientInterface) CatalogServiceUpdateApplicationWithBody(ctx context.Context, projectName, applicationName, version, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName, version, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateApplicationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateApplicationWithBody indicates an expected call of CatalogServiceUpdateApplicationWithBody.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceUpdateApplicationWithBody(ctx, projectName, applicationName, version, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName, version, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateApplicationWithBody", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceUpdateApplicationWithBody), varargs...)
}

// CatalogServiceUpdateArtifact mocks base method.
func (m *MockClientInterface) CatalogServiceUpdateArtifact(ctx context.Context, projectName, artifactName string, body CatalogServiceUpdateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, artifactName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateArtifact", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateArtifact indicates an expected call of CatalogServiceUpdateArtifact.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceUpdateArtifact(ctx, projectName, artifactName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, artifactName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateArtifact", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceUpdateArtifact), varargs...)
}

// CatalogServiceUpdateArtifactWithBody mocks base method.
func (m *MockClientInterface) CatalogServiceUpdateArtifactWithBody(ctx context.Context, projectName, artifactName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, artifactName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateArtifactWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateArtifactWithBody indicates an expected call of CatalogServiceUpdateArtifactWithBody.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceUpdateArtifactWithBody(ctx, projectName, artifactName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, artifactName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateArtifactWithBody", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceUpdateArtifactWithBody), varargs...)
}

// CatalogServiceUpdateDeploymentPackage mocks base method.
func (m *MockClientInterface) CatalogServiceUpdateDeploymentPackage(ctx context.Context, projectName, deploymentPackageName, version string, body CatalogServiceUpdateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName, version, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateDeploymentPackage", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateDeploymentPackage indicates an expected call of CatalogServiceUpdateDeploymentPackage.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceUpdateDeploymentPackage(ctx, projectName, deploymentPackageName, version, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName, version, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateDeploymentPackage", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceUpdateDeploymentPackage), varargs...)
}

// CatalogServiceUpdateDeploymentPackageWithBody mocks base method.
func (m *MockClientInterface) CatalogServiceUpdateDeploymentPackageWithBody(ctx context.Context, projectName, deploymentPackageName, version, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName, version, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateDeploymentPackageWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateDeploymentPackageWithBody indicates an expected call of CatalogServiceUpdateDeploymentPackageWithBody.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceUpdateDeploymentPackageWithBody(ctx, projectName, deploymentPackageName, version, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName, version, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateDeploymentPackageWithBody", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceUpdateDeploymentPackageWithBody), varargs...)
}

// CatalogServiceUpdateRegistry mocks base method.
func (m *MockClientInterface) CatalogServiceUpdateRegistry(ctx context.Context, projectName, registryName string, body CatalogServiceUpdateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, registryName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateRegistry", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateRegistry indicates an expected call of CatalogServiceUpdateRegistry.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceUpdateRegistry(ctx, projectName, registryName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, registryName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateRegistry", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceUpdateRegistry), varargs...)
}

// CatalogServiceUpdateRegistryWithBody mocks base method.
func (m *MockClientInterface) CatalogServiceUpdateRegistryWithBody(ctx context.Context, projectName, registryName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, registryName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateRegistryWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateRegistryWithBody indicates an expected call of CatalogServiceUpdateRegistryWithBody.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceUpdateRegistryWithBody(ctx, projectName, registryName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, registryName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateRegistryWithBody", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceUpdateRegistryWithBody), varargs...)
}

// CatalogServiceUploadCatalogEntities mocks base method.
func (m *MockClientInterface) CatalogServiceUploadCatalogEntities(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, body CatalogServiceUploadCatalogEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUploadCatalogEntities", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUploadCatalogEntities indicates an expected call of CatalogServiceUploadCatalogEntities.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceUploadCatalogEntities(ctx, projectName, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUploadCatalogEntities", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceUploadCatalogEntities), varargs...)
}

// CatalogServiceUploadCatalogEntitiesWithBody mocks base method.
func (m *MockClientInterface) CatalogServiceUploadCatalogEntitiesWithBody(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUploadCatalogEntitiesWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUploadCatalogEntitiesWithBody indicates an expected call of CatalogServiceUploadCatalogEntitiesWithBody.
func (mr *MockClientInterfaceMockRecorder) CatalogServiceUploadCatalogEntitiesWithBody(ctx, projectName, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUploadCatalogEntitiesWithBody", reflect.TypeOf((*MockClientInterface)(nil).CatalogServiceUploadCatalogEntitiesWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CatalogServiceCreateApplicationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceCreateApplicationWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateApplicationWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceCreateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateApplicationWithBodyWithResponse indicates an expected call of CatalogServiceCreateApplicationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceCreateApplicationWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateApplicationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceCreateApplicationWithBodyWithResponse), varargs...)
}

// CatalogServiceCreateApplicationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceCreateApplicationWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateApplicationWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceCreateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateApplicationWithResponse indicates an expected call of CatalogServiceCreateApplicationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceCreateApplicationWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateApplicationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceCreateApplicationWithResponse), varargs...)
}

// CatalogServiceCreateArtifactWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceCreateArtifactWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateArtifactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateArtifactWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceCreateArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateArtifactWithBodyWithResponse indicates an expected call of CatalogServiceCreateArtifactWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceCreateArtifactWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateArtifactWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceCreateArtifactWithBodyWithResponse), varargs...)
}

// CatalogServiceCreateArtifactWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceCreateArtifactWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateArtifactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateArtifactWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceCreateArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateArtifactWithResponse indicates an expected call of CatalogServiceCreateArtifactWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceCreateArtifactWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateArtifactWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceCreateArtifactWithResponse), varargs...)
}

// CatalogServiceCreateDeploymentPackageWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceCreateDeploymentPackageWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateDeploymentPackageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateDeploymentPackageWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceCreateDeploymentPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateDeploymentPackageWithBodyWithResponse indicates an expected call of CatalogServiceCreateDeploymentPackageWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceCreateDeploymentPackageWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateDeploymentPackageWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceCreateDeploymentPackageWithBodyWithResponse), varargs...)
}

// CatalogServiceCreateDeploymentPackageWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceCreateDeploymentPackageWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateDeploymentPackageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateDeploymentPackageWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceCreateDeploymentPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateDeploymentPackageWithResponse indicates an expected call of CatalogServiceCreateDeploymentPackageWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceCreateDeploymentPackageWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateDeploymentPackageWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceCreateDeploymentPackageWithResponse), varargs...)
}

// CatalogServiceCreateRegistryWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceCreateRegistryWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateRegistryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateRegistryWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceCreateRegistryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateRegistryWithBodyWithResponse indicates an expected call of CatalogServiceCreateRegistryWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceCreateRegistryWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateRegistryWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceCreateRegistryWithBodyWithResponse), varargs...)
}

// CatalogServiceCreateRegistryWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceCreateRegistryWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateRegistryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceCreateRegistryWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceCreateRegistryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceCreateRegistryWithResponse indicates an expected call of CatalogServiceCreateRegistryWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceCreateRegistryWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceCreateRegistryWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceCreateRegistryWithResponse), varargs...)
}

// CatalogServiceDeleteApplicationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceDeleteApplicationWithResponse(ctx context.Context, projectName, applicationName, version string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceDeleteApplicationWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceDeleteApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceDeleteApplicationWithResponse indicates an expected call of CatalogServiceDeleteApplicationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceDeleteApplicationWithResponse(ctx, projectName, applicationName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceDeleteApplicationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceDeleteApplicationWithResponse), varargs...)
}

// CatalogServiceDeleteArtifactWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceDeleteArtifactWithResponse(ctx context.Context, projectName, artifactName string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteArtifactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, artifactName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceDeleteArtifactWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceDeleteArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceDeleteArtifactWithResponse indicates an expected call of CatalogServiceDeleteArtifactWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceDeleteArtifactWithResponse(ctx, projectName, artifactName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, artifactName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceDeleteArtifactWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceDeleteArtifactWithResponse), varargs...)
}

// CatalogServiceDeleteDeploymentPackageWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceDeleteDeploymentPackageWithResponse(ctx context.Context, projectName, deploymentPackageName, version string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteDeploymentPackageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceDeleteDeploymentPackageWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceDeleteDeploymentPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceDeleteDeploymentPackageWithResponse indicates an expected call of CatalogServiceDeleteDeploymentPackageWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceDeleteDeploymentPackageWithResponse(ctx, projectName, deploymentPackageName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceDeleteDeploymentPackageWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceDeleteDeploymentPackageWithResponse), varargs...)
}

// CatalogServiceDeleteRegistryWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceDeleteRegistryWithResponse(ctx context.Context, projectName, registryName string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteRegistryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, registryName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceDeleteRegistryWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceDeleteRegistryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceDeleteRegistryWithResponse indicates an expected call of CatalogServiceDeleteRegistryWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceDeleteRegistryWithResponse(ctx, projectName, registryName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, registryName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceDeleteRegistryWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceDeleteRegistryWithResponse), varargs...)
}

// CatalogServiceGetApplicationReferenceCountWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceGetApplicationReferenceCountWithResponse(ctx context.Context, projectName, applicationName, version string, reqEditors ...RequestEditorFn) (*CatalogServiceGetApplicationReferenceCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetApplicationReferenceCountWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceGetApplicationReferenceCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetApplicationReferenceCountWithResponse indicates an expected call of CatalogServiceGetApplicationReferenceCountWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceGetApplicationReferenceCountWithResponse(ctx, projectName, applicationName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetApplicationReferenceCountWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceGetApplicationReferenceCountWithResponse), varargs...)
}

// CatalogServiceGetApplicationVersionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceGetApplicationVersionsWithResponse(ctx context.Context, projectName, applicationName string, reqEditors ...RequestEditorFn) (*CatalogServiceGetApplicationVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetApplicationVersionsWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceGetApplicationVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetApplicationVersionsWithResponse indicates an expected call of CatalogServiceGetApplicationVersionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceGetApplicationVersionsWithResponse(ctx, projectName, applicationName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetApplicationVersionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceGetApplicationVersionsWithResponse), varargs...)
}

// CatalogServiceGetApplicationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceGetApplicationWithResponse(ctx context.Context, projectName, applicationName, version string, reqEditors ...RequestEditorFn) (*CatalogServiceGetApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetApplicationWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceGetApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetApplicationWithResponse indicates an expected call of CatalogServiceGetApplicationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceGetApplicationWithResponse(ctx, projectName, applicationName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetApplicationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceGetApplicationWithResponse), varargs...)
}

// CatalogServiceGetArtifactWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceGetArtifactWithResponse(ctx context.Context, projectName, artifactName string, reqEditors ...RequestEditorFn) (*CatalogServiceGetArtifactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, artifactName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetArtifactWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceGetArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetArtifactWithResponse indicates an expected call of CatalogServiceGetArtifactWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceGetArtifactWithResponse(ctx, projectName, artifactName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, artifactName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetArtifactWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceGetArtifactWithResponse), varargs...)
}

// CatalogServiceGetDeploymentPackageVersionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceGetDeploymentPackageVersionsWithResponse(ctx context.Context, projectName, deploymentPackageName string, reqEditors ...RequestEditorFn) (*CatalogServiceGetDeploymentPackageVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetDeploymentPackageVersionsWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceGetDeploymentPackageVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetDeploymentPackageVersionsWithResponse indicates an expected call of CatalogServiceGetDeploymentPackageVersionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceGetDeploymentPackageVersionsWithResponse(ctx, projectName, deploymentPackageName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetDeploymentPackageVersionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceGetDeploymentPackageVersionsWithResponse), varargs...)
}

// CatalogServiceGetDeploymentPackageWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceGetDeploymentPackageWithResponse(ctx context.Context, projectName, deploymentPackageName, version string, reqEditors ...RequestEditorFn) (*CatalogServiceGetDeploymentPackageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetDeploymentPackageWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceGetDeploymentPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetDeploymentPackageWithResponse indicates an expected call of CatalogServiceGetDeploymentPackageWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceGetDeploymentPackageWithResponse(ctx, projectName, deploymentPackageName, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetDeploymentPackageWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceGetDeploymentPackageWithResponse), varargs...)
}

// CatalogServiceGetRegistryWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceGetRegistryWithResponse(ctx context.Context, projectName, registryName string, params *CatalogServiceGetRegistryParams, reqEditors ...RequestEditorFn) (*CatalogServiceGetRegistryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, registryName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceGetRegistryWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceGetRegistryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceGetRegistryWithResponse indicates an expected call of CatalogServiceGetRegistryWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceGetRegistryWithResponse(ctx, projectName, registryName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, registryName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceGetRegistryWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceGetRegistryWithResponse), varargs...)
}

// CatalogServiceImportWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceImportWithResponse(ctx context.Context, projectName string, params *CatalogServiceImportParams, reqEditors ...RequestEditorFn) (*CatalogServiceImportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceImportWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceImportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceImportWithResponse indicates an expected call of CatalogServiceImportWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceImportWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceImportWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceImportWithResponse), varargs...)
}

// CatalogServiceListApplicationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceListApplicationsWithResponse(ctx context.Context, projectName string, params *CatalogServiceListApplicationsParams, reqEditors ...RequestEditorFn) (*CatalogServiceListApplicationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceListApplicationsWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceListApplicationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceListApplicationsWithResponse indicates an expected call of CatalogServiceListApplicationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceListApplicationsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceListApplicationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceListApplicationsWithResponse), varargs...)
}

// CatalogServiceListArtifactsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceListArtifactsWithResponse(ctx context.Context, projectName string, params *CatalogServiceListArtifactsParams, reqEditors ...RequestEditorFn) (*CatalogServiceListArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceListArtifactsWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceListArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceListArtifactsWithResponse indicates an expected call of CatalogServiceListArtifactsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceListArtifactsWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceListArtifactsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceListArtifactsWithResponse), varargs...)
}

// CatalogServiceListDeploymentPackagesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceListDeploymentPackagesWithResponse(ctx context.Context, projectName string, params *CatalogServiceListDeploymentPackagesParams, reqEditors ...RequestEditorFn) (*CatalogServiceListDeploymentPackagesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceListDeploymentPackagesWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceListDeploymentPackagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceListDeploymentPackagesWithResponse indicates an expected call of CatalogServiceListDeploymentPackagesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceListDeploymentPackagesWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceListDeploymentPackagesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceListDeploymentPackagesWithResponse), varargs...)
}

// CatalogServiceListRegistriesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceListRegistriesWithResponse(ctx context.Context, projectName string, params *CatalogServiceListRegistriesParams, reqEditors ...RequestEditorFn) (*CatalogServiceListRegistriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceListRegistriesWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceListRegistriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceListRegistriesWithResponse indicates an expected call of CatalogServiceListRegistriesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceListRegistriesWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceListRegistriesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceListRegistriesWithResponse), varargs...)
}

// CatalogServiceUpdateApplicationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceUpdateApplicationWithBodyWithResponse(ctx context.Context, projectName, applicationName, version, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName, version, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateApplicationWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceUpdateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateApplicationWithBodyWithResponse indicates an expected call of CatalogServiceUpdateApplicationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceUpdateApplicationWithBodyWithResponse(ctx, projectName, applicationName, version, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName, version, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateApplicationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceUpdateApplicationWithBodyWithResponse), varargs...)
}

// CatalogServiceUpdateApplicationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceUpdateApplicationWithResponse(ctx context.Context, projectName, applicationName, version string, body CatalogServiceUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, applicationName, version, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateApplicationWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceUpdateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateApplicationWithResponse indicates an expected call of CatalogServiceUpdateApplicationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceUpdateApplicationWithResponse(ctx, projectName, applicationName, version, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, applicationName, version, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateApplicationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceUpdateApplicationWithResponse), varargs...)
}

// CatalogServiceUpdateArtifactWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceUpdateArtifactWithBodyWithResponse(ctx context.Context, projectName, artifactName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateArtifactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, artifactName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateArtifactWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceUpdateArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateArtifactWithBodyWithResponse indicates an expected call of CatalogServiceUpdateArtifactWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceUpdateArtifactWithBodyWithResponse(ctx, projectName, artifactName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, artifactName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateArtifactWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceUpdateArtifactWithBodyWithResponse), varargs...)
}

// CatalogServiceUpdateArtifactWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceUpdateArtifactWithResponse(ctx context.Context, projectName, artifactName string, body CatalogServiceUpdateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateArtifactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, artifactName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateArtifactWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceUpdateArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateArtifactWithResponse indicates an expected call of CatalogServiceUpdateArtifactWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceUpdateArtifactWithResponse(ctx, projectName, artifactName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, artifactName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateArtifactWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceUpdateArtifactWithResponse), varargs...)
}

// CatalogServiceUpdateDeploymentPackageWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceUpdateDeploymentPackageWithBodyWithResponse(ctx context.Context, projectName, deploymentPackageName, version, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateDeploymentPackageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName, version, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateDeploymentPackageWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceUpdateDeploymentPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateDeploymentPackageWithBodyWithResponse indicates an expected call of CatalogServiceUpdateDeploymentPackageWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceUpdateDeploymentPackageWithBodyWithResponse(ctx, projectName, deploymentPackageName, version, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName, version, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateDeploymentPackageWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceUpdateDeploymentPackageWithBodyWithResponse), varargs...)
}

// CatalogServiceUpdateDeploymentPackageWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceUpdateDeploymentPackageWithResponse(ctx context.Context, projectName, deploymentPackageName, version string, body CatalogServiceUpdateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateDeploymentPackageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, deploymentPackageName, version, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateDeploymentPackageWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceUpdateDeploymentPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateDeploymentPackageWithResponse indicates an expected call of CatalogServiceUpdateDeploymentPackageWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceUpdateDeploymentPackageWithResponse(ctx, projectName, deploymentPackageName, version, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, deploymentPackageName, version, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateDeploymentPackageWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceUpdateDeploymentPackageWithResponse), varargs...)
}

// CatalogServiceUpdateRegistryWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceUpdateRegistryWithBodyWithResponse(ctx context.Context, projectName, registryName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateRegistryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, registryName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateRegistryWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceUpdateRegistryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateRegistryWithBodyWithResponse indicates an expected call of CatalogServiceUpdateRegistryWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceUpdateRegistryWithBodyWithResponse(ctx, projectName, registryName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, registryName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateRegistryWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceUpdateRegistryWithBodyWithResponse), varargs...)
}

// CatalogServiceUpdateRegistryWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceUpdateRegistryWithResponse(ctx context.Context, projectName, registryName string, body CatalogServiceUpdateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateRegistryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, registryName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUpdateRegistryWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceUpdateRegistryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUpdateRegistryWithResponse indicates an expected call of CatalogServiceUpdateRegistryWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceUpdateRegistryWithResponse(ctx, projectName, registryName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, registryName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUpdateRegistryWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceUpdateRegistryWithResponse), varargs...)
}

// CatalogServiceUploadCatalogEntitiesWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceUploadCatalogEntitiesWithBodyWithResponse(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUploadCatalogEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUploadCatalogEntitiesWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceUploadCatalogEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUploadCatalogEntitiesWithBodyWithResponse indicates an expected call of CatalogServiceUploadCatalogEntitiesWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceUploadCatalogEntitiesWithBodyWithResponse(ctx, projectName, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUploadCatalogEntitiesWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceUploadCatalogEntitiesWithBodyWithResponse), varargs...)
}

// CatalogServiceUploadCatalogEntitiesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CatalogServiceUploadCatalogEntitiesWithResponse(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, body CatalogServiceUploadCatalogEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUploadCatalogEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CatalogServiceUploadCatalogEntitiesWithResponse", varargs...)
	ret0, _ := ret[0].(*CatalogServiceUploadCatalogEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatalogServiceUploadCatalogEntitiesWithResponse indicates an expected call of CatalogServiceUploadCatalogEntitiesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CatalogServiceUploadCatalogEntitiesWithResponse(ctx, projectName, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogServiceUploadCatalogEntitiesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CatalogServiceUploadCatalogEntitiesWithResponse), varargs...)
}
