// Package catalog provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package catalog

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CatalogServiceListApplications request
	CatalogServiceListApplications(ctx context.Context, projectName string, params *CatalogServiceListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceCreateApplicationWithBody request with any body
	CatalogServiceCreateApplicationWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogServiceCreateApplication(ctx context.Context, projectName string, body CatalogServiceCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceGetApplicationVersions request
	CatalogServiceGetApplicationVersions(ctx context.Context, projectName string, applicationName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceDeleteApplication request
	CatalogServiceDeleteApplication(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceGetApplication request
	CatalogServiceGetApplication(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceUpdateApplicationWithBody request with any body
	CatalogServiceUpdateApplicationWithBody(ctx context.Context, projectName string, applicationName string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogServiceUpdateApplication(ctx context.Context, projectName string, applicationName string, version string, body CatalogServiceUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceGetApplicationReferenceCount request
	CatalogServiceGetApplicationReferenceCount(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceListArtifacts request
	CatalogServiceListArtifacts(ctx context.Context, projectName string, params *CatalogServiceListArtifactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceCreateArtifactWithBody request with any body
	CatalogServiceCreateArtifactWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogServiceCreateArtifact(ctx context.Context, projectName string, body CatalogServiceCreateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceDeleteArtifact request
	CatalogServiceDeleteArtifact(ctx context.Context, projectName string, artifactName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceGetArtifact request
	CatalogServiceGetArtifact(ctx context.Context, projectName string, artifactName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceUpdateArtifactWithBody request with any body
	CatalogServiceUpdateArtifactWithBody(ctx context.Context, projectName string, artifactName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogServiceUpdateArtifact(ctx context.Context, projectName string, artifactName string, body CatalogServiceUpdateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceListDeploymentPackages request
	CatalogServiceListDeploymentPackages(ctx context.Context, projectName string, params *CatalogServiceListDeploymentPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceCreateDeploymentPackageWithBody request with any body
	CatalogServiceCreateDeploymentPackageWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogServiceCreateDeploymentPackage(ctx context.Context, projectName string, body CatalogServiceCreateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceGetDeploymentPackageVersions request
	CatalogServiceGetDeploymentPackageVersions(ctx context.Context, projectName string, deploymentPackageName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceDeleteDeploymentPackage request
	CatalogServiceDeleteDeploymentPackage(ctx context.Context, projectName string, deploymentPackageName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceGetDeploymentPackage request
	CatalogServiceGetDeploymentPackage(ctx context.Context, projectName string, deploymentPackageName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceUpdateDeploymentPackageWithBody request with any body
	CatalogServiceUpdateDeploymentPackageWithBody(ctx context.Context, projectName string, deploymentPackageName string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogServiceUpdateDeploymentPackage(ctx context.Context, projectName string, deploymentPackageName string, version string, body CatalogServiceUpdateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceImport request
	CatalogServiceImport(ctx context.Context, projectName string, params *CatalogServiceImportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceListRegistries request
	CatalogServiceListRegistries(ctx context.Context, projectName string, params *CatalogServiceListRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceCreateRegistryWithBody request with any body
	CatalogServiceCreateRegistryWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogServiceCreateRegistry(ctx context.Context, projectName string, body CatalogServiceCreateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceDeleteRegistry request
	CatalogServiceDeleteRegistry(ctx context.Context, projectName string, registryName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceGetRegistry request
	CatalogServiceGetRegistry(ctx context.Context, projectName string, registryName string, params *CatalogServiceGetRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceUpdateRegistryWithBody request with any body
	CatalogServiceUpdateRegistryWithBody(ctx context.Context, projectName string, registryName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogServiceUpdateRegistry(ctx context.Context, projectName string, registryName string, body CatalogServiceUpdateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogServiceUploadCatalogEntitiesWithBody request with any body
	CatalogServiceUploadCatalogEntitiesWithBody(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogServiceUploadCatalogEntities(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, body CatalogServiceUploadCatalogEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CatalogServiceListApplications(ctx context.Context, projectName string, params *CatalogServiceListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceListApplicationsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceCreateApplicationWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceCreateApplicationRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceCreateApplication(ctx context.Context, projectName string, body CatalogServiceCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceCreateApplicationRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceGetApplicationVersions(ctx context.Context, projectName string, applicationName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceGetApplicationVersionsRequest(c.Server, projectName, applicationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceDeleteApplication(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceDeleteApplicationRequest(c.Server, projectName, applicationName, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceGetApplication(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceGetApplicationRequest(c.Server, projectName, applicationName, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceUpdateApplicationWithBody(ctx context.Context, projectName string, applicationName string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceUpdateApplicationRequestWithBody(c.Server, projectName, applicationName, version, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceUpdateApplication(ctx context.Context, projectName string, applicationName string, version string, body CatalogServiceUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceUpdateApplicationRequest(c.Server, projectName, applicationName, version, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceGetApplicationReferenceCount(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceGetApplicationReferenceCountRequest(c.Server, projectName, applicationName, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceListArtifacts(ctx context.Context, projectName string, params *CatalogServiceListArtifactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceListArtifactsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceCreateArtifactWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceCreateArtifactRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceCreateArtifact(ctx context.Context, projectName string, body CatalogServiceCreateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceCreateArtifactRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceDeleteArtifact(ctx context.Context, projectName string, artifactName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceDeleteArtifactRequest(c.Server, projectName, artifactName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceGetArtifact(ctx context.Context, projectName string, artifactName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceGetArtifactRequest(c.Server, projectName, artifactName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceUpdateArtifactWithBody(ctx context.Context, projectName string, artifactName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceUpdateArtifactRequestWithBody(c.Server, projectName, artifactName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceUpdateArtifact(ctx context.Context, projectName string, artifactName string, body CatalogServiceUpdateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceUpdateArtifactRequest(c.Server, projectName, artifactName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceListDeploymentPackages(ctx context.Context, projectName string, params *CatalogServiceListDeploymentPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceListDeploymentPackagesRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceCreateDeploymentPackageWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceCreateDeploymentPackageRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceCreateDeploymentPackage(ctx context.Context, projectName string, body CatalogServiceCreateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceCreateDeploymentPackageRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceGetDeploymentPackageVersions(ctx context.Context, projectName string, deploymentPackageName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceGetDeploymentPackageVersionsRequest(c.Server, projectName, deploymentPackageName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceDeleteDeploymentPackage(ctx context.Context, projectName string, deploymentPackageName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceDeleteDeploymentPackageRequest(c.Server, projectName, deploymentPackageName, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceGetDeploymentPackage(ctx context.Context, projectName string, deploymentPackageName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceGetDeploymentPackageRequest(c.Server, projectName, deploymentPackageName, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceUpdateDeploymentPackageWithBody(ctx context.Context, projectName string, deploymentPackageName string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceUpdateDeploymentPackageRequestWithBody(c.Server, projectName, deploymentPackageName, version, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceUpdateDeploymentPackage(ctx context.Context, projectName string, deploymentPackageName string, version string, body CatalogServiceUpdateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceUpdateDeploymentPackageRequest(c.Server, projectName, deploymentPackageName, version, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceImport(ctx context.Context, projectName string, params *CatalogServiceImportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceImportRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceListRegistries(ctx context.Context, projectName string, params *CatalogServiceListRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceListRegistriesRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceCreateRegistryWithBody(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceCreateRegistryRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceCreateRegistry(ctx context.Context, projectName string, body CatalogServiceCreateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceCreateRegistryRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceDeleteRegistry(ctx context.Context, projectName string, registryName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceDeleteRegistryRequest(c.Server, projectName, registryName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceGetRegistry(ctx context.Context, projectName string, registryName string, params *CatalogServiceGetRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceGetRegistryRequest(c.Server, projectName, registryName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceUpdateRegistryWithBody(ctx context.Context, projectName string, registryName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceUpdateRegistryRequestWithBody(c.Server, projectName, registryName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceUpdateRegistry(ctx context.Context, projectName string, registryName string, body CatalogServiceUpdateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceUpdateRegistryRequest(c.Server, projectName, registryName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceUploadCatalogEntitiesWithBody(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceUploadCatalogEntitiesRequestWithBody(c.Server, projectName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogServiceUploadCatalogEntities(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, body CatalogServiceUploadCatalogEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogServiceUploadCatalogEntitiesRequest(c.Server, projectName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCatalogServiceListApplicationsRequest generates requests for CatalogServiceListApplications
func NewCatalogServiceListApplicationsRequest(server string, projectName string, params *CatalogServiceListApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Kinds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kinds", runtime.ParamLocationQuery, *params.Kinds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceCreateApplicationRequest calls the generic CatalogServiceCreateApplication builder with application/json body
func NewCatalogServiceCreateApplicationRequest(server string, projectName string, body CatalogServiceCreateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogServiceCreateApplicationRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewCatalogServiceCreateApplicationRequestWithBody generates requests for CatalogServiceCreateApplication with any type of body
func NewCatalogServiceCreateApplicationRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogServiceGetApplicationVersionsRequest generates requests for CatalogServiceGetApplicationVersions
func NewCatalogServiceGetApplicationVersionsRequest(server string, projectName string, applicationName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationName", runtime.ParamLocationPath, applicationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/applications/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceDeleteApplicationRequest generates requests for CatalogServiceDeleteApplication
func NewCatalogServiceDeleteApplicationRequest(server string, projectName string, applicationName string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationName", runtime.ParamLocationPath, applicationName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/applications/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceGetApplicationRequest generates requests for CatalogServiceGetApplication
func NewCatalogServiceGetApplicationRequest(server string, projectName string, applicationName string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationName", runtime.ParamLocationPath, applicationName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/applications/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceUpdateApplicationRequest calls the generic CatalogServiceUpdateApplication builder with application/json body
func NewCatalogServiceUpdateApplicationRequest(server string, projectName string, applicationName string, version string, body CatalogServiceUpdateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogServiceUpdateApplicationRequestWithBody(server, projectName, applicationName, version, "application/json", bodyReader)
}

// NewCatalogServiceUpdateApplicationRequestWithBody generates requests for CatalogServiceUpdateApplication with any type of body
func NewCatalogServiceUpdateApplicationRequestWithBody(server string, projectName string, applicationName string, version string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationName", runtime.ParamLocationPath, applicationName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/applications/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogServiceGetApplicationReferenceCountRequest generates requests for CatalogServiceGetApplicationReferenceCount
func NewCatalogServiceGetApplicationReferenceCountRequest(server string, projectName string, applicationName string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationName", runtime.ParamLocationPath, applicationName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/applications/%s/versions/%s/reference_count", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceListArtifactsRequest generates requests for CatalogServiceListArtifacts
func NewCatalogServiceListArtifactsRequest(server string, projectName string, params *CatalogServiceListArtifactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/artifacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceCreateArtifactRequest calls the generic CatalogServiceCreateArtifact builder with application/json body
func NewCatalogServiceCreateArtifactRequest(server string, projectName string, body CatalogServiceCreateArtifactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogServiceCreateArtifactRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewCatalogServiceCreateArtifactRequestWithBody generates requests for CatalogServiceCreateArtifact with any type of body
func NewCatalogServiceCreateArtifactRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/artifacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogServiceDeleteArtifactRequest generates requests for CatalogServiceDeleteArtifact
func NewCatalogServiceDeleteArtifactRequest(server string, projectName string, artifactName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifactName", runtime.ParamLocationPath, artifactName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/artifacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceGetArtifactRequest generates requests for CatalogServiceGetArtifact
func NewCatalogServiceGetArtifactRequest(server string, projectName string, artifactName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifactName", runtime.ParamLocationPath, artifactName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/artifacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceUpdateArtifactRequest calls the generic CatalogServiceUpdateArtifact builder with application/json body
func NewCatalogServiceUpdateArtifactRequest(server string, projectName string, artifactName string, body CatalogServiceUpdateArtifactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogServiceUpdateArtifactRequestWithBody(server, projectName, artifactName, "application/json", bodyReader)
}

// NewCatalogServiceUpdateArtifactRequestWithBody generates requests for CatalogServiceUpdateArtifact with any type of body
func NewCatalogServiceUpdateArtifactRequestWithBody(server string, projectName string, artifactName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifactName", runtime.ParamLocationPath, artifactName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/artifacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogServiceListDeploymentPackagesRequest generates requests for CatalogServiceListDeploymentPackages
func NewCatalogServiceListDeploymentPackagesRequest(server string, projectName string, params *CatalogServiceListDeploymentPackagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/deployment_packages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Kinds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kinds", runtime.ParamLocationQuery, *params.Kinds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceCreateDeploymentPackageRequest calls the generic CatalogServiceCreateDeploymentPackage builder with application/json body
func NewCatalogServiceCreateDeploymentPackageRequest(server string, projectName string, body CatalogServiceCreateDeploymentPackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogServiceCreateDeploymentPackageRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewCatalogServiceCreateDeploymentPackageRequestWithBody generates requests for CatalogServiceCreateDeploymentPackage with any type of body
func NewCatalogServiceCreateDeploymentPackageRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/deployment_packages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogServiceGetDeploymentPackageVersionsRequest generates requests for CatalogServiceGetDeploymentPackageVersions
func NewCatalogServiceGetDeploymentPackageVersionsRequest(server string, projectName string, deploymentPackageName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentPackageName", runtime.ParamLocationPath, deploymentPackageName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/deployment_packages/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceDeleteDeploymentPackageRequest generates requests for CatalogServiceDeleteDeploymentPackage
func NewCatalogServiceDeleteDeploymentPackageRequest(server string, projectName string, deploymentPackageName string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentPackageName", runtime.ParamLocationPath, deploymentPackageName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/deployment_packages/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceGetDeploymentPackageRequest generates requests for CatalogServiceGetDeploymentPackage
func NewCatalogServiceGetDeploymentPackageRequest(server string, projectName string, deploymentPackageName string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentPackageName", runtime.ParamLocationPath, deploymentPackageName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/deployment_packages/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceUpdateDeploymentPackageRequest calls the generic CatalogServiceUpdateDeploymentPackage builder with application/json body
func NewCatalogServiceUpdateDeploymentPackageRequest(server string, projectName string, deploymentPackageName string, version string, body CatalogServiceUpdateDeploymentPackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogServiceUpdateDeploymentPackageRequestWithBody(server, projectName, deploymentPackageName, version, "application/json", bodyReader)
}

// NewCatalogServiceUpdateDeploymentPackageRequestWithBody generates requests for CatalogServiceUpdateDeploymentPackage with any type of body
func NewCatalogServiceUpdateDeploymentPackageRequestWithBody(server string, projectName string, deploymentPackageName string, version string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentPackageName", runtime.ParamLocationPath, deploymentPackageName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/deployment_packages/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogServiceImportRequest generates requests for CatalogServiceImport
func NewCatalogServiceImportRequest(server string, projectName string, params *CatalogServiceImportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/import", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authToken", runtime.ParamLocationQuery, *params.AuthToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChartValues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chartValues", runtime.ParamLocationQuery, *params.ChartValues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeAuth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeAuth", runtime.ParamLocationQuery, *params.IncludeAuth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GenerateDefaultValues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "generateDefaultValues", runtime.ParamLocationQuery, *params.GenerateDefaultValues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GenerateDefaultParameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "generateDefaultParameters", runtime.ParamLocationQuery, *params.GenerateDefaultParameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Namespace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceListRegistriesRequest generates requests for CatalogServiceListRegistries
func NewCatalogServiceListRegistriesRequest(server string, projectName string, params *CatalogServiceListRegistriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowSensitiveInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showSensitiveInfo", runtime.ParamLocationQuery, *params.ShowSensitiveInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceCreateRegistryRequest calls the generic CatalogServiceCreateRegistry builder with application/json body
func NewCatalogServiceCreateRegistryRequest(server string, projectName string, body CatalogServiceCreateRegistryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogServiceCreateRegistryRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewCatalogServiceCreateRegistryRequestWithBody generates requests for CatalogServiceCreateRegistry with any type of body
func NewCatalogServiceCreateRegistryRequestWithBody(server string, projectName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogServiceDeleteRegistryRequest generates requests for CatalogServiceDeleteRegistry
func NewCatalogServiceDeleteRegistryRequest(server string, projectName string, registryName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "registryName", runtime.ParamLocationPath, registryName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceGetRegistryRequest generates requests for CatalogServiceGetRegistry
func NewCatalogServiceGetRegistryRequest(server string, projectName string, registryName string, params *CatalogServiceGetRegistryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "registryName", runtime.ParamLocationPath, registryName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ShowSensitiveInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showSensitiveInfo", runtime.ParamLocationQuery, *params.ShowSensitiveInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogServiceUpdateRegistryRequest calls the generic CatalogServiceUpdateRegistry builder with application/json body
func NewCatalogServiceUpdateRegistryRequest(server string, projectName string, registryName string, body CatalogServiceUpdateRegistryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogServiceUpdateRegistryRequestWithBody(server, projectName, registryName, "application/json", bodyReader)
}

// NewCatalogServiceUpdateRegistryRequestWithBody generates requests for CatalogServiceUpdateRegistry with any type of body
func NewCatalogServiceUpdateRegistryRequestWithBody(server string, projectName string, registryName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "registryName", runtime.ParamLocationPath, registryName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogServiceUploadCatalogEntitiesRequest calls the generic CatalogServiceUploadCatalogEntities builder with application/json body
func NewCatalogServiceUploadCatalogEntitiesRequest(server string, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, body CatalogServiceUploadCatalogEntitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogServiceUploadCatalogEntitiesRequestWithBody(server, projectName, params, "application/json", bodyReader)
}

// NewCatalogServiceUploadCatalogEntitiesRequestWithBody generates requests for CatalogServiceUploadCatalogEntities with any type of body
func NewCatalogServiceUploadCatalogEntitiesRequestWithBody(server string, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/projects/%s/catalog/uploads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SessionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionId", runtime.ParamLocationQuery, *params.SessionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UploadNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploadNumber", runtime.ParamLocationQuery, *params.UploadNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastUpload", runtime.ParamLocationQuery, *params.LastUpload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CatalogServiceListApplicationsWithResponse request
	CatalogServiceListApplicationsWithResponse(ctx context.Context, projectName string, params *CatalogServiceListApplicationsParams, reqEditors ...RequestEditorFn) (*CatalogServiceListApplicationsResponse, error)

	// CatalogServiceCreateApplicationWithBodyWithResponse request with any body
	CatalogServiceCreateApplicationWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateApplicationResponse, error)

	CatalogServiceCreateApplicationWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateApplicationResponse, error)

	// CatalogServiceGetApplicationVersionsWithResponse request
	CatalogServiceGetApplicationVersionsWithResponse(ctx context.Context, projectName string, applicationName string, reqEditors ...RequestEditorFn) (*CatalogServiceGetApplicationVersionsResponse, error)

	// CatalogServiceDeleteApplicationWithResponse request
	CatalogServiceDeleteApplicationWithResponse(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteApplicationResponse, error)

	// CatalogServiceGetApplicationWithResponse request
	CatalogServiceGetApplicationWithResponse(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*CatalogServiceGetApplicationResponse, error)

	// CatalogServiceUpdateApplicationWithBodyWithResponse request with any body
	CatalogServiceUpdateApplicationWithBodyWithResponse(ctx context.Context, projectName string, applicationName string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateApplicationResponse, error)

	CatalogServiceUpdateApplicationWithResponse(ctx context.Context, projectName string, applicationName string, version string, body CatalogServiceUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateApplicationResponse, error)

	// CatalogServiceGetApplicationReferenceCountWithResponse request
	CatalogServiceGetApplicationReferenceCountWithResponse(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*CatalogServiceGetApplicationReferenceCountResponse, error)

	// CatalogServiceListArtifactsWithResponse request
	CatalogServiceListArtifactsWithResponse(ctx context.Context, projectName string, params *CatalogServiceListArtifactsParams, reqEditors ...RequestEditorFn) (*CatalogServiceListArtifactsResponse, error)

	// CatalogServiceCreateArtifactWithBodyWithResponse request with any body
	CatalogServiceCreateArtifactWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateArtifactResponse, error)

	CatalogServiceCreateArtifactWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateArtifactResponse, error)

	// CatalogServiceDeleteArtifactWithResponse request
	CatalogServiceDeleteArtifactWithResponse(ctx context.Context, projectName string, artifactName string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteArtifactResponse, error)

	// CatalogServiceGetArtifactWithResponse request
	CatalogServiceGetArtifactWithResponse(ctx context.Context, projectName string, artifactName string, reqEditors ...RequestEditorFn) (*CatalogServiceGetArtifactResponse, error)

	// CatalogServiceUpdateArtifactWithBodyWithResponse request with any body
	CatalogServiceUpdateArtifactWithBodyWithResponse(ctx context.Context, projectName string, artifactName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateArtifactResponse, error)

	CatalogServiceUpdateArtifactWithResponse(ctx context.Context, projectName string, artifactName string, body CatalogServiceUpdateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateArtifactResponse, error)

	// CatalogServiceListDeploymentPackagesWithResponse request
	CatalogServiceListDeploymentPackagesWithResponse(ctx context.Context, projectName string, params *CatalogServiceListDeploymentPackagesParams, reqEditors ...RequestEditorFn) (*CatalogServiceListDeploymentPackagesResponse, error)

	// CatalogServiceCreateDeploymentPackageWithBodyWithResponse request with any body
	CatalogServiceCreateDeploymentPackageWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateDeploymentPackageResponse, error)

	CatalogServiceCreateDeploymentPackageWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateDeploymentPackageResponse, error)

	// CatalogServiceGetDeploymentPackageVersionsWithResponse request
	CatalogServiceGetDeploymentPackageVersionsWithResponse(ctx context.Context, projectName string, deploymentPackageName string, reqEditors ...RequestEditorFn) (*CatalogServiceGetDeploymentPackageVersionsResponse, error)

	// CatalogServiceDeleteDeploymentPackageWithResponse request
	CatalogServiceDeleteDeploymentPackageWithResponse(ctx context.Context, projectName string, deploymentPackageName string, version string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteDeploymentPackageResponse, error)

	// CatalogServiceGetDeploymentPackageWithResponse request
	CatalogServiceGetDeploymentPackageWithResponse(ctx context.Context, projectName string, deploymentPackageName string, version string, reqEditors ...RequestEditorFn) (*CatalogServiceGetDeploymentPackageResponse, error)

	// CatalogServiceUpdateDeploymentPackageWithBodyWithResponse request with any body
	CatalogServiceUpdateDeploymentPackageWithBodyWithResponse(ctx context.Context, projectName string, deploymentPackageName string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateDeploymentPackageResponse, error)

	CatalogServiceUpdateDeploymentPackageWithResponse(ctx context.Context, projectName string, deploymentPackageName string, version string, body CatalogServiceUpdateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateDeploymentPackageResponse, error)

	// CatalogServiceImportWithResponse request
	CatalogServiceImportWithResponse(ctx context.Context, projectName string, params *CatalogServiceImportParams, reqEditors ...RequestEditorFn) (*CatalogServiceImportResponse, error)

	// CatalogServiceListRegistriesWithResponse request
	CatalogServiceListRegistriesWithResponse(ctx context.Context, projectName string, params *CatalogServiceListRegistriesParams, reqEditors ...RequestEditorFn) (*CatalogServiceListRegistriesResponse, error)

	// CatalogServiceCreateRegistryWithBodyWithResponse request with any body
	CatalogServiceCreateRegistryWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateRegistryResponse, error)

	CatalogServiceCreateRegistryWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateRegistryResponse, error)

	// CatalogServiceDeleteRegistryWithResponse request
	CatalogServiceDeleteRegistryWithResponse(ctx context.Context, projectName string, registryName string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteRegistryResponse, error)

	// CatalogServiceGetRegistryWithResponse request
	CatalogServiceGetRegistryWithResponse(ctx context.Context, projectName string, registryName string, params *CatalogServiceGetRegistryParams, reqEditors ...RequestEditorFn) (*CatalogServiceGetRegistryResponse, error)

	// CatalogServiceUpdateRegistryWithBodyWithResponse request with any body
	CatalogServiceUpdateRegistryWithBodyWithResponse(ctx context.Context, projectName string, registryName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateRegistryResponse, error)

	CatalogServiceUpdateRegistryWithResponse(ctx context.Context, projectName string, registryName string, body CatalogServiceUpdateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateRegistryResponse, error)

	// CatalogServiceUploadCatalogEntitiesWithBodyWithResponse request with any body
	CatalogServiceUploadCatalogEntitiesWithBodyWithResponse(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUploadCatalogEntitiesResponse, error)

	CatalogServiceUploadCatalogEntitiesWithResponse(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, body CatalogServiceUploadCatalogEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUploadCatalogEntitiesResponse, error)
}

type CatalogServiceListApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListApplicationsResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceListApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceListApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceCreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateApplicationResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceCreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceCreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceGetApplicationVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetApplicationVersionsResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceGetApplicationVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceGetApplicationVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceDeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogServiceDeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceDeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceGetApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetApplicationResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceGetApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceGetApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceUpdateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogServiceUpdateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceUpdateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceGetApplicationReferenceCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetApplicationReferenceCountResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceGetApplicationReferenceCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceGetApplicationReferenceCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceListArtifactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListArtifactsResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceListArtifactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceListArtifactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceCreateArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateArtifactResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceCreateArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceCreateArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceDeleteArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogServiceDeleteArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceDeleteArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceGetArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetArtifactResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceGetArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceGetArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceUpdateArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogServiceUpdateArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceUpdateArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceListDeploymentPackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDeploymentPackagesResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceListDeploymentPackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceListDeploymentPackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceCreateDeploymentPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateDeploymentPackageResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceCreateDeploymentPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceCreateDeploymentPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceGetDeploymentPackageVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDeploymentPackageVersionsResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceGetDeploymentPackageVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceGetDeploymentPackageVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceDeleteDeploymentPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogServiceDeleteDeploymentPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceDeleteDeploymentPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceGetDeploymentPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDeploymentPackageResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceGetDeploymentPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceGetDeploymentPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceUpdateDeploymentPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogServiceUpdateDeploymentPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceUpdateDeploymentPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceListRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRegistriesResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceListRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceListRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceCreateRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateRegistryResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceCreateRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceCreateRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceDeleteRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogServiceDeleteRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceDeleteRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceGetRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRegistryResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceGetRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceGetRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceUpdateRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogServiceUpdateRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceUpdateRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogServiceUploadCatalogEntitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadCatalogEntitiesResponse
}

// Status returns HTTPResponse.Status
func (r CatalogServiceUploadCatalogEntitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogServiceUploadCatalogEntitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CatalogServiceListApplicationsWithResponse request returning *CatalogServiceListApplicationsResponse
func (c *ClientWithResponses) CatalogServiceListApplicationsWithResponse(ctx context.Context, projectName string, params *CatalogServiceListApplicationsParams, reqEditors ...RequestEditorFn) (*CatalogServiceListApplicationsResponse, error) {
	rsp, err := c.CatalogServiceListApplications(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceListApplicationsResponse(rsp)
}

// CatalogServiceCreateApplicationWithBodyWithResponse request with arbitrary body returning *CatalogServiceCreateApplicationResponse
func (c *ClientWithResponses) CatalogServiceCreateApplicationWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateApplicationResponse, error) {
	rsp, err := c.CatalogServiceCreateApplicationWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceCreateApplicationResponse(rsp)
}

func (c *ClientWithResponses) CatalogServiceCreateApplicationWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateApplicationResponse, error) {
	rsp, err := c.CatalogServiceCreateApplication(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceCreateApplicationResponse(rsp)
}

// CatalogServiceGetApplicationVersionsWithResponse request returning *CatalogServiceGetApplicationVersionsResponse
func (c *ClientWithResponses) CatalogServiceGetApplicationVersionsWithResponse(ctx context.Context, projectName string, applicationName string, reqEditors ...RequestEditorFn) (*CatalogServiceGetApplicationVersionsResponse, error) {
	rsp, err := c.CatalogServiceGetApplicationVersions(ctx, projectName, applicationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceGetApplicationVersionsResponse(rsp)
}

// CatalogServiceDeleteApplicationWithResponse request returning *CatalogServiceDeleteApplicationResponse
func (c *ClientWithResponses) CatalogServiceDeleteApplicationWithResponse(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteApplicationResponse, error) {
	rsp, err := c.CatalogServiceDeleteApplication(ctx, projectName, applicationName, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceDeleteApplicationResponse(rsp)
}

// CatalogServiceGetApplicationWithResponse request returning *CatalogServiceGetApplicationResponse
func (c *ClientWithResponses) CatalogServiceGetApplicationWithResponse(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*CatalogServiceGetApplicationResponse, error) {
	rsp, err := c.CatalogServiceGetApplication(ctx, projectName, applicationName, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceGetApplicationResponse(rsp)
}

// CatalogServiceUpdateApplicationWithBodyWithResponse request with arbitrary body returning *CatalogServiceUpdateApplicationResponse
func (c *ClientWithResponses) CatalogServiceUpdateApplicationWithBodyWithResponse(ctx context.Context, projectName string, applicationName string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateApplicationResponse, error) {
	rsp, err := c.CatalogServiceUpdateApplicationWithBody(ctx, projectName, applicationName, version, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceUpdateApplicationResponse(rsp)
}

func (c *ClientWithResponses) CatalogServiceUpdateApplicationWithResponse(ctx context.Context, projectName string, applicationName string, version string, body CatalogServiceUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateApplicationResponse, error) {
	rsp, err := c.CatalogServiceUpdateApplication(ctx, projectName, applicationName, version, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceUpdateApplicationResponse(rsp)
}

// CatalogServiceGetApplicationReferenceCountWithResponse request returning *CatalogServiceGetApplicationReferenceCountResponse
func (c *ClientWithResponses) CatalogServiceGetApplicationReferenceCountWithResponse(ctx context.Context, projectName string, applicationName string, version string, reqEditors ...RequestEditorFn) (*CatalogServiceGetApplicationReferenceCountResponse, error) {
	rsp, err := c.CatalogServiceGetApplicationReferenceCount(ctx, projectName, applicationName, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceGetApplicationReferenceCountResponse(rsp)
}

// CatalogServiceListArtifactsWithResponse request returning *CatalogServiceListArtifactsResponse
func (c *ClientWithResponses) CatalogServiceListArtifactsWithResponse(ctx context.Context, projectName string, params *CatalogServiceListArtifactsParams, reqEditors ...RequestEditorFn) (*CatalogServiceListArtifactsResponse, error) {
	rsp, err := c.CatalogServiceListArtifacts(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceListArtifactsResponse(rsp)
}

// CatalogServiceCreateArtifactWithBodyWithResponse request with arbitrary body returning *CatalogServiceCreateArtifactResponse
func (c *ClientWithResponses) CatalogServiceCreateArtifactWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateArtifactResponse, error) {
	rsp, err := c.CatalogServiceCreateArtifactWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceCreateArtifactResponse(rsp)
}

func (c *ClientWithResponses) CatalogServiceCreateArtifactWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateArtifactResponse, error) {
	rsp, err := c.CatalogServiceCreateArtifact(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceCreateArtifactResponse(rsp)
}

// CatalogServiceDeleteArtifactWithResponse request returning *CatalogServiceDeleteArtifactResponse
func (c *ClientWithResponses) CatalogServiceDeleteArtifactWithResponse(ctx context.Context, projectName string, artifactName string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteArtifactResponse, error) {
	rsp, err := c.CatalogServiceDeleteArtifact(ctx, projectName, artifactName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceDeleteArtifactResponse(rsp)
}

// CatalogServiceGetArtifactWithResponse request returning *CatalogServiceGetArtifactResponse
func (c *ClientWithResponses) CatalogServiceGetArtifactWithResponse(ctx context.Context, projectName string, artifactName string, reqEditors ...RequestEditorFn) (*CatalogServiceGetArtifactResponse, error) {
	rsp, err := c.CatalogServiceGetArtifact(ctx, projectName, artifactName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceGetArtifactResponse(rsp)
}

// CatalogServiceUpdateArtifactWithBodyWithResponse request with arbitrary body returning *CatalogServiceUpdateArtifactResponse
func (c *ClientWithResponses) CatalogServiceUpdateArtifactWithBodyWithResponse(ctx context.Context, projectName string, artifactName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateArtifactResponse, error) {
	rsp, err := c.CatalogServiceUpdateArtifactWithBody(ctx, projectName, artifactName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceUpdateArtifactResponse(rsp)
}

func (c *ClientWithResponses) CatalogServiceUpdateArtifactWithResponse(ctx context.Context, projectName string, artifactName string, body CatalogServiceUpdateArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateArtifactResponse, error) {
	rsp, err := c.CatalogServiceUpdateArtifact(ctx, projectName, artifactName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceUpdateArtifactResponse(rsp)
}

// CatalogServiceListDeploymentPackagesWithResponse request returning *CatalogServiceListDeploymentPackagesResponse
func (c *ClientWithResponses) CatalogServiceListDeploymentPackagesWithResponse(ctx context.Context, projectName string, params *CatalogServiceListDeploymentPackagesParams, reqEditors ...RequestEditorFn) (*CatalogServiceListDeploymentPackagesResponse, error) {
	rsp, err := c.CatalogServiceListDeploymentPackages(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceListDeploymentPackagesResponse(rsp)
}

// CatalogServiceCreateDeploymentPackageWithBodyWithResponse request with arbitrary body returning *CatalogServiceCreateDeploymentPackageResponse
func (c *ClientWithResponses) CatalogServiceCreateDeploymentPackageWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateDeploymentPackageResponse, error) {
	rsp, err := c.CatalogServiceCreateDeploymentPackageWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceCreateDeploymentPackageResponse(rsp)
}

func (c *ClientWithResponses) CatalogServiceCreateDeploymentPackageWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateDeploymentPackageResponse, error) {
	rsp, err := c.CatalogServiceCreateDeploymentPackage(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceCreateDeploymentPackageResponse(rsp)
}

// CatalogServiceGetDeploymentPackageVersionsWithResponse request returning *CatalogServiceGetDeploymentPackageVersionsResponse
func (c *ClientWithResponses) CatalogServiceGetDeploymentPackageVersionsWithResponse(ctx context.Context, projectName string, deploymentPackageName string, reqEditors ...RequestEditorFn) (*CatalogServiceGetDeploymentPackageVersionsResponse, error) {
	rsp, err := c.CatalogServiceGetDeploymentPackageVersions(ctx, projectName, deploymentPackageName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceGetDeploymentPackageVersionsResponse(rsp)
}

// CatalogServiceDeleteDeploymentPackageWithResponse request returning *CatalogServiceDeleteDeploymentPackageResponse
func (c *ClientWithResponses) CatalogServiceDeleteDeploymentPackageWithResponse(ctx context.Context, projectName string, deploymentPackageName string, version string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteDeploymentPackageResponse, error) {
	rsp, err := c.CatalogServiceDeleteDeploymentPackage(ctx, projectName, deploymentPackageName, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceDeleteDeploymentPackageResponse(rsp)
}

// CatalogServiceGetDeploymentPackageWithResponse request returning *CatalogServiceGetDeploymentPackageResponse
func (c *ClientWithResponses) CatalogServiceGetDeploymentPackageWithResponse(ctx context.Context, projectName string, deploymentPackageName string, version string, reqEditors ...RequestEditorFn) (*CatalogServiceGetDeploymentPackageResponse, error) {
	rsp, err := c.CatalogServiceGetDeploymentPackage(ctx, projectName, deploymentPackageName, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceGetDeploymentPackageResponse(rsp)
}

// CatalogServiceUpdateDeploymentPackageWithBodyWithResponse request with arbitrary body returning *CatalogServiceUpdateDeploymentPackageResponse
func (c *ClientWithResponses) CatalogServiceUpdateDeploymentPackageWithBodyWithResponse(ctx context.Context, projectName string, deploymentPackageName string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateDeploymentPackageResponse, error) {
	rsp, err := c.CatalogServiceUpdateDeploymentPackageWithBody(ctx, projectName, deploymentPackageName, version, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceUpdateDeploymentPackageResponse(rsp)
}

func (c *ClientWithResponses) CatalogServiceUpdateDeploymentPackageWithResponse(ctx context.Context, projectName string, deploymentPackageName string, version string, body CatalogServiceUpdateDeploymentPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateDeploymentPackageResponse, error) {
	rsp, err := c.CatalogServiceUpdateDeploymentPackage(ctx, projectName, deploymentPackageName, version, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceUpdateDeploymentPackageResponse(rsp)
}

// CatalogServiceImportWithResponse request returning *CatalogServiceImportResponse
func (c *ClientWithResponses) CatalogServiceImportWithResponse(ctx context.Context, projectName string, params *CatalogServiceImportParams, reqEditors ...RequestEditorFn) (*CatalogServiceImportResponse, error) {
	rsp, err := c.CatalogServiceImport(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceImportResponse(rsp)
}

// CatalogServiceListRegistriesWithResponse request returning *CatalogServiceListRegistriesResponse
func (c *ClientWithResponses) CatalogServiceListRegistriesWithResponse(ctx context.Context, projectName string, params *CatalogServiceListRegistriesParams, reqEditors ...RequestEditorFn) (*CatalogServiceListRegistriesResponse, error) {
	rsp, err := c.CatalogServiceListRegistries(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceListRegistriesResponse(rsp)
}

// CatalogServiceCreateRegistryWithBodyWithResponse request with arbitrary body returning *CatalogServiceCreateRegistryResponse
func (c *ClientWithResponses) CatalogServiceCreateRegistryWithBodyWithResponse(ctx context.Context, projectName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceCreateRegistryResponse, error) {
	rsp, err := c.CatalogServiceCreateRegistryWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceCreateRegistryResponse(rsp)
}

func (c *ClientWithResponses) CatalogServiceCreateRegistryWithResponse(ctx context.Context, projectName string, body CatalogServiceCreateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceCreateRegistryResponse, error) {
	rsp, err := c.CatalogServiceCreateRegistry(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceCreateRegistryResponse(rsp)
}

// CatalogServiceDeleteRegistryWithResponse request returning *CatalogServiceDeleteRegistryResponse
func (c *ClientWithResponses) CatalogServiceDeleteRegistryWithResponse(ctx context.Context, projectName string, registryName string, reqEditors ...RequestEditorFn) (*CatalogServiceDeleteRegistryResponse, error) {
	rsp, err := c.CatalogServiceDeleteRegistry(ctx, projectName, registryName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceDeleteRegistryResponse(rsp)
}

// CatalogServiceGetRegistryWithResponse request returning *CatalogServiceGetRegistryResponse
func (c *ClientWithResponses) CatalogServiceGetRegistryWithResponse(ctx context.Context, projectName string, registryName string, params *CatalogServiceGetRegistryParams, reqEditors ...RequestEditorFn) (*CatalogServiceGetRegistryResponse, error) {
	rsp, err := c.CatalogServiceGetRegistry(ctx, projectName, registryName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceGetRegistryResponse(rsp)
}

// CatalogServiceUpdateRegistryWithBodyWithResponse request with arbitrary body returning *CatalogServiceUpdateRegistryResponse
func (c *ClientWithResponses) CatalogServiceUpdateRegistryWithBodyWithResponse(ctx context.Context, projectName string, registryName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateRegistryResponse, error) {
	rsp, err := c.CatalogServiceUpdateRegistryWithBody(ctx, projectName, registryName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceUpdateRegistryResponse(rsp)
}

func (c *ClientWithResponses) CatalogServiceUpdateRegistryWithResponse(ctx context.Context, projectName string, registryName string, body CatalogServiceUpdateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUpdateRegistryResponse, error) {
	rsp, err := c.CatalogServiceUpdateRegistry(ctx, projectName, registryName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceUpdateRegistryResponse(rsp)
}

// CatalogServiceUploadCatalogEntitiesWithBodyWithResponse request with arbitrary body returning *CatalogServiceUploadCatalogEntitiesResponse
func (c *ClientWithResponses) CatalogServiceUploadCatalogEntitiesWithBodyWithResponse(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogServiceUploadCatalogEntitiesResponse, error) {
	rsp, err := c.CatalogServiceUploadCatalogEntitiesWithBody(ctx, projectName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceUploadCatalogEntitiesResponse(rsp)
}

func (c *ClientWithResponses) CatalogServiceUploadCatalogEntitiesWithResponse(ctx context.Context, projectName string, params *CatalogServiceUploadCatalogEntitiesParams, body CatalogServiceUploadCatalogEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogServiceUploadCatalogEntitiesResponse, error) {
	rsp, err := c.CatalogServiceUploadCatalogEntities(ctx, projectName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogServiceUploadCatalogEntitiesResponse(rsp)
}

// ParseCatalogServiceListApplicationsResponse parses an HTTP response from a CatalogServiceListApplicationsWithResponse call
func ParseCatalogServiceListApplicationsResponse(rsp *http.Response) (*CatalogServiceListApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceListApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListApplicationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceCreateApplicationResponse parses an HTTP response from a CatalogServiceCreateApplicationWithResponse call
func ParseCatalogServiceCreateApplicationResponse(rsp *http.Response) (*CatalogServiceCreateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceCreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceGetApplicationVersionsResponse parses an HTTP response from a CatalogServiceGetApplicationVersionsWithResponse call
func ParseCatalogServiceGetApplicationVersionsResponse(rsp *http.Response) (*CatalogServiceGetApplicationVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceGetApplicationVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetApplicationVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceDeleteApplicationResponse parses an HTTP response from a CatalogServiceDeleteApplicationWithResponse call
func ParseCatalogServiceDeleteApplicationResponse(rsp *http.Response) (*CatalogServiceDeleteApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceDeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogServiceGetApplicationResponse parses an HTTP response from a CatalogServiceGetApplicationWithResponse call
func ParseCatalogServiceGetApplicationResponse(rsp *http.Response) (*CatalogServiceGetApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceGetApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceUpdateApplicationResponse parses an HTTP response from a CatalogServiceUpdateApplicationWithResponse call
func ParseCatalogServiceUpdateApplicationResponse(rsp *http.Response) (*CatalogServiceUpdateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceUpdateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogServiceGetApplicationReferenceCountResponse parses an HTTP response from a CatalogServiceGetApplicationReferenceCountWithResponse call
func ParseCatalogServiceGetApplicationReferenceCountResponse(rsp *http.Response) (*CatalogServiceGetApplicationReferenceCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceGetApplicationReferenceCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetApplicationReferenceCountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceListArtifactsResponse parses an HTTP response from a CatalogServiceListArtifactsWithResponse call
func ParseCatalogServiceListArtifactsResponse(rsp *http.Response) (*CatalogServiceListArtifactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceListArtifactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListArtifactsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceCreateArtifactResponse parses an HTTP response from a CatalogServiceCreateArtifactWithResponse call
func ParseCatalogServiceCreateArtifactResponse(rsp *http.Response) (*CatalogServiceCreateArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceCreateArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateArtifactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceDeleteArtifactResponse parses an HTTP response from a CatalogServiceDeleteArtifactWithResponse call
func ParseCatalogServiceDeleteArtifactResponse(rsp *http.Response) (*CatalogServiceDeleteArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceDeleteArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogServiceGetArtifactResponse parses an HTTP response from a CatalogServiceGetArtifactWithResponse call
func ParseCatalogServiceGetArtifactResponse(rsp *http.Response) (*CatalogServiceGetArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceGetArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetArtifactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceUpdateArtifactResponse parses an HTTP response from a CatalogServiceUpdateArtifactWithResponse call
func ParseCatalogServiceUpdateArtifactResponse(rsp *http.Response) (*CatalogServiceUpdateArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceUpdateArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogServiceListDeploymentPackagesResponse parses an HTTP response from a CatalogServiceListDeploymentPackagesWithResponse call
func ParseCatalogServiceListDeploymentPackagesResponse(rsp *http.Response) (*CatalogServiceListDeploymentPackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceListDeploymentPackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDeploymentPackagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceCreateDeploymentPackageResponse parses an HTTP response from a CatalogServiceCreateDeploymentPackageWithResponse call
func ParseCatalogServiceCreateDeploymentPackageResponse(rsp *http.Response) (*CatalogServiceCreateDeploymentPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceCreateDeploymentPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateDeploymentPackageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceGetDeploymentPackageVersionsResponse parses an HTTP response from a CatalogServiceGetDeploymentPackageVersionsWithResponse call
func ParseCatalogServiceGetDeploymentPackageVersionsResponse(rsp *http.Response) (*CatalogServiceGetDeploymentPackageVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceGetDeploymentPackageVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDeploymentPackageVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceDeleteDeploymentPackageResponse parses an HTTP response from a CatalogServiceDeleteDeploymentPackageWithResponse call
func ParseCatalogServiceDeleteDeploymentPackageResponse(rsp *http.Response) (*CatalogServiceDeleteDeploymentPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceDeleteDeploymentPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogServiceGetDeploymentPackageResponse parses an HTTP response from a CatalogServiceGetDeploymentPackageWithResponse call
func ParseCatalogServiceGetDeploymentPackageResponse(rsp *http.Response) (*CatalogServiceGetDeploymentPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceGetDeploymentPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDeploymentPackageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceUpdateDeploymentPackageResponse parses an HTTP response from a CatalogServiceUpdateDeploymentPackageWithResponse call
func ParseCatalogServiceUpdateDeploymentPackageResponse(rsp *http.Response) (*CatalogServiceUpdateDeploymentPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceUpdateDeploymentPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogServiceImportResponse parses an HTTP response from a CatalogServiceImportWithResponse call
func ParseCatalogServiceImportResponse(rsp *http.Response) (*CatalogServiceImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceListRegistriesResponse parses an HTTP response from a CatalogServiceListRegistriesWithResponse call
func ParseCatalogServiceListRegistriesResponse(rsp *http.Response) (*CatalogServiceListRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceListRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRegistriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceCreateRegistryResponse parses an HTTP response from a CatalogServiceCreateRegistryWithResponse call
func ParseCatalogServiceCreateRegistryResponse(rsp *http.Response) (*CatalogServiceCreateRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceCreateRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateRegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceDeleteRegistryResponse parses an HTTP response from a CatalogServiceDeleteRegistryWithResponse call
func ParseCatalogServiceDeleteRegistryResponse(rsp *http.Response) (*CatalogServiceDeleteRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceDeleteRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogServiceGetRegistryResponse parses an HTTP response from a CatalogServiceGetRegistryWithResponse call
func ParseCatalogServiceGetRegistryResponse(rsp *http.Response) (*CatalogServiceGetRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceGetRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogServiceUpdateRegistryResponse parses an HTTP response from a CatalogServiceUpdateRegistryWithResponse call
func ParseCatalogServiceUpdateRegistryResponse(rsp *http.Response) (*CatalogServiceUpdateRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceUpdateRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogServiceUploadCatalogEntitiesResponse parses an HTTP response from a CatalogServiceUploadCatalogEntitiesWithResponse call
func ParseCatalogServiceUploadCatalogEntitiesResponse(rsp *http.Response) (*CatalogServiceUploadCatalogEntitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogServiceUploadCatalogEntitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadCatalogEntitiesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
