// Package catalog provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package catalog

import (
	"time"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ApplicationKind.
const (
	ApplicationKindKINDADDON     ApplicationKind = "KIND_ADDON"
	ApplicationKindKINDEXTENSION ApplicationKind = "KIND_EXTENSION"
	ApplicationKindKINDNORMAL    ApplicationKind = "KIND_NORMAL"
)

// Defines values for DeploymentPackageKind.
const (
	DeploymentPackageKindKINDADDON     DeploymentPackageKind = "KIND_ADDON"
	DeploymentPackageKindKINDEXTENSION DeploymentPackageKind = "KIND_EXTENSION"
	DeploymentPackageKindKINDNORMAL    DeploymentPackageKind = "KIND_NORMAL"
)

// Defines values for CatalogServiceListApplicationsParamsKinds.
const (
	CatalogServiceListApplicationsParamsKindsKINDADDON     CatalogServiceListApplicationsParamsKinds = "KIND_ADDON"
	CatalogServiceListApplicationsParamsKindsKINDEXTENSION CatalogServiceListApplicationsParamsKinds = "KIND_EXTENSION"
	CatalogServiceListApplicationsParamsKindsKINDNORMAL    CatalogServiceListApplicationsParamsKinds = "KIND_NORMAL"
)

// Defines values for CatalogServiceListDeploymentPackagesParamsKinds.
const (
	CatalogServiceListDeploymentPackagesParamsKindsKINDADDON     CatalogServiceListDeploymentPackagesParamsKinds = "KIND_ADDON"
	CatalogServiceListDeploymentPackagesParamsKindsKINDEXTENSION CatalogServiceListDeploymentPackagesParamsKinds = "KIND_EXTENSION"
	CatalogServiceListDeploymentPackagesParamsKindsKINDNORMAL    CatalogServiceListDeploymentPackagesParamsKinds = "KIND_NORMAL"
)

// APIExtension APIExtensions represents some form of an extension to the external API provided by deployment package.
type APIExtension struct {
	// Description Description of the API extension. Displayed on user interfaces.
	Description *string `json:"description,omitempty"`

	// DisplayName Display name is an optional human-readable name for the API extension. When specified, it must be unique among all extensions of a given deployment package. It is used for display purposes on user interfaces.
	DisplayName *string `json:"displayName,omitempty"`

	// Endpoints One or more API endpoints provided by the API extension.
	Endpoints *[]Endpoint `json:"endpoints,omitempty"`

	// Name Name is a human-readable unique identifier for the API extension and must be unique for all extensions of a given deployment package.
	Name string `json:"name"`

	// UiExtension UIExtension is an augmentation of an API extension.
	UiExtension *UIExtension `json:"uiExtension,omitempty"`

	// Version Version of the API extension.
	Version string `json:"version"`
}

// Application Application represents a Helm chart that can be deployed to one or more Kubernetes pods.
type Application struct {
	// ChartName Helm chart name.
	ChartName string `json:"chartName"`

	// ChartVersion Helm chart version.
	ChartVersion string `json:"chartVersion"`

	// CreateTime The creation time of the application.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// DefaultProfileName Name of the profile to be used by default when deploying this application. If at least one profile is available, this field must be set.
	DefaultProfileName *string `json:"defaultProfileName,omitempty"`

	// Description Description of the application. Displayed on user interfaces.
	Description *string `json:"description,omitempty"`

	// DisplayName Display name is an optional human-readable name for the application. When specified, it must be unique among all applications within a project. It is used for display purposes on user interfaces.
	DisplayName *string `json:"displayName,omitempty"`

	// HelmRegistryName ID of the project's registry where the Helm chart of the application is available for download.
	HelmRegistryName string `json:"helmRegistryName"`

	// IgnoredResources List of Kubernetes resources that must be ignored during the application deployment.
	IgnoredResources *[]ResourceReference `json:"ignoredResources,omitempty"`

	// ImageRegistryName ID of the project's registry where the Docker image of the application is available for download.
	ImageRegistryName *string `json:"imageRegistryName,omitempty"`

	// Kind Field designating whether the application is a system add-on, system extension, or a normal application.
	Kind *ApplicationKind `json:"kind,omitempty"`

	// Name Name is a human readable unique identifier for the application and must be unique for all applications of a given project. Used in network URIs.
	Name string `json:"name"`

	// Profiles Set of profiles that can be used when deploying the application.
	Profiles *[]Profile `json:"profiles,omitempty"`

	// UpdateTime The last update time of the application.
	UpdateTime *time.Time `json:"updateTime,omitempty"`

	// Version Version of the application. Used in combination with the name to identify a unique application within a project.
	Version string `json:"version"`
}

// ApplicationKind Field designating whether the application is a system add-on, system extension, or a normal application.
type ApplicationKind string

// ApplicationDependency ApplicationDependency represents the dependency of one application on another within the context of a deployment package. This dependency is specified as the name of the application that has the dependency, and the name of the application that is the dependency.
type ApplicationDependency struct {
	// Name Name of the application that has the dependency on the other.
	Name string `json:"name"`

	// Requires Name of the application that is required by the other.
	Requires string `json:"requires"`
}

// ApplicationReference ApplicationReference represents a reference to an application by its name and its version.
type ApplicationReference struct {
	// Name Name of the referenced application.
	Name string `json:"name"`

	// Version Version of the referenced application.
	Version string `json:"version"`
}

// Artifact Artifact represents a binary artifact that can be used for various purposes, e.g. icon or thumbnail for UI display, or auxiliary artifacts for integration with various platform services such as Grafana dashboard and similar. An artifact may be used by multiple deployment packages.
type Artifact struct {
	// Artifact Raw byte content of the artifact encoded as base64. The limits refer to the number of raw bytes.
	Artifact []byte `json:"artifact"`

	// CreateTime The creation time of the artifact.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Description Description of the artifact. Displayed on user interfaces.
	Description *string `json:"description,omitempty"`

	// DisplayName Display name is an optional human-readable name for the artifact. When specified, it must be unique among all artifacts within a project. It is used for display purposes on user interfaces.
	DisplayName *string `json:"displayName,omitempty"`

	// MimeType Artifact's MIME type. Only text/plain, application/json, application/yaml, image/png, and image/jpeg are allowed at this time. MIME types are defined and standardized in IETF's RFC 6838.
	MimeType string `json:"mimeType"`

	// Name Name is a human-readable unique identifier for the artifact and must be unique for all artifacts within a project.
	Name string `json:"name"`

	// UpdateTime The last update time of the artifact.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// ArtifactReference ArtifactReference serves as a reference to an artifact, together with the artifact's purpose within a deployment package.
type ArtifactReference struct {
	// Name Name of the artifact.
	Name string `json:"name"`

	// Purpose Purpose of the artifact, e.g. icon, thumbnail, Grafana dashboard, etc.
	Purpose string `json:"purpose"`
}

// CreateApplicationResponse Response message for the CreateApplication method.
type CreateApplicationResponse struct {
	// Application Application represents a Helm chart that can be deployed to one or more Kubernetes pods.
	Application Application `json:"application"`
}

// CreateArtifactResponse Response message for the CreateArtifact method.
type CreateArtifactResponse struct {
	// Artifact Artifact represents a binary artifact that can be used for various purposes, e.g. icon or thumbnail for UI display, or auxiliary artifacts for integration with various platform services such as Grafana dashboard and similar. An artifact may be used by multiple deployment packages.
	Artifact Artifact `json:"artifact"`
}

// CreateDeploymentPackageResponse Response message for the CreateDeploymentPackage method.
type CreateDeploymentPackageResponse struct {
	// DeploymentPackage DeploymentPackage represents a collection of applications (referenced by their name and a version) that are deployed together. The package can define one or more deployment profiles that specify the individual application profiles to be used when deploying each application. If applications need to be deployed in a particular order, the package can also define any startup dependencies between its constituent applications as a set of dependency graph edges. The deployment package can also refer to a set of artifacts used for miscellaneous purposes, e.g. a thumbnail, icon, or a Grafana extension.
	DeploymentPackage DeploymentPackage `json:"deploymentPackage"`
}

// CreateRegistryResponse Response message for the CreateRegistry method.
type CreateRegistryResponse struct {
	// Registry Registry represents a repository from which various artifacts, such as application Docker\* images or Helm\* charts can be retrieved. As such, the registry entity holds information used for finding and accessing the represented repository.
	Registry Registry `json:"registry"`
}

// DeploymentPackage DeploymentPackage represents a collection of applications (referenced by their name and a version) that are deployed together. The package can define one or more deployment profiles that specify the individual application profiles to be used when deploying each application. If applications need to be deployed in a particular order, the package can also define any startup dependencies between its constituent applications as a set of dependency graph edges. The deployment package can also refer to a set of artifacts used for miscellaneous purposes, e.g. a thumbnail, icon, or a Grafana extension.
type DeploymentPackage struct {
	// ApplicationDependencies Optional set of application deployment dependencies, expressed as (name, requires) pairs of edges in the deployment order dependency graph.
	ApplicationDependencies *[]ApplicationDependency `json:"applicationDependencies,omitempty"`

	// ApplicationReferences List of applications comprising this deployment package. Expressed as (name, version) pairs.
	ApplicationReferences []ApplicationReference `json:"applicationReferences"`

	// Artifacts Optional list of artifacts required for displaying or deploying this package. For example, icon or thumbnail artifacts can be used by the UI; Grafana\* dashboard definitions can be used by the deployment manager.
	Artifacts []ArtifactReference `json:"artifacts"`

	// CreateTime The creation time of the deployment package.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// DefaultNamespaces Optional map of application-to-namespace bindings to be used as a default when deploying the applications that comprise the package. If a namespace is not defined in the set of "namespaces" in this Deployment Package, it will be inferred that it is a simple namespace with no predefined labels or annotations.
	DefaultNamespaces *map[string]string `json:"defaultNamespaces,omitempty"`

	// DefaultProfileName Name of the default deployment profile to be used by default when deploying this package.
	DefaultProfileName *string `json:"defaultProfileName,omitempty"`

	// Description Description of the deployment package. Displayed on user interfaces.
	Description *string `json:"description,omitempty"`

	// DisplayName Display name is an optional human-readable name for the deployment package. When specified, it must be unique among all packages within a project. It is used for display purposes on user interfaces.
	DisplayName *string `json:"displayName,omitempty"`

	// Extensions Optional list of API and UI extensions.
	Extensions []APIExtension `json:"extensions"`

	// ForbidsMultipleDeployments Optional flag indicating whether multiple deployments of this package are forbidden within the same realm.
	ForbidsMultipleDeployments *bool `json:"forbidsMultipleDeployments,omitempty"`

	// IsDeployed Flag indicating whether the deployment package has been deployed. The mutability of the deployment package entity can be limited when this flag is true. For example, one may not be able to update when an application is removed from a package after it has been marked as deployed.
	IsDeployed *bool `json:"isDeployed,omitempty"`

	// IsVisible Flag indicating whether the deployment package is visible in the UI. Some deployment packages can be classified as auxiliary platform extensions and therefore are to be deployed indirectly only when specified as deployment requirements, rather than directly by the platform operator.
	IsVisible *bool `json:"isVisible,omitempty"`

	// Kind Field designating whether the deployment package is a system add-on, system extension, or a normal package.
	Kind *DeploymentPackageKind `json:"kind,omitempty"`

	// Name Name is a human-readable unique identifier for the deployment package and must be unique for all packages of a given project.
	Name string `json:"name"`

	// Namespaces Namespace definitions to be created before resources are deployed. This allows complex namespaces to be defined with predefined labels and annotations. If not defined, simple namespaces will be created as needed.
	Namespaces *[]Namespace `json:"namespaces,omitempty"`

	// Profiles Set of deployment profiles to choose from when deploying this package.
	Profiles *[]DeploymentProfile `json:"profiles,omitempty"`

	// UpdateTime The last update time of the deployment package.
	UpdateTime *time.Time `json:"updateTime,omitempty"`

	// Version Version of the deployment package.
	Version string `json:"version"`
}

// DeploymentPackageKind Field designating whether the deployment package is a system add-on, system extension, or a normal package.
type DeploymentPackageKind string

// DeploymentProfile DeploymentProfile specifies which application profiles will be used for deployment of which applications.
type DeploymentProfile struct {
	// ApplicationProfiles Application profiles map application names to the names of its profile, to be used when deploying the application as part of the deployment package together with the deployment profile.
	ApplicationProfiles map[string]string `json:"applicationProfiles"`

	// CreateTime The creation time of the deployment profile.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Description Description of the deployment profile. Displayed on user interfaces.
	Description *string `json:"description,omitempty"`

	// DisplayName Display name is an optional human-readable name for the registry. When specified, it must be unique among all profiles of a given package. It is used for display purposes on user interfaces.
	DisplayName *string `json:"displayName,omitempty"`

	// Name Name is a human-readable unique identifier for the profile and must be unique for all profiles of a given deployment package.
	Name string `json:"name"`

	// UpdateTime The last update time of the deployment profile.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// DeploymentRequirement DeploymentRequirement is a reference to the deployment package that must be deployed first, as a requirement for an application to be deployed.
type DeploymentRequirement struct {
	// DeploymentProfileName Optional name of the deployment profile to be used. When not provided, the default deployment profile will be used.
	DeploymentProfileName *string `json:"deploymentProfileName,omitempty"`

	// Name Name of the required deployment package.
	Name string `json:"name"`

	// Version Version of the required deployment package.
	Version string `json:"version"`
}

// Endpoint Endpoint represents an application service endpoint.
type Endpoint struct {
	// AppName The name of the application providing this endpoint.
	AppName *string `json:"appName,omitempty"`

	// AuthType Authentication type expected by the endpoint.
	AuthType string `json:"authType"`

	// ExternalPath Externally accessible path to the endpoint.
	ExternalPath string `json:"externalPath"`

	// InternalPath Internally accessible path to the endpoint.
	InternalPath string `json:"internalPath"`

	// Scheme Protocol scheme provided by the endpoint.
	Scheme string `json:"scheme"`

	// ServiceName The name of the service hosted by the endpoint.
	ServiceName string `json:"serviceName"`
}

// GetApplicationReferenceCountResponse Response message for the GetApplicationReferenceCount method.
type GetApplicationReferenceCountResponse struct {
	ReferenceCount uint32 `json:"referenceCount"`
}

// GetApplicationResponse Response message for the GetApplication method.
type GetApplicationResponse struct {
	// Application Application represents a Helm chart that can be deployed to one or more Kubernetes pods.
	Application Application `json:"application"`
}

// GetApplicationVersionsResponse Response message for the GetApplication method.
type GetApplicationVersionsResponse struct {
	// Application A list of applications with the same project and name.
	Application []Application `json:"application"`
}

// GetArtifactResponse Response message for the GetArtifact method.
type GetArtifactResponse struct {
	// Artifact Artifact represents a binary artifact that can be used for various purposes, e.g. icon or thumbnail for UI display, or auxiliary artifacts for integration with various platform services such as Grafana dashboard and similar. An artifact may be used by multiple deployment packages.
	Artifact Artifact `json:"artifact"`
}

// GetDeploymentPackageResponse Response message for the GetDeploymentPackage method.
type GetDeploymentPackageResponse struct {
	// DeploymentPackage DeploymentPackage represents a collection of applications (referenced by their name and a version) that are deployed together. The package can define one or more deployment profiles that specify the individual application profiles to be used when deploying each application. If applications need to be deployed in a particular order, the package can also define any startup dependencies between its constituent applications as a set of dependency graph edges. The deployment package can also refer to a set of artifacts used for miscellaneous purposes, e.g. a thumbnail, icon, or a Grafana extension.
	DeploymentPackage DeploymentPackage `json:"deploymentPackage"`
}

// GetDeploymentPackageVersionsResponse Response message for the GetDeploymentPackageVersions method.
type GetDeploymentPackageVersionsResponse struct {
	// DeploymentPackages A list of DeploymentPackages with the same project and name.
	DeploymentPackages []DeploymentPackage `json:"deploymentPackages"`
}

// GetRegistryResponse Response message for the GetRegistry method.
type GetRegistryResponse struct {
	// Registry Registry represents a repository from which various artifacts, such as application Docker\* images or Helm\* charts can be retrieved. As such, the registry entity holds information used for finding and accessing the represented repository.
	Registry Registry `json:"registry"`
}

// ListApplicationsResponse Response message for the ListApplications method.
type ListApplicationsResponse struct {
	// Applications A list of applications.
	Applications []Application `json:"applications"`

	// TotalElements Count of items in the entire list, regardless of pagination.
	TotalElements int32 `json:"totalElements"`
}

// ListArtifactsResponse Response message for the ListArtifacts method.
type ListArtifactsResponse struct {
	// Artifacts A list of artifacts.
	Artifacts []Artifact `json:"artifacts"`

	// TotalElements Count of items in the entire list, regardless of pagination.
	TotalElements int32 `json:"totalElements"`
}

// ListDeploymentPackagesResponse Response message for the ListDeploymentPackages method.
type ListDeploymentPackagesResponse struct {
	// DeploymentPackages A list of DeploymentPackages.
	DeploymentPackages []DeploymentPackage `json:"deploymentPackages"`

	// TotalElements Count of items in the entire list, regardless of pagination.
	TotalElements int32 `json:"totalElements"`
}

// ListRegistriesResponse Response message for the ListRegistries method.
type ListRegistriesResponse struct {
	// Registries A list of registries.
	Registries []Registry `json:"registries"`

	// TotalElements Count of items in the entire list, regardless of pagination.
	TotalElements int32 `json:"totalElements"`
}

// Namespace Namespace represents a complex namespace definition with predefined labels and annotations. They are created before any other resources in the deployment.
type Namespace struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	Labels      *map[string]string `json:"labels,omitempty"`

	// Name namespace names must be valid RFC 1123 DNS labels. Avoid creating namespaces with the prefix `kube-`, since it is reserved for Kubernetes\* system namespaces. Avoid `default` - will already exist
	Name string `json:"name"`
}

// ParameterTemplate ParameterTemplate describes override values for Helm chart values
type ParameterTemplate struct {
	// Default Default value for the parameter.
	Default *string `json:"default,omitempty"`

	// DisplayName Display name is an optional human-readable name for the template. It is used for display purposes on user interfaces.
	DisplayName *string `json:"displayName,omitempty"`

	// Mandatory Optional mandatory flag for the parameter.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name Human-readable name for the parameter template.
	Name string `json:"name"`

	// Secret Optional secret flag for the parameter.
	Secret *bool `json:"secret,omitempty"`

	// SuggestedValues List of suggested values to use, to override the default value.
	SuggestedValues *[]string `json:"suggestedValues,omitempty"`

	// Type Type of parameter: string, number, or boolean.
	Type string `json:"type"`

	// Validator Optional validator for the parameter. Usage TBD.
	Validator *string `json:"validator,omitempty"`
}

// Profile Profile is a set of configuration values for customizing application deployment.
type Profile struct {
	// ChartValues Raw byte value containing the chart values as raw YAML bytes.
	ChartValues *string `json:"chartValues,omitempty"`

	// CreateTime The creation time of the profile.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// DeploymentRequirement List of deployment requirements for this profile.
	DeploymentRequirement *[]DeploymentRequirement `json:"deploymentRequirement,omitempty"`

	// Description Description of the profile. Displayed on user interfaces.
	Description *string `json:"description,omitempty"`

	// DisplayName Display name is an optional human-readable name for the profile. When specified, it must be unique among all profiles of a given application. It is used for display purposes on user interfaces.
	DisplayName *string `json:"displayName,omitempty"`

	// Name Human-readable name for the profile. Unique among all profiles of the same application.
	Name string `json:"name"`

	// ParameterTemplates Parameter templates available for this profile.
	ParameterTemplates *[]ParameterTemplate `json:"parameterTemplates,omitempty"`

	// UpdateTime The last update time of the profile.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// Registry Registry represents a repository from which various artifacts, such as application Docker\* images or Helm\* charts can be retrieved. As such, the registry entity holds information used for finding and accessing the represented repository.
type Registry struct {
	// ApiType Optional type of the API used to obtain inventory of the articles hosted by the registry.
	ApiType *string `json:"apiType,omitempty"`

	// AuthToken Optional authentication token or password for accessing the registry.
	AuthToken *string `json:"authToken,omitempty"`

	// Cacerts Optional CA certificates for accessing the registry using secure channels, such as HTTPS.
	Cacerts *string `json:"cacerts,omitempty"`

	// CreateTime The creation time of the registry.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Description Description of the registry. Displayed on user interfaces.
	Description *string `json:"description,omitempty"`

	// DisplayName Display name is an optional human-readable name for the registry. When specified, it must be unique among all registries within a project. It is used for display purposes on user interfaces.
	DisplayName *string `json:"displayName,omitempty"`

	// InventoryUrl Optional URL of the API for accessing inventory of artifacts hosted by the registry.
	InventoryUrl *string `json:"inventoryUrl,omitempty"`

	// Name Name is a human-readable unique identifier for the registry and must be unique for all registries of a given project.
	Name string `json:"name"`

	// RootUrl Root URL for retrieving artifacts, e.g. Docker images and Helm charts, from the registry.
	RootUrl string `json:"rootUrl"`

	// Type Type indicates whether the registry holds Docker images or Helm charts; defaults to Helm charts.
	Type string `json:"type"`

	// UpdateTime The last update time of the registry.
	UpdateTime *time.Time `json:"updateTime,omitempty"`

	// Username Optional username for accessing the registry.
	Username *string `json:"username,omitempty"`
}

// ResourceReference ResourceReference represents a Kubernetes resource identifier.
type ResourceReference struct {
	// Kind Kubernetes resource kind, e.g. ConfigMap.
	Kind string `json:"kind"`

	// Name Kubernetes resource name.
	Name string `json:"name"`

	// Namespace Kubernetes namespace where the ignored resource resides. When empty, the application namespace will be used.
	Namespace *string `json:"namespace,omitempty"`
}

// UIExtension UIExtension is an augmentation of an API extension.
type UIExtension struct {
	// AppName The name of the application corresponding to this UI extension.
	AppName string `json:"appName"`

	// Description Description of the API extension, used on the main UI dashboard.
	Description string `json:"description"`

	// FileName The name of the main file to load this specific UI extension.
	FileName string `json:"fileName"`

	// Label Label is a human readable text used for display in the main UI dashboard
	Label string `json:"label"`

	// ModuleName Name of the application module to be loaded.
	ModuleName string `json:"moduleName"`

	// ServiceName The name of the API extension endpoint.
	ServiceName string `json:"serviceName"`
}

// Upload Upload represents a single file-upload record.
type Upload struct {
	// Artifact Raw bytes content of the file being uploaded.
	Artifact []byte `json:"artifact"`

	// FileName Name of the file being uploaded.
	FileName string `json:"fileName"`
}

// UploadCatalogEntitiesResponse Response message for the UploadCatalogItems method
type UploadCatalogEntitiesResponse struct {
	// ErrorMessages Any error messages encountered either during YAML parsing or entity creation or update.
	ErrorMessages *[]string `json:"errorMessages,omitempty"`

	// SessionId Session ID, generated by the server after the first upload request has been processed.
	SessionId string `json:"sessionId"`

	// UploadNumber Deprecated: Next expected upload number or total number of uploads on the last upload request.
	UploadNumber uint32 `json:"uploadNumber"`
}

// CatalogServiceListApplicationsParams defines parameters for CatalogServiceListApplications.
type CatalogServiceListApplicationsParams struct {
	// OrderBy Names the field to be used for ordering the returned results.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Filter Expression to use for filtering the results.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageSize Maximum number of items to return.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Index of the first item to return.
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Kinds List of application kinds to be returned; empty list means all kinds.
	Kinds *[]CatalogServiceListApplicationsParamsKinds `form:"kinds,omitempty" json:"kinds,omitempty"`
}

// CatalogServiceListApplicationsParamsKinds defines parameters for CatalogServiceListApplications.
type CatalogServiceListApplicationsParamsKinds string

// CatalogServiceListArtifactsParams defines parameters for CatalogServiceListArtifacts.
type CatalogServiceListArtifactsParams struct {
	// OrderBy Names the field to be used for ordering the returned results.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Filter Expression to use for filtering the results.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageSize Maximum number of items to return.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Index of the first item to return.
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CatalogServiceListDeploymentPackagesParams defines parameters for CatalogServiceListDeploymentPackages.
type CatalogServiceListDeploymentPackagesParams struct {
	// OrderBy Names the field to be used for ordering the returned results.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Filter Expression to use for filtering the results.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageSize Maximum number of items to return.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Index of the first item to return.
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Kinds List of deployment package kinds to be returned; empty list means all kinds.
	Kinds *[]CatalogServiceListDeploymentPackagesParamsKinds `form:"kinds,omitempty" json:"kinds,omitempty"`
}

// CatalogServiceListDeploymentPackagesParamsKinds defines parameters for CatalogServiceListDeploymentPackages.
type CatalogServiceListDeploymentPackagesParamsKinds string

// CatalogServiceListRegistriesParams defines parameters for CatalogServiceListRegistries.
type CatalogServiceListRegistriesParams struct {
	// OrderBy Names the field to be used for ordering the returned results.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Filter Expression to use for filtering the results.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageSize Maximum number of items to return.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Index of the first item to return.
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// ShowSensitiveInfo Request that sensitive information, such as username, auth_token, and CA certificates are included in the response.
	ShowSensitiveInfo *bool `form:"showSensitiveInfo,omitempty" json:"showSensitiveInfo,omitempty"`
}

// CatalogServiceGetRegistryParams defines parameters for CatalogServiceGetRegistry.
type CatalogServiceGetRegistryParams struct {
	// ShowSensitiveInfo Request that sensitive information, such as username, auth_token, and CA certificates are included in the response.
	ShowSensitiveInfo *bool `form:"showSensitiveInfo,omitempty" json:"showSensitiveInfo,omitempty"`
}

// CatalogServiceUploadCatalogEntitiesParams defines parameters for CatalogServiceUploadCatalogEntities.
type CatalogServiceUploadCatalogEntitiesParams struct {
	// SessionId First upload request in the batch must not specify session ID. Subsequent upload requests must copy the session ID from the previously issued response.
	SessionId *string `form:"sessionId,omitempty" json:"sessionId,omitempty"`

	// UploadNumber Deprecated: Upload number must increase sequentially, starting with 1.
	UploadNumber *uint32 `form:"uploadNumber,omitempty" json:"uploadNumber,omitempty"`

	// LastUpload Must be set to 'true' to perform load of all entity files uploaded as part of this session.
	LastUpload *bool `form:"lastUpload,omitempty" json:"lastUpload,omitempty"`
}

// CatalogServiceCreateApplicationJSONRequestBody defines body for CatalogServiceCreateApplication for application/json ContentType.
type CatalogServiceCreateApplicationJSONRequestBody = Application

// CatalogServiceUpdateApplicationJSONRequestBody defines body for CatalogServiceUpdateApplication for application/json ContentType.
type CatalogServiceUpdateApplicationJSONRequestBody = Application

// CatalogServiceCreateArtifactJSONRequestBody defines body for CatalogServiceCreateArtifact for application/json ContentType.
type CatalogServiceCreateArtifactJSONRequestBody = Artifact

// CatalogServiceUpdateArtifactJSONRequestBody defines body for CatalogServiceUpdateArtifact for application/json ContentType.
type CatalogServiceUpdateArtifactJSONRequestBody = Artifact

// CatalogServiceCreateDeploymentPackageJSONRequestBody defines body for CatalogServiceCreateDeploymentPackage for application/json ContentType.
type CatalogServiceCreateDeploymentPackageJSONRequestBody = DeploymentPackage

// CatalogServiceUpdateDeploymentPackageJSONRequestBody defines body for CatalogServiceUpdateDeploymentPackage for application/json ContentType.
type CatalogServiceUpdateDeploymentPackageJSONRequestBody = DeploymentPackage

// CatalogServiceCreateRegistryJSONRequestBody defines body for CatalogServiceCreateRegistry for application/json ContentType.
type CatalogServiceCreateRegistryJSONRequestBody = Registry

// CatalogServiceUpdateRegistryJSONRequestBody defines body for CatalogServiceUpdateRegistry for application/json ContentType.
type CatalogServiceUpdateRegistryJSONRequestBody = Registry

// CatalogServiceUploadCatalogEntitiesJSONRequestBody defines body for CatalogServiceUploadCatalogEntities for application/json ContentType.
type CatalogServiceUploadCatalogEntitiesJSONRequestBody = Upload
