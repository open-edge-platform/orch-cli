// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rest/cluster/client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/rest/cluster/client.go -destination=pkg/rest/cluster/mock_client.go -package=cluster
//

// Package cluster is a generated GoMock package.
package cluster

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// DeleteV2ProjectsProjectNameClustersName mocks base method.
func (m *MockClientInterface) DeleteV2ProjectsProjectNameClustersName(ctx context.Context, projectName, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteV2ProjectsProjectNameClustersName", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteV2ProjectsProjectNameClustersName indicates an expected call of DeleteV2ProjectsProjectNameClustersName.
func (mr *MockClientInterfaceMockRecorder) DeleteV2ProjectsProjectNameClustersName(ctx, projectName, name any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV2ProjectsProjectNameClustersName", reflect.TypeOf((*MockClientInterface)(nil).DeleteV2ProjectsProjectNameClustersName), varargs...)
}

// DeleteV2ProjectsProjectNameClustersNameNodesNodeId mocks base method.
func (m *MockClientInterface) DeleteV2ProjectsProjectNameClustersNameNodesNodeId(ctx context.Context, projectName, name, nodeId string, params *DeleteV2ProjectsProjectNameClustersNameNodesNodeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, nodeId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteV2ProjectsProjectNameClustersNameNodesNodeId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteV2ProjectsProjectNameClustersNameNodesNodeId indicates an expected call of DeleteV2ProjectsProjectNameClustersNameNodesNodeId.
func (mr *MockClientInterfaceMockRecorder) DeleteV2ProjectsProjectNameClustersNameNodesNodeId(ctx, projectName, name, nodeId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, nodeId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV2ProjectsProjectNameClustersNameNodesNodeId", reflect.TypeOf((*MockClientInterface)(nil).DeleteV2ProjectsProjectNameClustersNameNodesNodeId), varargs...)
}

// DeleteV2ProjectsProjectNameTemplatesNameVersionsVersion mocks base method.
func (m *MockClientInterface) DeleteV2ProjectsProjectNameTemplatesNameVersionsVersion(ctx context.Context, projectName, name, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteV2ProjectsProjectNameTemplatesNameVersionsVersion", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteV2ProjectsProjectNameTemplatesNameVersionsVersion indicates an expected call of DeleteV2ProjectsProjectNameTemplatesNameVersionsVersion.
func (mr *MockClientInterfaceMockRecorder) DeleteV2ProjectsProjectNameTemplatesNameVersionsVersion(ctx, projectName, name, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV2ProjectsProjectNameTemplatesNameVersionsVersion", reflect.TypeOf((*MockClientInterface)(nil).DeleteV2ProjectsProjectNameTemplatesNameVersionsVersion), varargs...)
}

// GetV2ProjectsProjectNameClusters mocks base method.
func (m *MockClientInterface) GetV2ProjectsProjectNameClusters(ctx context.Context, projectName string, params *GetV2ProjectsProjectNameClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameClusters", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameClusters indicates an expected call of GetV2ProjectsProjectNameClusters.
func (mr *MockClientInterfaceMockRecorder) GetV2ProjectsProjectNameClusters(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameClusters", reflect.TypeOf((*MockClientInterface)(nil).GetV2ProjectsProjectNameClusters), varargs...)
}

// GetV2ProjectsProjectNameClustersName mocks base method.
func (m *MockClientInterface) GetV2ProjectsProjectNameClustersName(ctx context.Context, projectName, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameClustersName", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameClustersName indicates an expected call of GetV2ProjectsProjectNameClustersName.
func (mr *MockClientInterfaceMockRecorder) GetV2ProjectsProjectNameClustersName(ctx, projectName, name any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameClustersName", reflect.TypeOf((*MockClientInterface)(nil).GetV2ProjectsProjectNameClustersName), varargs...)
}

// GetV2ProjectsProjectNameClustersNameKubeconfigs mocks base method.
func (m *MockClientInterface) GetV2ProjectsProjectNameClustersNameKubeconfigs(ctx context.Context, projectName, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameClustersNameKubeconfigs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameClustersNameKubeconfigs indicates an expected call of GetV2ProjectsProjectNameClustersNameKubeconfigs.
func (mr *MockClientInterfaceMockRecorder) GetV2ProjectsProjectNameClustersNameKubeconfigs(ctx, projectName, name any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameClustersNameKubeconfigs", reflect.TypeOf((*MockClientInterface)(nil).GetV2ProjectsProjectNameClustersNameKubeconfigs), varargs...)
}

// GetV2ProjectsProjectNameClustersNodeIdClusterdetail mocks base method.
func (m *MockClientInterface) GetV2ProjectsProjectNameClustersNodeIdClusterdetail(ctx context.Context, projectName, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, nodeId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameClustersNodeIdClusterdetail", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameClustersNodeIdClusterdetail indicates an expected call of GetV2ProjectsProjectNameClustersNodeIdClusterdetail.
func (mr *MockClientInterfaceMockRecorder) GetV2ProjectsProjectNameClustersNodeIdClusterdetail(ctx, projectName, nodeId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, nodeId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameClustersNodeIdClusterdetail", reflect.TypeOf((*MockClientInterface)(nil).GetV2ProjectsProjectNameClustersNodeIdClusterdetail), varargs...)
}

// GetV2ProjectsProjectNameClustersSummary mocks base method.
func (m *MockClientInterface) GetV2ProjectsProjectNameClustersSummary(ctx context.Context, projectName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameClustersSummary", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameClustersSummary indicates an expected call of GetV2ProjectsProjectNameClustersSummary.
func (mr *MockClientInterfaceMockRecorder) GetV2ProjectsProjectNameClustersSummary(ctx, projectName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameClustersSummary", reflect.TypeOf((*MockClientInterface)(nil).GetV2ProjectsProjectNameClustersSummary), varargs...)
}

// GetV2ProjectsProjectNameTemplates mocks base method.
func (m *MockClientInterface) GetV2ProjectsProjectNameTemplates(ctx context.Context, projectName string, params *GetV2ProjectsProjectNameTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameTemplates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameTemplates indicates an expected call of GetV2ProjectsProjectNameTemplates.
func (mr *MockClientInterfaceMockRecorder) GetV2ProjectsProjectNameTemplates(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameTemplates", reflect.TypeOf((*MockClientInterface)(nil).GetV2ProjectsProjectNameTemplates), varargs...)
}

// GetV2ProjectsProjectNameTemplatesNameVersions mocks base method.
func (m *MockClientInterface) GetV2ProjectsProjectNameTemplatesNameVersions(ctx context.Context, projectName, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameTemplatesNameVersions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameTemplatesNameVersions indicates an expected call of GetV2ProjectsProjectNameTemplatesNameVersions.
func (mr *MockClientInterfaceMockRecorder) GetV2ProjectsProjectNameTemplatesNameVersions(ctx, projectName, name any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameTemplatesNameVersions", reflect.TypeOf((*MockClientInterface)(nil).GetV2ProjectsProjectNameTemplatesNameVersions), varargs...)
}

// GetV2ProjectsProjectNameTemplatesNameVersionsVersion mocks base method.
func (m *MockClientInterface) GetV2ProjectsProjectNameTemplatesNameVersionsVersion(ctx context.Context, projectName, name, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameTemplatesNameVersionsVersion", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameTemplatesNameVersionsVersion indicates an expected call of GetV2ProjectsProjectNameTemplatesNameVersionsVersion.
func (mr *MockClientInterfaceMockRecorder) GetV2ProjectsProjectNameTemplatesNameVersionsVersion(ctx, projectName, name, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameTemplatesNameVersionsVersion", reflect.TypeOf((*MockClientInterface)(nil).GetV2ProjectsProjectNameTemplatesNameVersionsVersion), varargs...)
}

// PostV2ProjectsProjectNameClusters mocks base method.
func (m *MockClientInterface) PostV2ProjectsProjectNameClusters(ctx context.Context, projectName string, body PostV2ProjectsProjectNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV2ProjectsProjectNameClusters", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV2ProjectsProjectNameClusters indicates an expected call of PostV2ProjectsProjectNameClusters.
func (mr *MockClientInterfaceMockRecorder) PostV2ProjectsProjectNameClusters(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV2ProjectsProjectNameClusters", reflect.TypeOf((*MockClientInterface)(nil).PostV2ProjectsProjectNameClusters), varargs...)
}

// PostV2ProjectsProjectNameClustersWithBody mocks base method.
func (m *MockClientInterface) PostV2ProjectsProjectNameClustersWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV2ProjectsProjectNameClustersWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV2ProjectsProjectNameClustersWithBody indicates an expected call of PostV2ProjectsProjectNameClustersWithBody.
func (mr *MockClientInterfaceMockRecorder) PostV2ProjectsProjectNameClustersWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV2ProjectsProjectNameClustersWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostV2ProjectsProjectNameClustersWithBody), varargs...)
}

// PostV2ProjectsProjectNameTemplates mocks base method.
func (m *MockClientInterface) PostV2ProjectsProjectNameTemplates(ctx context.Context, projectName string, body PostV2ProjectsProjectNameTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV2ProjectsProjectNameTemplates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV2ProjectsProjectNameTemplates indicates an expected call of PostV2ProjectsProjectNameTemplates.
func (mr *MockClientInterfaceMockRecorder) PostV2ProjectsProjectNameTemplates(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV2ProjectsProjectNameTemplates", reflect.TypeOf((*MockClientInterface)(nil).PostV2ProjectsProjectNameTemplates), varargs...)
}

// PostV2ProjectsProjectNameTemplatesWithBody mocks base method.
func (m *MockClientInterface) PostV2ProjectsProjectNameTemplatesWithBody(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV2ProjectsProjectNameTemplatesWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV2ProjectsProjectNameTemplatesWithBody indicates an expected call of PostV2ProjectsProjectNameTemplatesWithBody.
func (mr *MockClientInterfaceMockRecorder) PostV2ProjectsProjectNameTemplatesWithBody(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV2ProjectsProjectNameTemplatesWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostV2ProjectsProjectNameTemplatesWithBody), varargs...)
}

// PutV2ProjectsProjectNameClustersNameLabels mocks base method.
func (m *MockClientInterface) PutV2ProjectsProjectNameClustersNameLabels(ctx context.Context, projectName, name string, body PutV2ProjectsProjectNameClustersNameLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameLabels", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameLabels indicates an expected call of PutV2ProjectsProjectNameClustersNameLabels.
func (mr *MockClientInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameLabels(ctx, projectName, name, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameLabels", reflect.TypeOf((*MockClientInterface)(nil).PutV2ProjectsProjectNameClustersNameLabels), varargs...)
}

// PutV2ProjectsProjectNameClustersNameLabelsWithBody mocks base method.
func (m *MockClientInterface) PutV2ProjectsProjectNameClustersNameLabelsWithBody(ctx context.Context, projectName, name, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameLabelsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameLabelsWithBody indicates an expected call of PutV2ProjectsProjectNameClustersNameLabelsWithBody.
func (mr *MockClientInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameLabelsWithBody(ctx, projectName, name, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameLabelsWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutV2ProjectsProjectNameClustersNameLabelsWithBody), varargs...)
}

// PutV2ProjectsProjectNameClustersNameNodes mocks base method.
func (m *MockClientInterface) PutV2ProjectsProjectNameClustersNameNodes(ctx context.Context, projectName, name string, body PutV2ProjectsProjectNameClustersNameNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameNodes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameNodes indicates an expected call of PutV2ProjectsProjectNameClustersNameNodes.
func (mr *MockClientInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameNodes(ctx, projectName, name, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameNodes", reflect.TypeOf((*MockClientInterface)(nil).PutV2ProjectsProjectNameClustersNameNodes), varargs...)
}

// PutV2ProjectsProjectNameClustersNameNodesWithBody mocks base method.
func (m *MockClientInterface) PutV2ProjectsProjectNameClustersNameNodesWithBody(ctx context.Context, projectName, name, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameNodesWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameNodesWithBody indicates an expected call of PutV2ProjectsProjectNameClustersNameNodesWithBody.
func (mr *MockClientInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameNodesWithBody(ctx, projectName, name, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameNodesWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutV2ProjectsProjectNameClustersNameNodesWithBody), varargs...)
}

// PutV2ProjectsProjectNameClustersNameTemplate mocks base method.
func (m *MockClientInterface) PutV2ProjectsProjectNameClustersNameTemplate(ctx context.Context, projectName, name string, body PutV2ProjectsProjectNameClustersNameTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameTemplate indicates an expected call of PutV2ProjectsProjectNameClustersNameTemplate.
func (mr *MockClientInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameTemplate(ctx, projectName, name, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameTemplate", reflect.TypeOf((*MockClientInterface)(nil).PutV2ProjectsProjectNameClustersNameTemplate), varargs...)
}

// PutV2ProjectsProjectNameClustersNameTemplateWithBody mocks base method.
func (m *MockClientInterface) PutV2ProjectsProjectNameClustersNameTemplateWithBody(ctx context.Context, projectName, name, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameTemplateWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameTemplateWithBody indicates an expected call of PutV2ProjectsProjectNameClustersNameTemplateWithBody.
func (mr *MockClientInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameTemplateWithBody(ctx, projectName, name, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameTemplateWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutV2ProjectsProjectNameClustersNameTemplateWithBody), varargs...)
}

// PutV2ProjectsProjectNameTemplatesNameDefault mocks base method.
func (m *MockClientInterface) PutV2ProjectsProjectNameTemplatesNameDefault(ctx context.Context, projectName, name string, body PutV2ProjectsProjectNameTemplatesNameDefaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameTemplatesNameDefault", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameTemplatesNameDefault indicates an expected call of PutV2ProjectsProjectNameTemplatesNameDefault.
func (mr *MockClientInterfaceMockRecorder) PutV2ProjectsProjectNameTemplatesNameDefault(ctx, projectName, name, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameTemplatesNameDefault", reflect.TypeOf((*MockClientInterface)(nil).PutV2ProjectsProjectNameTemplatesNameDefault), varargs...)
}

// PutV2ProjectsProjectNameTemplatesNameDefaultWithBody mocks base method.
func (m *MockClientInterface) PutV2ProjectsProjectNameTemplatesNameDefaultWithBody(ctx context.Context, projectName, name, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameTemplatesNameDefaultWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameTemplatesNameDefaultWithBody indicates an expected call of PutV2ProjectsProjectNameTemplatesNameDefaultWithBody.
func (mr *MockClientInterfaceMockRecorder) PutV2ProjectsProjectNameTemplatesNameDefaultWithBody(ctx, projectName, name, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameTemplatesNameDefaultWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutV2ProjectsProjectNameTemplatesNameDefaultWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// DeleteV2ProjectsProjectNameClustersNameNodesNodeIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteV2ProjectsProjectNameClustersNameNodesNodeIdWithResponse(ctx context.Context, projectName, name, nodeId string, params *DeleteV2ProjectsProjectNameClustersNameNodesNodeIdParams, reqEditors ...RequestEditorFn) (*DeleteV2ProjectsProjectNameClustersNameNodesNodeIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, nodeId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteV2ProjectsProjectNameClustersNameNodesNodeIdWithResponse", varargs...)
	ret0, _ := ret[0].(*DeleteV2ProjectsProjectNameClustersNameNodesNodeIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteV2ProjectsProjectNameClustersNameNodesNodeIdWithResponse indicates an expected call of DeleteV2ProjectsProjectNameClustersNameNodesNodeIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteV2ProjectsProjectNameClustersNameNodesNodeIdWithResponse(ctx, projectName, name, nodeId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, nodeId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV2ProjectsProjectNameClustersNameNodesNodeIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteV2ProjectsProjectNameClustersNameNodesNodeIdWithResponse), varargs...)
}

// DeleteV2ProjectsProjectNameClustersNameWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteV2ProjectsProjectNameClustersNameWithResponse(ctx context.Context, projectName, name string, reqEditors ...RequestEditorFn) (*DeleteV2ProjectsProjectNameClustersNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteV2ProjectsProjectNameClustersNameWithResponse", varargs...)
	ret0, _ := ret[0].(*DeleteV2ProjectsProjectNameClustersNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteV2ProjectsProjectNameClustersNameWithResponse indicates an expected call of DeleteV2ProjectsProjectNameClustersNameWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteV2ProjectsProjectNameClustersNameWithResponse(ctx, projectName, name any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV2ProjectsProjectNameClustersNameWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteV2ProjectsProjectNameClustersNameWithResponse), varargs...)
}

// DeleteV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse(ctx context.Context, projectName, name, version string, reqEditors ...RequestEditorFn) (*DeleteV2ProjectsProjectNameTemplatesNameVersionsVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse", varargs...)
	ret0, _ := ret[0].(*DeleteV2ProjectsProjectNameTemplatesNameVersionsVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse indicates an expected call of DeleteV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse(ctx, projectName, name, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse), varargs...)
}

// GetV2ProjectsProjectNameClustersNameKubeconfigsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetV2ProjectsProjectNameClustersNameKubeconfigsWithResponse(ctx context.Context, projectName, name string, reqEditors ...RequestEditorFn) (*GetV2ProjectsProjectNameClustersNameKubeconfigsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameClustersNameKubeconfigsWithResponse", varargs...)
	ret0, _ := ret[0].(*GetV2ProjectsProjectNameClustersNameKubeconfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameClustersNameKubeconfigsWithResponse indicates an expected call of GetV2ProjectsProjectNameClustersNameKubeconfigsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetV2ProjectsProjectNameClustersNameKubeconfigsWithResponse(ctx, projectName, name any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameClustersNameKubeconfigsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetV2ProjectsProjectNameClustersNameKubeconfigsWithResponse), varargs...)
}

// GetV2ProjectsProjectNameClustersNameWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetV2ProjectsProjectNameClustersNameWithResponse(ctx context.Context, projectName, name string, reqEditors ...RequestEditorFn) (*GetV2ProjectsProjectNameClustersNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameClustersNameWithResponse", varargs...)
	ret0, _ := ret[0].(*GetV2ProjectsProjectNameClustersNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameClustersNameWithResponse indicates an expected call of GetV2ProjectsProjectNameClustersNameWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetV2ProjectsProjectNameClustersNameWithResponse(ctx, projectName, name any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameClustersNameWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetV2ProjectsProjectNameClustersNameWithResponse), varargs...)
}

// GetV2ProjectsProjectNameClustersNodeIdClusterdetailWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetV2ProjectsProjectNameClustersNodeIdClusterdetailWithResponse(ctx context.Context, projectName, nodeId string, reqEditors ...RequestEditorFn) (*GetV2ProjectsProjectNameClustersNodeIdClusterdetailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, nodeId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameClustersNodeIdClusterdetailWithResponse", varargs...)
	ret0, _ := ret[0].(*GetV2ProjectsProjectNameClustersNodeIdClusterdetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameClustersNodeIdClusterdetailWithResponse indicates an expected call of GetV2ProjectsProjectNameClustersNodeIdClusterdetailWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetV2ProjectsProjectNameClustersNodeIdClusterdetailWithResponse(ctx, projectName, nodeId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, nodeId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameClustersNodeIdClusterdetailWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetV2ProjectsProjectNameClustersNodeIdClusterdetailWithResponse), varargs...)
}

// GetV2ProjectsProjectNameClustersSummaryWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetV2ProjectsProjectNameClustersSummaryWithResponse(ctx context.Context, projectName string, reqEditors ...RequestEditorFn) (*GetV2ProjectsProjectNameClustersSummaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameClustersSummaryWithResponse", varargs...)
	ret0, _ := ret[0].(*GetV2ProjectsProjectNameClustersSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameClustersSummaryWithResponse indicates an expected call of GetV2ProjectsProjectNameClustersSummaryWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetV2ProjectsProjectNameClustersSummaryWithResponse(ctx, projectName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameClustersSummaryWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetV2ProjectsProjectNameClustersSummaryWithResponse), varargs...)
}

// GetV2ProjectsProjectNameClustersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetV2ProjectsProjectNameClustersWithResponse(ctx context.Context, projectName string, params *GetV2ProjectsProjectNameClustersParams, reqEditors ...RequestEditorFn) (*GetV2ProjectsProjectNameClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameClustersWithResponse", varargs...)
	ret0, _ := ret[0].(*GetV2ProjectsProjectNameClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameClustersWithResponse indicates an expected call of GetV2ProjectsProjectNameClustersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetV2ProjectsProjectNameClustersWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameClustersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetV2ProjectsProjectNameClustersWithResponse), varargs...)
}

// GetV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse(ctx context.Context, projectName, name, version string, reqEditors ...RequestEditorFn) (*GetV2ProjectsProjectNameTemplatesNameVersionsVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse", varargs...)
	ret0, _ := ret[0].(*GetV2ProjectsProjectNameTemplatesNameVersionsVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse indicates an expected call of GetV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse(ctx, projectName, name, version any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetV2ProjectsProjectNameTemplatesNameVersionsVersionWithResponse), varargs...)
}

// GetV2ProjectsProjectNameTemplatesNameVersionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetV2ProjectsProjectNameTemplatesNameVersionsWithResponse(ctx context.Context, projectName, name string, reqEditors ...RequestEditorFn) (*GetV2ProjectsProjectNameTemplatesNameVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameTemplatesNameVersionsWithResponse", varargs...)
	ret0, _ := ret[0].(*GetV2ProjectsProjectNameTemplatesNameVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameTemplatesNameVersionsWithResponse indicates an expected call of GetV2ProjectsProjectNameTemplatesNameVersionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetV2ProjectsProjectNameTemplatesNameVersionsWithResponse(ctx, projectName, name any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameTemplatesNameVersionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetV2ProjectsProjectNameTemplatesNameVersionsWithResponse), varargs...)
}

// GetV2ProjectsProjectNameTemplatesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetV2ProjectsProjectNameTemplatesWithResponse(ctx context.Context, projectName string, params *GetV2ProjectsProjectNameTemplatesParams, reqEditors ...RequestEditorFn) (*GetV2ProjectsProjectNameTemplatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2ProjectsProjectNameTemplatesWithResponse", varargs...)
	ret0, _ := ret[0].(*GetV2ProjectsProjectNameTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2ProjectsProjectNameTemplatesWithResponse indicates an expected call of GetV2ProjectsProjectNameTemplatesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetV2ProjectsProjectNameTemplatesWithResponse(ctx, projectName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2ProjectsProjectNameTemplatesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetV2ProjectsProjectNameTemplatesWithResponse), varargs...)
}

// PostV2ProjectsProjectNameClustersWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostV2ProjectsProjectNameClustersWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ProjectsProjectNameClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV2ProjectsProjectNameClustersWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*PostV2ProjectsProjectNameClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV2ProjectsProjectNameClustersWithBodyWithResponse indicates an expected call of PostV2ProjectsProjectNameClustersWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostV2ProjectsProjectNameClustersWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV2ProjectsProjectNameClustersWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostV2ProjectsProjectNameClustersWithBodyWithResponse), varargs...)
}

// PostV2ProjectsProjectNameClustersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostV2ProjectsProjectNameClustersWithResponse(ctx context.Context, projectName string, body PostV2ProjectsProjectNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ProjectsProjectNameClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV2ProjectsProjectNameClustersWithResponse", varargs...)
	ret0, _ := ret[0].(*PostV2ProjectsProjectNameClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV2ProjectsProjectNameClustersWithResponse indicates an expected call of PostV2ProjectsProjectNameClustersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostV2ProjectsProjectNameClustersWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV2ProjectsProjectNameClustersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostV2ProjectsProjectNameClustersWithResponse), varargs...)
}

// PostV2ProjectsProjectNameTemplatesWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostV2ProjectsProjectNameTemplatesWithBodyWithResponse(ctx context.Context, projectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ProjectsProjectNameTemplatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV2ProjectsProjectNameTemplatesWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*PostV2ProjectsProjectNameTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV2ProjectsProjectNameTemplatesWithBodyWithResponse indicates an expected call of PostV2ProjectsProjectNameTemplatesWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostV2ProjectsProjectNameTemplatesWithBodyWithResponse(ctx, projectName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV2ProjectsProjectNameTemplatesWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostV2ProjectsProjectNameTemplatesWithBodyWithResponse), varargs...)
}

// PostV2ProjectsProjectNameTemplatesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostV2ProjectsProjectNameTemplatesWithResponse(ctx context.Context, projectName string, body PostV2ProjectsProjectNameTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ProjectsProjectNameTemplatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV2ProjectsProjectNameTemplatesWithResponse", varargs...)
	ret0, _ := ret[0].(*PostV2ProjectsProjectNameTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV2ProjectsProjectNameTemplatesWithResponse indicates an expected call of PostV2ProjectsProjectNameTemplatesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostV2ProjectsProjectNameTemplatesWithResponse(ctx, projectName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV2ProjectsProjectNameTemplatesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostV2ProjectsProjectNameTemplatesWithResponse), varargs...)
}

// PutV2ProjectsProjectNameClustersNameLabelsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PutV2ProjectsProjectNameClustersNameLabelsWithBodyWithResponse(ctx context.Context, projectName, name, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ProjectsProjectNameClustersNameLabelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameLabelsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*PutV2ProjectsProjectNameClustersNameLabelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameLabelsWithBodyWithResponse indicates an expected call of PutV2ProjectsProjectNameClustersNameLabelsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameLabelsWithBodyWithResponse(ctx, projectName, name, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameLabelsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PutV2ProjectsProjectNameClustersNameLabelsWithBodyWithResponse), varargs...)
}

// PutV2ProjectsProjectNameClustersNameLabelsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PutV2ProjectsProjectNameClustersNameLabelsWithResponse(ctx context.Context, projectName, name string, body PutV2ProjectsProjectNameClustersNameLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ProjectsProjectNameClustersNameLabelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameLabelsWithResponse", varargs...)
	ret0, _ := ret[0].(*PutV2ProjectsProjectNameClustersNameLabelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameLabelsWithResponse indicates an expected call of PutV2ProjectsProjectNameClustersNameLabelsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameLabelsWithResponse(ctx, projectName, name, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameLabelsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PutV2ProjectsProjectNameClustersNameLabelsWithResponse), varargs...)
}

// PutV2ProjectsProjectNameClustersNameNodesWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PutV2ProjectsProjectNameClustersNameNodesWithBodyWithResponse(ctx context.Context, projectName, name, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ProjectsProjectNameClustersNameNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameNodesWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*PutV2ProjectsProjectNameClustersNameNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameNodesWithBodyWithResponse indicates an expected call of PutV2ProjectsProjectNameClustersNameNodesWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameNodesWithBodyWithResponse(ctx, projectName, name, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameNodesWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PutV2ProjectsProjectNameClustersNameNodesWithBodyWithResponse), varargs...)
}

// PutV2ProjectsProjectNameClustersNameNodesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PutV2ProjectsProjectNameClustersNameNodesWithResponse(ctx context.Context, projectName, name string, body PutV2ProjectsProjectNameClustersNameNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ProjectsProjectNameClustersNameNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameNodesWithResponse", varargs...)
	ret0, _ := ret[0].(*PutV2ProjectsProjectNameClustersNameNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameNodesWithResponse indicates an expected call of PutV2ProjectsProjectNameClustersNameNodesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameNodesWithResponse(ctx, projectName, name, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameNodesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PutV2ProjectsProjectNameClustersNameNodesWithResponse), varargs...)
}

// PutV2ProjectsProjectNameClustersNameTemplateWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PutV2ProjectsProjectNameClustersNameTemplateWithBodyWithResponse(ctx context.Context, projectName, name, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ProjectsProjectNameClustersNameTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameTemplateWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*PutV2ProjectsProjectNameClustersNameTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameTemplateWithBodyWithResponse indicates an expected call of PutV2ProjectsProjectNameClustersNameTemplateWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameTemplateWithBodyWithResponse(ctx, projectName, name, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameTemplateWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PutV2ProjectsProjectNameClustersNameTemplateWithBodyWithResponse), varargs...)
}

// PutV2ProjectsProjectNameClustersNameTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PutV2ProjectsProjectNameClustersNameTemplateWithResponse(ctx context.Context, projectName, name string, body PutV2ProjectsProjectNameClustersNameTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ProjectsProjectNameClustersNameTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameClustersNameTemplateWithResponse", varargs...)
	ret0, _ := ret[0].(*PutV2ProjectsProjectNameClustersNameTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameClustersNameTemplateWithResponse indicates an expected call of PutV2ProjectsProjectNameClustersNameTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PutV2ProjectsProjectNameClustersNameTemplateWithResponse(ctx, projectName, name, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameClustersNameTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PutV2ProjectsProjectNameClustersNameTemplateWithResponse), varargs...)
}

// PutV2ProjectsProjectNameTemplatesNameDefaultWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PutV2ProjectsProjectNameTemplatesNameDefaultWithBodyWithResponse(ctx context.Context, projectName, name, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ProjectsProjectNameTemplatesNameDefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameTemplatesNameDefaultWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*PutV2ProjectsProjectNameTemplatesNameDefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameTemplatesNameDefaultWithBodyWithResponse indicates an expected call of PutV2ProjectsProjectNameTemplatesNameDefaultWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PutV2ProjectsProjectNameTemplatesNameDefaultWithBodyWithResponse(ctx, projectName, name, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameTemplatesNameDefaultWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PutV2ProjectsProjectNameTemplatesNameDefaultWithBodyWithResponse), varargs...)
}

// PutV2ProjectsProjectNameTemplatesNameDefaultWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PutV2ProjectsProjectNameTemplatesNameDefaultWithResponse(ctx context.Context, projectName, name string, body PutV2ProjectsProjectNameTemplatesNameDefaultJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ProjectsProjectNameTemplatesNameDefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, name, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutV2ProjectsProjectNameTemplatesNameDefaultWithResponse", varargs...)
	ret0, _ := ret[0].(*PutV2ProjectsProjectNameTemplatesNameDefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutV2ProjectsProjectNameTemplatesNameDefaultWithResponse indicates an expected call of PutV2ProjectsProjectNameTemplatesNameDefaultWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PutV2ProjectsProjectNameTemplatesNameDefaultWithResponse(ctx, projectName, name, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, name, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutV2ProjectsProjectNameTemplatesNameDefaultWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PutV2ProjectsProjectNameTemplatesNameDefaultWithResponse), varargs...)
}
