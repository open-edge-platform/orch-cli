// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

package cli

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/open-edge-platform/cli/pkg/auth"
	"github.com/open-edge-platform/cli/pkg/rest/rps"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"golang.org/x/term"
)

const listAmtProfileExamples = `
# List all AMT domain profiles
orch-cli list amtprofile --project some-project
`

const createAmtProfileExamples = `
# Create AMT domain profile information using it's name
orch-cli create amtprofile name --project some-project --cert ./path/to/cert.pfx --cert-pass password --cert-format string --domain-suffix example.com

--cert - Mandatory path to PFX certificate: --cert ./path/to/cert.pfx
--cert-pass - Mandatory password used ot decode the provided certificate: --cert-pass mypass
--cert-format - Mandatory field defining how the cert is stored, accepted value "string" or "raw": --cert-format string
--domain-suffix - Mandatory field defining the domain suffix for which the cert is created: --domain-suffix example.com
`

const getAmtProfileExamples = `
# Get an AMT domain profile
orch-cli get  amtprofile name --project some-project
`
const deleteAmtProfileExamples = `
# Delete an AMT domain profile
orch-cli delete amtprofile name --project some-project
`

func getListAmtProfileCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "amtprofile [flags]",
		Short:   "List all amptprofiles",
		Example: listAmtProfileExamples,
		Aliases: []string{"amtprofile", "amtprofiles"},
		RunE:    runListAmtProfileCommand,
	}
	//cmd.PersistentFlags().StringP("region", "r", viper.GetString("region"), "Optional filter provided as part of site list to filter sites by parent region")
	return cmd
}

func getGetAmtProfileCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "amtprofile <resourceid> [flags]",
		Short:   "Get an AMT profile",
		Example: getAmtProfileExamples,
		Args:    cobra.ExactArgs(1),
		Aliases: []string{"amtprofile", "amtprofiles"},
		RunE:    runGetAmtProfileCommand,
	}
	return cmd
}

func getCreateAmtProfileCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "amtprofile name [flags]",
		Short:   "Create an AMT profile",
		Example: createAmtProfileExamples,
		Args:    cobra.ExactArgs(1),
		RunE:    runCreateAmtProfileCommand,
	}
	cmd.PersistentFlags().StringP("domain-suffix", "d", viper.GetString("domain-suffix"), "Mandatory domain name suffix")
	cmd.PersistentFlags().StringP("cert", "c", viper.GetString("cert"), "Mandatory path to SSL certificate")
	cmd.PersistentFlags().StringP("cert-pass", "s", viper.GetString("cert-pass"), "Mandatory password for SSL certificate")
	cmd.PersistentFlags().StringP("cert-format", "f", viper.GetString("cert-format"), "Mandatory format of SSL certificate")

	return cmd
}

func getDeleteAmtProfileCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "amtprofile <resourceid> [flags]",
		Short:   "Delete an AMT profile",
		Example: deleteAmtProfileExamples,
		Args:    cobra.ExactArgs(1),
		RunE:    runDeleteAmtProfileCommand,
	}
	return cmd
}

// Lists all AMT profiles
func runListAmtProfileCommand(cmd *cobra.Command, _ []string) error {
	writer, verbose := getOutputContext(cmd)
	count := true
	ctx, rpsClient, projectName, err := RpsFactory(cmd)
	if err != nil {
		return err
	}

	resp, err := rpsClient.GetAllDomainsWithResponse(ctx, projectName, &rps.GetAllDomainsParams{
		Count: &count,
	}, auth.AddAuthHeader)
	if err != nil {
		return processError(err)
	}

	if err := checkResponse(resp.HTTPResponse, "error while retrieving AMT profiles"); err != nil {
		return err
	}

	var countDomainResponse rps.CountDomainResponse

	// Unmarshal the JSON data into the CountDomainResponse struct
	//The autogenerated struct in rps struct has union field with lower case and causes trouble to access externally
	err = json.Unmarshal(resp.Body, &countDomainResponse)
	if err != nil {
		fmt.Println("Error unmarshalling JSON:", err)
		return err
	}

	printAmtProfiles(writer, countDomainResponse, verbose)

	return writer.Flush()
}

func runCreateAmtProfileCommand(cmd *cobra.Command, args []string) error {
	name := args[0]
	certpath, _ := cmd.Flags().GetString("cert")
	certpass, _ := cmd.Flags().GetString("cert-pass")
	certformat, _ := cmd.Flags().GetString("cert-format")
	domainsuffix, _ := cmd.Flags().GetString("domain-suffix")

	cert, err := readCert(certpath)
	if err != nil {
		return err
	}

	if certpass == "" {
		fmt.Print("Enter Certificate Password: ")
		bytePassword, err := term.ReadPassword(int(os.Stdin.Fd()))
		if err != nil {
			return err
		}
		certpass = string(bytePassword)
	}

	if certpass == "" || strings.HasPrefix(certpass, "--") {
		return errors.New("certificate password must be provided with --cert-pass flag and cannot be empty")
	}
	if certformat == "" || certformat != "string" && certformat != "raw" {
		return errors.New("certificate format must be provided with --cert-format flag with accepted arguments `string|raw` ")
	}
	if domainsuffix == "" || strings.HasPrefix(domainsuffix, "--") {
		return errors.New("domain suffix format must be provided with --domain-suffix flag and cannot be empty")
	}

	ctx, rpsClient, projectName, err := RpsFactory(cmd)
	if err != nil {
		return err
	}

	resp, err := rpsClient.CreateDomainWithResponse(ctx, projectName,
		rps.CreateDomainJSONRequestBody{
			DomainSuffix:                  domainsuffix,
			ProfileName:                   name,
			ProvisioningCert:              cert,
			ProvisioningCertPassword:      certpass,
			ProvisioningCertStorageFormat: certformat,
		}, auth.AddAuthHeader)
	if err != nil {
		return processError(err)
	}
	return checkResponse(resp.HTTPResponse, "error while creating AMT")
}

func runGetAmtProfileCommand(cmd *cobra.Command, args []string) error {
	writer, verbose := getOutputContext(cmd)
	ctx, rpsClient, projectName, err := RpsFactory(cmd)
	if err != nil {
		return err
	}

	name := args[0]

	resp, err := rpsClient.GetDomainWithResponse(ctx, projectName,
		name, auth.AddAuthHeader)
	if err != nil {
		return processError(err)
	}

	if proceed, err := processResponse(resp.HTTPResponse, resp.Body, writer, verbose,
		"", "error getting AMT profile"); !proceed {
		return err
	}

	printAmtProfile(writer, *resp.JSON200)
	return writer.Flush()

}

func runDeleteAmtProfileCommand(cmd *cobra.Command, args []string) error {
	name := args[0]

	ctx, rpsClient, projectName, err := RpsFactory(cmd)
	if err != nil {
		return err
	}

	resp, err := rpsClient.RemoveDomainWithResponse(ctx, projectName,
		name, auth.AddAuthHeader)
	if err != nil {
		return processError(err)
	}

	err = checkResponse(resp.HTTPResponse, "error while deleting AMT profile")
	if err != nil {
		if strings.Contains(string(resp.Body), `"Not Found"`) {
			return errors.New("AMT profile does not exist")
		}
	}
	return err
}

func printAmtProfiles(writer io.Writer, amtprofiles rps.CountDomainResponse, verbose bool) {
	if verbose {
		fmt.Fprintf(writer, "\n%s\t%s\t%s\t%s\t%s\n", "AMT Profile Name", "Domain Suffix", "Version", "Format", "Expiration date")
	} else {
		var shortHeader = fmt.Sprintf("\n%s\t%s", "AMT Profile Name", "Domain Suffix")
		fmt.Fprintf(writer, "%s\n", shortHeader)
	}
	for _, domain := range *amtprofiles.Data {

		if !verbose {
			fmt.Fprintf(writer, "%s\t%s\n", domain.ProfileName, domain.DomainSuffix)
		} else {
			fmt.Fprintf(writer, "%s\t%s\t%s\t%s\t%s\n", domain.ProfileName, domain.DomainSuffix, domain.Version, domain.ProvisioningCertStorageFormat, domain.ExpirationDate)
		}
	}
}

// Prints output details of site
func printAmtProfile(writer io.Writer, amtprofile rps.DomainResponse) {

	_, _ = fmt.Fprintf(writer, "Name: \t%s\n", amtprofile.ProfileName)
	_, _ = fmt.Fprintf(writer, "Domain Suffix: \t%s\n", amtprofile.DomainSuffix)
	_, _ = fmt.Fprintf(writer, "Version: \t%s\n", amtprofile.Version)
	_, _ = fmt.Fprintf(writer, "Tenant ID: \t%s\n", amtprofile.TenantId)
	_, _ = fmt.Fprintf(writer, "Cert Format: \t%s\n", amtprofile.ProvisioningCertStorageFormat)
	_, _ = fmt.Fprintf(writer, "Expiration Date: \t%s\n", amtprofile.ExpirationDate)

}

func readCert(certPath string) ([]byte, error) {

	if certPath == "" || strings.HasPrefix(certPath, "--") {
		return nil, errors.New("certificate path must be provided with --cert flag and cannot be empty")
	}

	if err := isSafePath(certPath); err != nil {
		return nil, err
	}

	certData, err := os.ReadFile(certPath)
	if err != nil {
		return nil, fmt.Errorf("failed to read certificate file: %w", err)
	}

	return certData, nil
}
